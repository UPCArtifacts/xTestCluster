import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) '4');
        int[] intArray17 = new int[] {};
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray22);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 1);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22);
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray12, intArray27);
        int[] intArray29 = new int[] {};
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 1);
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 1);
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray37, intArray46);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (short) 100);
        int[] intArray50 = new int[] {};
        int[] intArray55 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray55);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray55, (int) (short) 1);
        int[] intArray65 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int66 = org.apache.commons.math3.util.MathArrays.distance1(intArray58, intArray65);
        int int67 = org.apache.commons.math3.util.MathArrays.distance1(intArray37, intArray65);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, 100);
        double double70 = org.apache.commons.math3.util.MathArrays.distance(intArray12, intArray69);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 98 + "'", int66 == 98);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 98 + "'", int67 == 98);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 145.68802284333466d + "'", double70 == 145.68802284333466d);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection7, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection10, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection13, false);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection23 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray22, orderDirection23, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean28 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray22, orderDirection26, false);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray54);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray56, doubleArray75);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray56, orderDirection77, true);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray32, orderDirection77, false, false);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray22, orderDirection77, false);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection77, true);
        java.lang.Class<?> wildcardClass87 = strArray6.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection7.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + orderDirection23 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection23.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection77 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection77.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray66);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(doubleArray55, doubleArray66);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray55);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (double) 100L);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray37, doubleArray47);
        double double73 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 13.601470508735444d + "'", double73 == 13.601470508735444d);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 1);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray18);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int int35 = org.apache.commons.math3.util.MathArrays.distance1(intArray21, intArray33);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) '4');
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 1);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43);
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray33, intArray48);
        double double50 = org.apache.commons.math3.util.MathArrays.distance(intArray20, intArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (short) 1);
        int[] intArray16 = new int[] {};
        int[] intArray21 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int22 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray16, intArray21);
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (short) 1);
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray15, intArray24);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15);
        int[] intArray27 = new int[] {};
        int[] intArray32 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int33 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray32);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32, (int) (short) 10);
        int int36 = org.apache.commons.math3.util.MathArrays.distance1(intArray15, intArray32);
        double double37 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray15);
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray45 = new int[] {};
        int[] intArray50 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int51 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray45, intArray50);
        int int52 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray50);
        int[] intArray54 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, 0);
        int[] intArray55 = new int[] {};
        int[] intArray60 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int61 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray55, intArray60);
        int[] intArray62 = new int[] {};
        int[] intArray67 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int68 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray62, intArray67);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray67, (int) (short) 1);
        int[] intArray71 = new int[] {};
        int[] intArray76 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray71, intArray76);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76, (int) (short) 1);
        int int80 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray70, intArray79);
        int[] intArray81 = new int[] {};
        int[] intArray86 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int87 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray81, intArray86);
        double double88 = org.apache.commons.math3.util.MathArrays.distance(intArray79, intArray86);
        double double89 = org.apache.commons.math3.util.MathArrays.distance(intArray55, intArray79);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray79, (int) (short) 0);
        int int92 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray91);
        int[] intArray93 = org.apache.commons.math3.util.MathArrays.copyOf(intArray91);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray15, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21);
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        int[] intArray25 = new int[] {};
        int[] intArray30 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int31 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray25, intArray30);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (short) 1);
        int[] intArray34 = new int[] {};
        int[] intArray39 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray34, intArray39);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39, (int) (short) 1);
        int int43 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray33, intArray42);
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 100);
        int[] intArray46 = new int[] {};
        int[] intArray51 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int52 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray46, intArray51);
        int[] intArray54 = org.apache.commons.math3.util.MathArrays.copyOf(intArray51, (int) (short) 1);
        int[] intArray55 = new int[] {};
        int[] intArray60 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int61 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray55, intArray60);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray60, (int) (short) 1);
        int int64 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray54, intArray63);
        int[] intArray65 = new int[] {};
        int[] intArray70 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int71 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray65, intArray70);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70, (int) (short) 1);
        int[] intArray74 = new int[] {};
        int[] intArray79 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int80 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray74, intArray79);
        int[] intArray82 = org.apache.commons.math3.util.MathArrays.copyOf(intArray79, (int) (short) 1);
        int int83 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray82);
        int int84 = org.apache.commons.math3.util.MathArrays.distance1(intArray63, intArray82);
        double double85 = org.apache.commons.math3.util.MathArrays.distance(intArray33, intArray63);
        int[] intArray86 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33);
        double double87 = org.apache.commons.math3.util.MathArrays.distance(intArray21, intArray33);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-3.2949139463354136E89d), 2.6817058196121406E33d, 0.0d, (-3.48967922381901E15d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-8.835989905008883E122d) + "'", double4 == (-8.835989905008883E122d));
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) '4');
        int[] intArray17 = new int[] {};
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray22);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 1);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22);
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray12, intArray27);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35]");
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 3.0341344585090943E22d, 2165.0d, 2.303752319195026E28d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4.987623771057232E31d + "'", double4 == 4.987623771057232E31d);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray41);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray53);
        double double55 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray41, doubleArray53);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray20, doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2111.0d + "'", double55 == 2111.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray46);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray46);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray41, doubleArray46);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray71);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray83);
        double double85 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray71, doubleArray83);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection86 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray83, orderDirection86, true);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray41, orderDirection86, false);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 21.0d + "'", double54 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2111.0d + "'", double85 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection86 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection86.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection3 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean5 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection3, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection6 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean8 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection6, true);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray13);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray30, orderDirection31, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection34 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray30, orderDirection34, false);
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray23, orderDirection34, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray23, orderDirection39, false);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20, orderDirection39, false, false);
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection39, false);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + orderDirection3 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection3.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + orderDirection6 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection6.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + orderDirection34 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection34.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double double53 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray17, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2165.0d, doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -2,165 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[21650.0, -2165.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double double31 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray16);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray38, orderDirection39, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray38, orderDirection42, false);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray61);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray73);
        double double75 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray61, doubleArray73);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection76 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray73, orderDirection76, true);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray38, orderDirection76, true);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16, orderDirection76, false, false);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.04987562112089d + "'", double31 == 10.04987562112089d);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2111.0d + "'", double75 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection76 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection76.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray4);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray21, orderDirection22, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray21, orderDirection25, false);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray14, orderDirection25, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray14, orderDirection30, false);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray11, orderDirection30, false, false);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray11, (int) '4');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray11, orderDirection38, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 10.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49, (int) (byte) 100);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray18, doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double double35 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray29);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray29, 1363.329967155091d);
        double double38 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale(2.3726213090057078E14d, doubleArray37);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39, 1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1360.1470508735442d + "'", double35 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 6181.097447311743d + "'", double38 == 6181.097447311743d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.7039971938346611E17, 2.1564438208521472E17, 1.07822191042607347E18]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.7039971938346611E17]");
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        double[] doubleArray1 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray39);
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equals(doubleArray28, doubleArray39);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray39);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray70);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equals(doubleArray59, doubleArray70);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray59);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray51, (double) 100L);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray51);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray9, doubleArray39);
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray84, orderDirection85, false);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray9, orderDirection85, false);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray1, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(0.0d, doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray39);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, 10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.708270408017212E47d), doubleArray42);
        double[] doubleArray46 = null;
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equals(doubleArray42, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, 1849908.0027625682d);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.scale((-2.615914305086962E12d), doubleArray49);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.554526071295663E50, -3.4336235201145966E49, -1.708270408017212E50]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-910.0, 201.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-5784935.678742049, 1277771.5070628044, 6357072.174441813]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.513289599602928E19, -3.3425407639581158E18, -1.6629556039592616E19]");
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(2.1940812183982476E20d, (-1.8472811104669136E8d), (double) (short) -1, 1.0736316432238322E99d, (double) (byte) 1, (-2.554111747075503E77d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0736316432238322E99d) + "'", double6 == (-1.0736316432238322E99d));
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (double) 100L);
        double double66 = org.apache.commons.math3.util.MathArrays.distance(doubleArray10, doubleArray65);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection67 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray65, orderDirection67, false, false);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray65);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.scale(21009.0d, doubleArray65);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray72, 0.0d);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 439.780879782446d + "'", double66 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + orderDirection67 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection67.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[6302700.0, -1400600.0, -7003000.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-0.0, 0.0, 0.0]");
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.scale((-1.5183866289549949E7d), doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double double50 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray27);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray67);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, (int) ' ');
        double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray69);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, 0);
        double double75 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 21.0d + "'", double50 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray15 = new int[] {};
        int[] intArray20 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int21 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray15, intArray20);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20, (int) (short) 1);
        int[] intArray24 = new int[] {};
        int[] intArray29 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int30 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray24, intArray29);
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 1);
        int int33 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray23, intArray32);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, 0);
        int[] intArray36 = new int[] {};
        int[] intArray41 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int42 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray36, intArray41);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41, (int) (short) 1);
        int[] intArray45 = new int[] {};
        int[] intArray50 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int51 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray45, intArray50);
        int[] intArray53 = org.apache.commons.math3.util.MathArrays.copyOf(intArray50, (int) (short) 1);
        int int54 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray44, intArray53);
        int[] intArray55 = new int[] {};
        int[] intArray60 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int61 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray55, intArray60);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray60, (int) (short) 1);
        int[] intArray64 = new int[] {};
        int[] intArray69 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 1);
        int int73 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray63, intArray72);
        int int74 = org.apache.commons.math3.util.MathArrays.distance1(intArray53, intArray72);
        int[] intArray75 = new int[] {};
        int[] intArray80 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int81 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray75, intArray80);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80, (int) (short) 1);
        int int84 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray80);
        int int85 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray35, intArray80);
        int[] intArray86 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80);
        int int87 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray12, intArray80);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 100, 100, 35]");
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41);
        double double43 = org.apache.commons.math3.util.MathArrays.distance(intArray20, intArray41);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20, 10);
        java.lang.Class<?> wildcardClass47 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray18);
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray20);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 14.866068747318506d + "'", double21 == 14.866068747318506d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-10.0, 1.0, -0.0]");
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray58);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray70);
        double double72 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray58, doubleArray70);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection73 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray70, orderDirection73, true);
        double double76 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray38, doubleArray70);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray81);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray38, doubleArray81);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1020.0d, doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10,200 >= -1,020)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10200.0, -1020.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2111.0d + "'", double72 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection73 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection73.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-9200.0d) + "'", double76 == (-9200.0d));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, -0.0, 0.0]");
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 0);
        double[] doubleArray13 = null;
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray13);
        double[] doubleArray20 = new double[] { 1, 1, 10 };
        double[] doubleArray24 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray24);
        double[] doubleArray29 = new double[] { 1, 1, 10 };
        double[] doubleArray33 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray33);
        double[] doubleArray39 = new double[] { 1, 1, 10 };
        double[] doubleArray43 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray43);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray52);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray35, doubleArray54);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray74);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equals(doubleArray63, doubleArray74);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray54, doubleArray74);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray74, 0);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray83);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray89);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(doubleArray74, doubleArray89);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2.667039156913762E7d, doubleArray89);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale((-273300.0d), doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[2.667039156913762E7, 2.667039156913762E7, 2.667039156913762E8]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-7.289018015845312E12, -7.289018015845312E12, -7.289018015845312E13]");
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, 144652.08102413287d);
        double double65 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.04987562112089d + "'", double65 == 10.04987562112089d);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(14.866068747318506d, (-2.0559464345526106E59d), 7.55404E7d, (-5.2221633920904585E36d), (-3.2747201721782604E59d), 2.506821214483436E71d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-8.209137999113313E130d) + "'", double6 == (-8.209137999113313E130d));
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-4.2035421686351696E21d), 22457.292802116644d, (-7.099683957756804E102d), (-2.6131166153754868E10d), 2.1117732147974097E106d, 1339.7287038800057d, (-3.2346729696531273E35d), (-7.217129340870217E25d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.855513131712105E113d + "'", double8 == 1.855513131712105E113d);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-7.099683957756804E102d), 6.364464749353691E111d, 1.7658161307194125E7d, (-2.3050398777241942E83d), (-3.5851885979534E128d), (-1.405900735433483E96d), 7.926180822553106E46d, 21009.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.040419286078566E224d + "'", double8 == 5.040419286078566E224d);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray27);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, 0);
        int[] intArray31 = new int[] {};
        int[] intArray36 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray31, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (short) 1);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39, (int) (short) 100);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray51);
        double double53 = org.apache.commons.math3.util.MathArrays.distance(intArray30, intArray51);
        int[] intArray54 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, 10);
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray5, intArray56);
        int[] intArray58 = new int[] {};
        int[] intArray63 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int64 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray63);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (short) 1);
        int[] intArray67 = new int[] {};
        int[] intArray72 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int73 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray67, intArray72);
        int[] intArray75 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) 1);
        int int76 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray66, intArray75);
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 100);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78);
        int int80 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray5, intArray79);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray40);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray32, (double) 100L);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray32);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray57, (double) 'a');
        double double60 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray57);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.scale(1.5460450237574002E8d, doubleArray57);
        double double62 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray57);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray0, doubleArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-291.0, 64.66666666666667, 323.3333333333333]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1346.545580364809d + "'", double60 == 1346.545580364809d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.3775261161678436E11, 3.0611691470396523E10, 1.5305845735198264E11]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1346.545580364809d + "'", double62 == 1346.545580364809d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-891.0, 198.0, 990.0]");
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray32);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray52);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray52);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray83);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(doubleArray72, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray72);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray64, (double) 100L);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray64);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray32, doubleArray64);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.scale(1360.1470508735442d, doubleArray64);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64, 0);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray64);
        java.lang.Class<?> wildcardClass95 = doubleArray18.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-12241.323457861898, 2720.2941017470885, 13601.470508735441]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-3.446049549398677E120d), 10.099504938362077d, 2.4397658821053278E76d, 1.1461596173157833E27d, 101.0d, 3.401775050104543E33d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-3.480339444199235E121d) + "'", double6 == (-3.480339444199235E121d));
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (short) -1, 10.099504938362077d, (-2.554111747075503E77d), (-3.2747201720949453E59d), (-1.3838648976946252E105d), (double) 'a', 47618.74825108279d, 8.5815885820656E40d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 8.364001259932813E136d + "'", double8 == 8.364001259932813E136d);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray27, orderDirection28, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray27, orderDirection31, false);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray15, orderDirection31, true);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray15);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray88);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray77, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray77);
        double double92 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray91);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale(929377.4372207435d, doubleArray91);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.scale((double) (short) 0, doubleArray93);
        double double95 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray11, doubleArray93);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.scale(1.7246705822717612E15d, doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2068.0d + "'", double92 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-1.7658171307194125E7, 2788132.3116622306, 9293774.372207435]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.7658161307194125E7d + "'", double95 == 1.7658161307194125E7d);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-3.0454528590233E22, 4.808609777405211E21, 1.6028699258017368E22]");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray18, doubleArray49);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray49, doubleArray74);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-5.691405330860345E15d), doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(7.214337735553726E68d, doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-4.105972024675743E85, 4.105972024675743E84, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-890.0, 199.0, 1000.0]");
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray61);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.7246705822717612E15d, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.scale((-1.2170120134952047E22d), doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray68);
        double[] doubleArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray71, doubleArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.7246705822717612E15, 1.7246705822717612E15, 1.7246705822717612E16]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-2.098944817946503E37, -2.098944817946503E37, -2.098944817946503E38]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.7246705822708612E15, 1.7246705822719612E15, 1.7246705822718612E16]");
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (short) 10);
        int[] intArray12 = new int[] {};
        int[] intArray17 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray12, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (short) 1);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int int30 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray29);
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20, 0);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, 1);
        int[] intArray36 = new int[] {};
        int[] intArray41 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int42 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray36, intArray41);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41, (int) (short) 1);
        int[] intArray45 = new int[] {};
        int[] intArray50 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int51 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray45, intArray50);
        int[] intArray53 = org.apache.commons.math3.util.MathArrays.copyOf(intArray50, (int) (short) 1);
        int int54 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray44, intArray53);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (byte) 10);
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray33, intArray53);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = org.apache.commons.math3.util.MathArrays.distance1(intArray11, intArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray38, orderDirection39, false);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray17, orderDirection39, true, false);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray17, (int) (short) 10);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.scale((-1.5183866289549949E7d), doubleArray17);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray75);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equals(doubleArray64, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray64);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray56, (double) 100L);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray56);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray56);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.518386628954995E8, 1.5183866289549949E7, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.518386538954995E8, 1.5183864289549949E7, -10.0]");
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.405900735433483E96d), 1353.329967155091d, 1.5460450237574002E8d, (-8.13113621789387E42d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.9026475961075138E99d) + "'", double4 == (-1.9026475961075138E99d));
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(8.636077385394107E69d, (-2.7326318893828427E20d), 88.21557489650559d, 14.866068747318506d, (double) 1, 3.401775050104543E33d, (-1.9875501E7d), 1353.403487508437d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-2.359922046250594E90d) + "'", double8 == (-2.359922046250594E90d));
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray45 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray45);
        double double48 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray45);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray45);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10000.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.00499987500625d + "'", double48 == 100.00499987500625d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 0.0, 1.0]");
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection27, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection30, false);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray14, orderDirection30, true);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray14);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray40);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray40);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray10, doubleArray40);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray58);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray76, orderDirection77, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection80 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray76, orderDirection80, false);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray64, orderDirection80, true);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (1 >= -0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + orderDirection77 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection77.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + orderDirection80 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection80.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[110.0, -11.0, 100.0, -10.0, 0.0]");
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double double31 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -9 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 13.601470508735444d + "'", double31 == 13.601470508735444d);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double double35 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(116405.9998500075d, doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -104,765,399.865 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0476539986500674E8, 2.32811999700015E7, 1.164059998500075E8]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1360.1470508735442d + "'", double35 == 1360.1470508735442d);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double double53 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray17, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, 100.0d);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale(9319.084308623767d, doubleArray39);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray61);
        double double68 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray56, doubleArray61);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray88);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray77, doubleArray88);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray88);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray88);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray88, 100);
        double double95 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray88);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray88, (int) (byte) 100);
        double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray61, doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[111.11111111111111, -11.11111111111111, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[93190.84308623767, -9319.084308623767, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1360.1470508735442d + "'", double95 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[0.0, -0.0, -0.0]");
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) 100L);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray31);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray56, (double) 'a');
        double double59 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray56);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale(1.5460450237574002E8d, doubleArray56);
        double double61 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray56);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray56);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray67);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray67);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray62, doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-291.0, 64.66666666666667, 323.3333333333333]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1346.545580364809d + "'", double59 == 1346.545580364809d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.3775261161678436E11, 3.0611691470396523E10, 1.5305845735198264E11]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1346.545580364809d + "'", double61 == 1346.545580364809d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-890.0, 199.0, 1000.0]");
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray21);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(doubleArray10, doubleArray21);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray21);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.scale((double) 1.0f, doubleArray21);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale(2.4215696632833603E43d, doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (900 >= -200)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[2.1794126969550244E46, -4.8431393265667203E45, -2.4215696632833603E46]");
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        float[] floatArray0 = null;
        float[] floatArray3 = new float[] { (-1L), (byte) 10 };
        float[] floatArray7 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean8 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray7);
        float[] floatArray11 = new float[] { (short) 1, (-1L) };
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray7, floatArray11);
        float[] floatArray15 = new float[] { (-1L), (byte) 10 };
        float[] floatArray19 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray15, floatArray19);
        float[] floatArray21 = null;
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(floatArray15, floatArray21);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray15);
        float[] floatArray26 = new float[] { (-1L), (byte) 10 };
        float[] floatArray30 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray26, floatArray30);
        float[] floatArray34 = new float[] { (short) 1, (-1L) };
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray30, floatArray34);
        float[] floatArray38 = new float[] { (-1L), (byte) 10 };
        float[] floatArray42 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray38, floatArray42);
        float[] floatArray46 = new float[] { (short) 1, (-1L) };
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray42, floatArray46);
        float[] floatArray50 = new float[] { (-1L), (byte) 10 };
        float[] floatArray54 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray50, floatArray54);
        float[] floatArray58 = new float[] { (short) 1, (-1L) };
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray54, floatArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(floatArray46, floatArray58);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(floatArray30, floatArray58);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(floatArray15, floatArray58);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray0, floatArray58);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) '#', 8.689869660197955E99d, 3.780478449848133E29d, (-5.691405330849884E16d), 1849908.0027625682d, 5.846767992354443E25d, 4.149720547924001E12d, 104609.92739486144d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.041454381069284E101d + "'", double8 == 3.041454381069284E101d);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray6);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray6);
        double[] doubleArray17 = new double[] { 1, 1, 10 };
        double[] doubleArray21 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray21);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray32, doubleArray51);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray71);
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equals(doubleArray60, doubleArray71);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray51, doubleArray71);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray71, 0);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray80);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray71, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray86);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.scale(1366.9312345542478d, doubleArray89);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray89);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-218665.0d), doubleArray89);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray89);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (-1,967,985 >= -1,967,985)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-1967985.0, -1967985.0, -1.967985E7]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[12302.38111098823, 12302.38111098823, 123023.8111098823]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[9.0, 9.0, 90.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-1967985.0, -1967985.0, -1.967985E7]");
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray41, 10);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray43);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.scale((-2.359922046250594E90d), doubleArray44);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray64);
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray49, doubleArray66);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray66, (int) (short) 100);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray45, doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-910.0, 201.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-910.0, 201.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[2.1475290620880404E93, -4.7434433129636933E92, -2.359922046250594E93, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 14.866068747318506d + "'", double67 == 14.866068747318506d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-10.0, 1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        float[] floatArray0 = null;
        float[] floatArray3 = new float[] { (-1L), (byte) 10 };
        float[] floatArray7 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean8 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray7);
        float[] floatArray11 = new float[] { (short) 1, (-1L) };
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray7, floatArray11);
        float[] floatArray15 = new float[] { (-1L), (byte) 10 };
        float[] floatArray19 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray15, floatArray19);
        float[] floatArray23 = new float[] { (short) 1, (-1L) };
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray19, floatArray23);
        float[] floatArray27 = new float[] { (-1L), (byte) 10 };
        float[] floatArray31 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray27, floatArray31);
        float[] floatArray33 = null;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(floatArray27, floatArray33);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray27);
        float[] floatArray38 = new float[] { (-1L), (byte) 10 };
        float[] floatArray42 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray38, floatArray42);
        float[] floatArray46 = new float[] { (short) 1, (-1L) };
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray42, floatArray46);
        float[] floatArray50 = new float[] { (-1L), (byte) 10 };
        float[] floatArray54 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray50, floatArray54);
        float[] floatArray56 = null;
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equals(floatArray50, floatArray56);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equals(floatArray42, floatArray50);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray27, floatArray50);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray7, floatArray27);
        float[] floatArray63 = new float[] { (-1L), (byte) 10 };
        float[] floatArray67 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray63, floatArray67);
        float[] floatArray71 = new float[] { (short) 1, (-1L) };
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray67, floatArray71);
        float[] floatArray75 = new float[] { (-1L), (byte) 10 };
        float[] floatArray79 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray75, floatArray79);
        float[] floatArray81 = null;
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equals(floatArray75, floatArray81);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(floatArray67, floatArray75);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equals(floatArray27, floatArray67);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(floatArray0, floatArray27);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray5);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray5);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray31, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray70);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equals(doubleArray59, doubleArray70);
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray50, doubleArray70);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray70, 0);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray85);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.scale(1366.9312345542478d, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray88);
        double[] doubleArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double92 = org.apache.commons.math3.util.MathArrays.distance(doubleArray90, doubleArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[9.0, 9.0, 90.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[12302.38111098823, 12302.38111098823, 123023.8111098823]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[9.0, 9.0, 90.0]");
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray44);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (short) 0);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray56 = new int[] {};
        int[] intArray61 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray56, intArray61);
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray61, (int) (short) 1);
        int[] intArray65 = new int[] {};
        int[] intArray70 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int71 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray65, intArray70);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70, (int) (short) 1);
        int int74 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray73);
        int[] intArray75 = new int[] {};
        int[] intArray80 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int81 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray75, intArray80);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(intArray73, intArray80);
        double double83 = org.apache.commons.math3.util.MathArrays.distance(intArray49, intArray73);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray40, (double) 100L);
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.scale(1.2423244926866538E15d, doubleArray64);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray71);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray86);
        double double89 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.scale((-2.3289362392541196E50d), doubleArray71);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray71, 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray64, doubleArray92);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 3 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 439.780879782446d + "'", double65 == 439.780879782446d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-3.726973478059961E17, 8.2821632845776928E16, 4.1410816422888454E17]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 14.866068747318506d + "'", double89 == 14.866068747318506d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-2.3289362392541196E50, -2.3289362392541196E50, -2.3289362392541197E51]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[]");
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray5);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray28);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        double double42 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray28, doubleArray40);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray40, orderDirection43, true);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray83);
        double[] doubleArray90 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray86, doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray90);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray5, doubleArray40);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (byte) 100, doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2111.0d + "'", double42 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1427.5857242211412d + "'", double92 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-900.0, 200.0, 1000.0]");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, 0);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 100);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray60);
        double double62 = org.apache.commons.math3.util.MathArrays.distance(intArray39, intArray60);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39);
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39, 10);
        double double66 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, 0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 1L, 61.66666666666667d, 1.4574354727153006E8d, (-1.629021819880944E76d), 4.987623771057232E31d, 6181.097447311743d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2.374194186121723E84d) + "'", double6 == (-2.374194186121723E84d));
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray42);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray42);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale(1360.1470508735442d, doubleArray42);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69);
        double[] doubleArray74 = new double[] { 1, 1, 10 };
        double[] doubleArray78 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray78);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray89);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(doubleArray78, doubleArray89);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray89);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray89, (double) (byte) 1);
        double double95 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray94);
        double[][] doubleArray96 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray94, doubleArray96);
        boolean boolean98 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray94);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-12241.323457861898, 2720.2941017470885, 13601.470508735441]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-12241.323457861898, 2720.2941017470885, 13601.470508735441]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 4.533823502911814d + "'", double95 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (short) 10);
        int[] intArray12 = new int[] {};
        int[] intArray17 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray12, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (short) 1);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int int30 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray29);
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20, 0);
        int[] intArray33 = new int[] {};
        int[] intArray38 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray33, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, (int) (short) 1);
        int[] intArray42 = new int[] {};
        int[] intArray47 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray42, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (short) 1);
        int int51 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray41, intArray50);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray69);
        int int71 = org.apache.commons.math3.util.MathArrays.distance1(intArray50, intArray69);
        int[] intArray72 = new int[] {};
        int[] intArray77 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int78 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray77);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77, (int) (short) 1);
        int int81 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray77);
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray32, intArray77);
        int[] intArray83 = new int[] {};
        int[] intArray88 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int89 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray83, intArray88);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88, (int) (short) 1);
        int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88);
        int int93 = org.apache.commons.math3.util.MathArrays.distance1(intArray77, intArray92);
        int[] intArray95 = org.apache.commons.math3.util.MathArrays.copyOf(intArray92, (int) (byte) 100);
        int int96 = org.apache.commons.math3.util.MathArrays.distance1(intArray9, intArray95);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) '#');
        int[] intArray30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int31 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        double double42 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray29);
        int[] intArray43 = new int[] {};
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray43, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 1);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int int61 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray60);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray51, (int) (short) 100);
        int[] intArray64 = new int[] {};
        int[] intArray69 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 1);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78, (int) (short) 1);
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray81);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) 100);
        double double85 = org.apache.commons.math3.util.MathArrays.distance(intArray51, intArray72);
        int int86 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray51);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (byte) 100);
        int[] intArray90 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88, (int) (byte) 100);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray90);
        int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray91);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28, (int) ' ');
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100, 100, 35]");
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(2010.0d, 111.0d, (-1.2170120134952047E22d), (double) (short) 10);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.2170120134952046E23d) + "'", double4 == (-1.2170120134952046E23d));
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(7.22460913395122E72d, 144652.08102413287d, (-1.2114525348282043E21d), (-1.2109722130566485E21d), 4.0273832394686912E16d, (-183792.33961872238d), (-8.209137999113313E130d), 2.3726213090057078E14d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.9477175745264727E145d) + "'", double8 == (-1.9477175745264727E145d));
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        long[] longArray4 = new long[] { (byte) -1, (short) 0, 10, (byte) 10 };
        long[] longArray9 = new long[] { (byte) -1, (short) 0, 10, (byte) 10 };
        long[] longArray14 = new long[] { (byte) -1, (short) 0, 10, (byte) 10 };
        long[][] longArray15 = new long[][] { longArray4, longArray9, longArray14 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: -1 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(longArray15);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (double) 100L);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray41);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray9, doubleArray41);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9, 10);
        java.lang.Class<?> wildcardClass70 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray0, 3600.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1.5185608816622775E7d, (-1.3838648976946252E105d), (double) (byte) 100, (-4.0443212939554954E20d), 1849908.0027625682d, (-1.2970519691988204E43d), 2111.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-2.1014830991446272E112d) + "'", double8 == (-2.1014830991446272E112d));
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray15, orderDirection16, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection19 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray15, orderDirection19, false);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray3, orderDirection19, true);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray28);
        double[] doubleArray39 = new double[] { 1, 1, 10 };
        double[] doubleArray43 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray43);
        double double45 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray35, doubleArray39);
        double double46 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray3, doubleArray39);
        double double47 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray39);
        double[] doubleArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray39, doubleArray48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + orderDirection19 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection19.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1020.0d + "'", double45 == 1020.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.099504938362077d + "'", double47 == 10.099504938362077d);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray18, orderDirection39, true);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) (byte) 0);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray60);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray62, doubleArray81);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray9, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray0, doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-300.0, 66.66666666666667, 333.3333333333333]");
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((-2165.0d), doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-2165.0, -2165.0, -21650.0]");
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray71);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray71);
        double double75 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray30, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(13.601470508735444d, doubleArray30);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray10, doubleArray30);
        double double78 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray30);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (-2.667039156913762E7d));
        double double81 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray30);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, 1427.5857242211412d);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray83, 100);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-12241.3234578619, 2720.294101747089, 13601.470508735443]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-12241.3234578619, 2720.294101747089, 136014.70508735444]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 18500.0d + "'", double78 == 18500.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[8.001117470741287E7, -1.778026104609175E7, -8.890130523045874E7]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 18500.0d + "'", double81 == 18500.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-4282.757172663423, 951.7238161474276, 4758.619080737138]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-4282.757172663423, 951.7238161474276, 4758.619080737138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray5);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray5);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection23 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray22, orderDirection23, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean28 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray22, orderDirection26, false);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray15, orderDirection26, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray15, orderDirection31, false);
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray12, orderDirection31, false, false);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection47 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray46, orderDirection47, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray46, orderDirection50, false);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray39, orderDirection50, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection55 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray39, orderDirection55, false);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray12, orderDirection55, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray0, orderDirection55, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + orderDirection23 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection23.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + orderDirection47 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection47.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + orderDirection55 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection55.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection27, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection30, false);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray14, orderDirection30, true);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray14);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray40);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray40);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray10, doubleArray40);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray58);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray76, orderDirection77, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection80 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray76, orderDirection80, false);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray64, orderDirection80, true);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (110 >= -11)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + orderDirection77 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection77.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + orderDirection80 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection80.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[110.0, -11.0, 100.0, -10.0, 0.0]");
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        double[] doubleArray7 = new double[] { 1, 1, 10 };
        double[] doubleArray11 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray11);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(doubleArray20, doubleArray31);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray20);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray62);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equals(doubleArray51, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray51);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray20, doubleArray51);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray51, 144652.08102413287d);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray77);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79, (int) (byte) 0);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray79);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray79);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection84 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray83, orderDirection84, false);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-5.691405330860345E15d), doubleArray83);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1020.0d, doubleArray83);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray89);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (-0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 20.09975124224178d + "'", double82 == 20.09975124224178d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-5.805233437477551E19, 5.8052334374775521E18, -0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection84 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection84.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-0.0, 0.0, -0.0]");
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double double53 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray81);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray70);
        double double85 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray18, doubleArray62);
        double double86 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2068.0d + "'", double53 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 990.0d + "'", double85 == 990.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1360.1470508735442d + "'", double86 == 1360.1470508735442d);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        double double42 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray29);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) ' ');
        int[] intArray45 = new int[] {};
        int[] intArray50 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int51 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray45, intArray50);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray69);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray60);
        int[] intArray72 = new int[] {};
        int[] intArray77 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int78 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray77);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77, (int) (short) 10);
        int int81 = org.apache.commons.math3.util.MathArrays.distance1(intArray60, intArray77);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(intArray45, intArray60);
        int[] intArray83 = new int[] {};
        int[] intArray88 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int89 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray83, intArray88);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88, (int) (short) 1);
        double double92 = org.apache.commons.math3.util.MathArrays.distance(intArray60, intArray91);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = org.apache.commons.math3.util.MathArrays.distance1(intArray44, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray71);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray71);
        double double75 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray30, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(13.601470508735444d, doubleArray30);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray10, doubleArray30);
        double double78 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray30);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (-2.667039156913762E7d));
        double double81 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray30);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, 1427.5857242211412d);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (-2.615914305086962E12d));
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray85, (int) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-12241.3234578619, 2720.294101747089, 13601.470508735443]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-12241.3234578619, 2720.294101747089, 136014.70508735444]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 18500.0d + "'", double78 == 18500.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[8.001117470741287E7, -1.778026104609175E7, -8.890130523045874E7]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 18500.0d + "'", double81 == 18500.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-4282.757172663423, 951.7238161474276, 4758.619080737138]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[7.847742915260886E12, -1.7439428700579746E12, -8.719714350289873E12]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[7.847742915260886E12]");
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(2.014842271203998E7d, (-101.0d), 3.811678112579062E9d, 2.4215696632833603E43d, 929377.4372207435d, 1.4951800047059846E8d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 9.230244083622633E52d + "'", double6 == 9.230244083622633E52d);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray19);
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.9875501E7d), doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.9875501E7, -1.9875501E7, -1.9875501E8]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 14.866068747318506d + "'", double22 == 14.866068747318506d);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        double double61 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray47, doubleArray59);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection69 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray68, orderDirection69, false);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray47, orderDirection69, true, false);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47, (int) (short) 10);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray28, doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray76);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2111.0d + "'", double61 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + orderDirection69 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection69.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int int35 = org.apache.commons.math3.util.MathArrays.distance1(intArray21, intArray33);
        int int36 = org.apache.commons.math3.util.MathArrays.distance1(intArray20, intArray21);
        int[] intArray37 = null;
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray21, intArray37);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(2.6740627672928667E44d, (-2.554111747075503E77d), (-1.8381134056869864E7d), 3600.0d, 0.0d, (-1.9026475961075138E99d), (double) (short) -1, (-5.691405330849884E16d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-6.829855126359939E121d) + "'", double8 == (-6.829855126359939E121d));
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray8 = new int[] {};
        int[] intArray13 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int14 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray13);
        int int15 = org.apache.commons.math3.util.MathArrays.distance1(intArray1, intArray13);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray1, 0);
        int[] intArray18 = new int[] {};
        int[] intArray23 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray23);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (short) 1);
        int[] intArray27 = new int[] {};
        int[] intArray32 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int33 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray32);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32, (int) (short) 1);
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray26, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, 0);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int[] intArray48 = new int[] {};
        int[] intArray53 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int54 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray53);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (short) 1);
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (short) 100);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray59);
        double double61 = org.apache.commons.math3.util.MathArrays.distance(intArray38, intArray59);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38);
        int int63 = org.apache.commons.math3.util.MathArrays.distance1(intArray1, intArray62);
        int[] intArray65 = new int[] { 10 };
        double double66 = org.apache.commons.math3.util.MathArrays.distance(intArray1, intArray65);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray18);
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray20);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, (int) (short) 100);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray23, 9319.084308623767d);
        double[] doubleArray29 = new double[] { 1, 1, 10 };
        double[] doubleArray33 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray33);
        double[] doubleArray39 = new double[] { 1, 1, 10 };
        double[] doubleArray43 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray43);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray44);
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equals(doubleArray33, doubleArray44);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray63);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray63);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray63);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray76);
        double double79 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray67, doubleArray76);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray67, 1.2459825039216539E7d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray67);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 100 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 14.866068747318506d + "'", double21 == 14.866068747318506d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-10.0, 1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10354.538120693074, -1035.4538120693076, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.3844250043573933E7, -1384425.0043573931, 0.0]");
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        double[] doubleArray0 = null;
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray30, doubleArray49);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray30, orderDirection51, true);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray6, orderDirection51, false, false);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray6);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray64);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray57, doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double double72 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray0, doubleArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.2584423289608705E9, -1.2584423289608705E9, -1.2584423289608704E10]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-Infinity, -Infinity, -Infinity]");
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray47);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(doubleArray36, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray36);
        double double51 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-12.601470508735444d), doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[113.413234578619, -25.202941017470888, -126.01470508735444]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 21.0d + "'", double51 == 21.0d);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray38, doubleArray58);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray74 = new double[] { 1, 1, 10 };
        double[] doubleArray78 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray78);
        double[] doubleArray85 = new double[] { 1, 1, 10 };
        double[] doubleArray89 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray85, doubleArray89);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray78, doubleArray90);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection93 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray90, orderDirection93, true);
        double[][] doubleArray96 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray38, orderDirection93, doubleArray96);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, doubleArray96);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2111.0d + "'", double92 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection93 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection93.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(doubleArray96);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray9, orderDirection10, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray9, orderDirection13, false);
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection13, true);
        double[] doubleArray21 = new double[] { 1, 1, 10 };
        double[] doubleArray25 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray25);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection34 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray33, orderDirection34, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray33, orderDirection37, false);
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray21, orderDirection37, true);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection37, false);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + orderDirection34 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection34.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, 100);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21);
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) 'a');
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (short) 1, (-1.2970519691988204E43d), 3.0341344585090943E22d, 5.040419286078566E224d, 2.6817058196121406E33d, 1.5460450237574003E9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.5293309841224786E247d + "'", double6 == 1.5293309841224786E247d);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray46);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray46);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray41, doubleArray46);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray59);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray59);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double double76 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray66, doubleArray70);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 21.0d + "'", double54 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1020.0d + "'", double76 == 1020.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray66);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(doubleArray55, doubleArray66);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray55);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (double) 100L);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray37, doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-0.0, 0.0, 0.0]");
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(9.230244083622633E52d, 1.2423244926866538E15d, 2.620301998137665E92d, (-2.0559464345526106E59d), (double) (byte) 10, 2.4397658821053278E76d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5.387200550522214E151d) + "'", double6 == (-5.387200550522214E151d));
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray6);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale(111.0d, doubleArray6);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.552472386491933E14d), doubleArray13);
        double[] doubleArray18 = new double[] { 1, 1, 10 };
        double[] doubleArray22 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray22);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray31);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray43);
        double double45 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray31, doubleArray43);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray52, orderDirection53, false);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray31, orderDirection53, true, false);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray31, (int) (short) 10);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray31);
        double double62 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray61);
        double double63 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray13, doubleArray61);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray67);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray74, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray76);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 3 != 100");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2111.0d + "'", double45 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection53.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.04987562112089d + "'", double62 == 10.04987562112089d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray9);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray38, orderDirection39, false);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray17, orderDirection39, true, false);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray17, (int) (short) 10);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.scale((-1.5183866289549949E7d), doubleArray17);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray75);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equals(doubleArray64, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray64);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray56, (double) 100L);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray56);
        double[] doubleArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray81, doubleArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.518386628954995E8, 1.5183866289549949E7, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.518386538954995E8, 1.5183864289549949E7, -10.0]");
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.1075291104741401E38d), doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-7.217129340870217E24d), 3.811678112579062E9d, 2.8885398876251348E35d, (-2.665302576915262E10d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-7.698832806037301E45d) + "'", double4 == (-7.698832806037301E45d));
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray61);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray64);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) 'a');
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray75, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray19, doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (900 >= -200)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-810000.0, -40000.0, -1000000.0]");
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-273300.0d), 7.046471115983133E63d, 75611.0d, (-1.3755656043295059E12d), 2720.2941017470885d, 48013.29967155091d, (-92.0d), (double) ' ');
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.92580055599819E69d) + "'", double8 == (-1.92580055599819E69d));
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (double) 100L);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray41);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray9, doubleArray41);
        double double68 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 22457.292802116644d + "'", double68 == 22457.292802116644d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        java.lang.Class<?> wildcardClass43 = longArray35.getClass();
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray20 = new int[] {};
        int[] intArray25 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray25);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, (int) (short) 10);
        int int29 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray25);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, 0);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        int int58 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray56);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = org.apache.commons.math3.util.MathArrays.distance(intArray25, intArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray48);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection50, true);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray5, orderDirection50, false, false);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray5);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray56);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray63);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray56, doubleArray63);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray56, orderDirection71, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.2584423289608705E9, -1.2584423289608705E9, -1.2584423289608704E10]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-Infinity, -Infinity, -Infinity]");
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray57);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray65);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray65);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray71, 0);
        int[] intArray75 = org.apache.commons.math3.util.MathArrays.copyOf(intArray71, (int) (byte) 1);
        int[] intArray77 = org.apache.commons.math3.util.MathArrays.copyOf(intArray71, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        double double32 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray30);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection40 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray39, orderDirection40, false);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18, orderDirection40, true, false);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) (short) 10);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale((-1.5183866289549949E7d), doubleArray18);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray76);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equals(doubleArray65, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray65);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray57, (double) 100L);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-12.601470508735444d), doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (1,913,390,432.563 >= -191,339,043.256)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2111.0d + "'", double32 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + orderDirection40 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection40.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.9133904325634596E9, -1.9133904325634596E8, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.518386538954995E8, 1.5183864289549949E7, -10.0]");
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1.0736316432238322E99d, (-2.7326318893828427E20d), 1.7246705822717612E15d, 6.534471319905731E69d, 1360.1470508735442d, (-6.362785300226671E114d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-3.020383302338395E119d) + "'", double6 == (-3.020383302338395E119d));
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) '#');
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (byte) 10);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, 235);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        long[] longArray1 = new long[] { 'a' };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray1);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray1);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray1);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray1);
        java.lang.Class<?> wildcardClass6 = longArray1.getClass();
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[97]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38, (int) (byte) 100);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection68 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray67, orderDirection68, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection71 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray67, orderDirection71, false);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray55, orderDirection71, true);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray81);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray81);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray81);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray51, doubleArray81);
        double double91 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray51);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double double93 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray40);
        double double94 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + orderDirection68 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection68.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + orderDirection71 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection71.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.04987562112089d + "'", double91 == 10.04987562112089d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray70);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray70);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray70);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray10, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.scale((-2.6653694205680016E13d), doubleArray75);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2010.0d, doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-0.9, -2.0, Infinity]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[4.8216532818075152E16, 1.07147850706833664E17, -Infinity]");
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray42, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray81);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray81);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray61, doubleArray81);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray81, 0);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray81);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) '#');
        double[] doubleArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double92 = org.apache.commons.math3.util.MathArrays.distance(doubleArray90, doubleArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray72);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(doubleArray61, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray61);
        double double76 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray41, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray20, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale((-2.3726249250325616E14d), doubleArray20);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2068.0d + "'", double76 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-919.0, 203.0, 1010.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[2.13536243252930528E17, -4.7452498500651232E16, -2.3726249250325616E17]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray42, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray81);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray81);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray61, doubleArray81);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray81, 0);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray81);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, 116405.9998500075d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-349217.9995500225, 77603.999900005, 388019.999500025]");
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        float[] floatArray3 = new float[] { (short) 10, (byte) 100, 1L };
        float[] floatArray6 = new float[] { (-1.0f), 100.0f };
        float[] floatArray9 = new float[] { (-1L), (byte) 10 };
        float[] floatArray13 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray9, floatArray13);
        float[] floatArray17 = new float[] { (short) 1, (-1L) };
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray13, floatArray17);
        float[] floatArray21 = new float[] { (-1L), (byte) 10 };
        float[] floatArray25 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray21, floatArray25);
        float[] floatArray27 = null;
        boolean boolean28 = org.apache.commons.math3.util.MathArrays.equals(floatArray21, floatArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(floatArray13, floatArray21);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(floatArray6, floatArray21);
        float[] floatArray33 = new float[] { (-1L), (byte) 10 };
        float[] floatArray37 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray33, floatArray37);
        float[] floatArray41 = new float[] { (short) 1, (-1L) };
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray37, floatArray41);
        float[] floatArray45 = new float[] { (-1L), (byte) 10 };
        float[] floatArray49 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray45, floatArray49);
        float[] floatArray51 = null;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(floatArray45, floatArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(floatArray37, floatArray45);
        float[] floatArray56 = new float[] { (-1L), (byte) 10 };
        float[] floatArray60 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray56, floatArray60);
        float[] floatArray62 = null;
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(floatArray56, floatArray62);
        float[] floatArray66 = new float[] { (-1L), (byte) 10 };
        float[] floatArray70 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray66, floatArray70);
        float[] floatArray74 = new float[] { (short) 1, (-1L) };
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray70, floatArray74);
        float[] floatArray78 = new float[] { (-1L), (byte) 10 };
        float[] floatArray82 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray78, floatArray82);
        float[] floatArray84 = null;
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(floatArray78, floatArray84);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(floatArray70, floatArray78);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(floatArray56, floatArray70);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(floatArray37, floatArray56);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(floatArray6, floatArray37);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray37);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray82), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-6.469188686213299E42d), (-1.0d), 3.401775050104543E33d, (-79.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 6.46918841747307E42d + "'", double4 == 6.46918841747307E42d);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray68, doubleArray87);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray68, orderDirection89, true);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray44, orderDirection89, false, false);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray44);
        double double96 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray38, doubleArray44);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.scale((-183792.33961872238d), doubleArray44);
        double double98 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray44);
        double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 12.0d + "'", double96 == 12.0d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-183792.33961872238, -183792.33961872238, -1837923.396187224]");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 10.099504938362077d + "'", double98 == 10.099504938362077d);
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[1.0, 1.0, 10.0]");
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray17, doubleArray48);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray48, doubleArray73);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray73);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray73, orderDirection77, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection77, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-890.0, 199.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + orderDirection77 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection77.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray18, doubleArray49);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray49, 144652.08102413287d);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray75);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77, (int) (byte) 0);
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray49, doubleArray77);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray77);
        double double82 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 20.09975124224178d + "'", double80 == 20.09975124224178d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 10.04987562112089d + "'", double82 == 10.04987562112089d);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray36 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int37 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, 0);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48);
        int int63 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray62);
        int[] intArray64 = new int[] {};
        int[] intArray69 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 1);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78, (int) (short) 1);
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray81);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray81);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray81, 100);
        int[] intArray86 = org.apache.commons.math3.util.MathArrays.copyOf(intArray85);
        double double87 = org.apache.commons.math3.util.MathArrays.distance(intArray39, intArray86);
        int[] intArray88 = new int[] {};
        int[] intArray93 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int94 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray88, intArray93);
        int[] intArray96 = org.apache.commons.math3.util.MathArrays.copyOf(intArray93, (int) (short) 1);
        int[] intArray97 = org.apache.commons.math3.util.MathArrays.copyOf(intArray96);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = org.apache.commons.math3.util.MathArrays.distance(intArray86, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 98 + "'", int37 == 98);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 98 + "'", int38 == 98);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1]");
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray42, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray81);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray81);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray61, doubleArray81);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray81, 0);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray81);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 2 and 3 are not strictly increasing (1,000 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        double double32 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray30);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray30, orderDirection33, true);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.scale(1366.9312345542478d, doubleArray30);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray0, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2111.0d + "'", double32 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1230238.111098823, 273386.2469108496, 1366931.2345542477]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1230238.111098823, 273386.2469108496, 1366931.2345542477]");
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.scale(116405.9998500075d, doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0476539986500674E8, 2.32811999700015E7, 1.164059998500075E8]");
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection27, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection30, false);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray14, orderDirection30, true);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray14);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray40);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray40);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray10, doubleArray40);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray58);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray76, orderDirection77, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection80 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray76, orderDirection80, false);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray64, orderDirection80, true);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -11 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + orderDirection77 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection77.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + orderDirection80 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection80.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[110.0, -11.0, 100.0, -10.0, 0.0]");
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.2157512288535557E51d), 1.3341985624134572E32d, 1.7246705822717612E15d, 5.525048868831705E39d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.622053541788808E83d) + "'", double4 == (-1.622053541788808E83d));
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray67);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray69, doubleArray88);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection90 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection90, true);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray45, orderDirection90, false, false);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray45);
        double double97 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray39, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.0d), doubleArray45);
        double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.scale(3.041454381069284E101d, doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, -1.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection90 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection90.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 12.0d + "'", double97 == 12.0d);
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[-3.041454381069284E101, -3.041454381069284E101, -3.041454381069284E102]");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray48);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection50, true);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray5, orderDirection50, false, false);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray5);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray56, (-1.9875501E7d));
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.1461596173157833E27d, doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.898374718343289E33, -1.898374718343289E33, -1.898374718343289E34]");
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray65);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray67, doubleArray86);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray67, orderDirection88, true);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray43, orderDirection88, false, false);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray43);
        double double95 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray37, doubleArray43);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        double double97 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection88 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection88.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 12.0d + "'", double95 == 12.0d);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray50);
        double double53 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray41, doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-2.09703636636056E201d), (-1.02040068542142E52d), (-2.3050398777241942E83d), 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.1398173455879595E253d + "'", double4 == 2.1398173455879595E253d);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray4);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray21, orderDirection22, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray21, orderDirection25, false);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray14, orderDirection25, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray14, orderDirection30, false);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray11, orderDirection30, false, false);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray11, (-6.469188686213299E42d));
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= 10)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-5.3909905718444154E41, -5.3909905718444154E41, -5.390990571844416E42]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 10.0, 100.0]");
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        float[] floatArray0 = null;
        float[] floatArray3 = new float[] { (-1L), (byte) 10 };
        float[] floatArray7 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean8 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray7);
        float[] floatArray9 = null;
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray9);
        float[] floatArray13 = new float[] { (-1L), (byte) 10 };
        float[] floatArray17 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray13, floatArray17);
        float[] floatArray21 = new float[] { (short) 1, (-1L) };
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray17, floatArray21);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray17);
        float[] floatArray26 = new float[] { (-1L), (byte) 10 };
        float[] floatArray30 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray26, floatArray30);
        float[] floatArray34 = new float[] { (short) 1, (-1L) };
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray30, floatArray34);
        float[] floatArray38 = new float[] { (-1L), (byte) 10 };
        float[] floatArray42 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray38, floatArray42);
        float[] floatArray46 = new float[] { (short) 1, (-1L) };
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray42, floatArray46);
        float[] floatArray50 = new float[] { (-1L), (byte) 10 };
        float[] floatArray54 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray50, floatArray54);
        float[] floatArray58 = new float[] { (short) 1, (-1L) };
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray54, floatArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(floatArray46, floatArray58);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(floatArray30, floatArray58);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray17, floatArray30);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(floatArray0, floatArray30);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(2.0652291407971942E8d, 1.3971118681998659E37d, (-92.0d), (-5.387200550522214E151d), (-3.2949139463354136E89d), 21009.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 4.9562245064804365E153d + "'", double6 == 4.9562245064804365E153d);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray4);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, 100.0]");
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        double[] doubleArray0 = null;
        double[] doubleArray7 = new double[] { 1, 1, 10 };
        double[] doubleArray11 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray11);
        double[] doubleArray17 = new double[] { 1, 1, 10 };
        double[] doubleArray21 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray22);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(doubleArray11, doubleArray22);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray22);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22, 100);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-7.6769830141116774E18d), doubleArray28);
        double[] doubleArray32 = null;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray28, doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray0, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-6.90928471270051E21, 1.5353966028223354E21, 7.676983014111678E21, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray21, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray40, doubleArray60);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray60, 0);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray75);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equals(doubleArray60, doubleArray75);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2.667039156913762E7d, doubleArray75);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.scale(1.4951800047059846E8d, doubleArray75);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(4.451729603812351E60d, doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[2.667039156913762E7, 2.667039156913762E7, 2.667039156913762E8]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.7752178252757138E76, 1.7752178252757138E76, 1.775217825275714E77]");
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(3.2276883093128493E34d, 3.9069241870675704E35d, (-2.666466636913762E8d), 8.583023989821415E99d, (-5.055478783810143E21d), 7.021059879986961E21d, (double) 0, (-4.0443212939554954E20d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-2.2886347112689247E108d) + "'", double8 == (-2.2886347112689247E108d));
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray47);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(doubleArray36, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray36);
        double double51 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray28);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale(4.149720547924001E12d, doubleArray19);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection60 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray59, orderDirection60, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection63 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray59, orderDirection63, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray59, orderDirection66, false);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray19, orderDirection66, false);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 21.0d + "'", double51 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + orderDirection60 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection60.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + orderDirection63 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection63.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.2157512288535557E51d), 4.987623771057232E31d, 820404.8465375019d, (-4.135659354056735E69d), (double) 'a', (-1.1075291104741401E38d), 3.0341344585090943E22d, (-7.217129340870217E24d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-6.0637100680135326E82d) + "'", double8 == (-6.0637100680135326E82d));
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray10);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection29 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray28, orderDirection29, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray28, orderDirection32, false);
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray16, orderDirection32, true);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray37, 2111.0d);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray43);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49);
        double[] doubleArray51 = null;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray49, doubleArray51);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray39, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.2109722143828504E23d), doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(9.226011509507019E11d, doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection29.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1105.7619047619048, -0.0, 1005.2380952380952]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.117244358758938E35, -1.117244358758938E35, -1.117244358758938E36]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1106.7619047619048, 1.0, 1015.2380952380952]");
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray39);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection62 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray61, orderDirection62, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection65 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray61, orderDirection65, false);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray49, orderDirection65, true);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray45, orderDirection65, false);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "hi!" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection75 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray74, orderDirection75, false);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray45, orderDirection75, false);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray39, orderDirection75, false, false);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.scale((-5.2221633920904585E36d), doubleArray39);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray84, (int) '4');
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-5.691405330860345E15d), doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + orderDirection62 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection62.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + orderDirection65 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection65.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + orderDirection75 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection75.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray45);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray28, doubleArray47);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray67);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(doubleArray56, doubleArray67);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray47, doubleArray67);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray67, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(88.21557489650559d, doubleArray67);
        double double74 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray3, doubleArray67);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-79394.01740685503, 17643.114979301117, 88215.57489650558]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 820404.8465375019d + "'", double74 == 820404.8465375019d);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, 0);
        int[] intArray17 = null;
        int int18 = org.apache.commons.math3.util.MathArrays.distance1(intArray16, intArray17);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray12, 0);
        double[] doubleArray19 = new double[] { 1, 1, 10 };
        double[] doubleArray23 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray23);
        double[] doubleArray29 = new double[] { 1, 1, 10 };
        double[] doubleArray33 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray33);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray34);
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equals(doubleArray23, doubleArray34);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray34);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray65);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(doubleArray54, doubleArray65);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray54);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray46, (double) 100L);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray46);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray34, doubleArray79);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-2165.0d), doubleArray79);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray14, doubleArray79);
        java.lang.Class<?> wildcardClass84 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-21650.0, 2165.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray11);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(doubleArray20, doubleArray31);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray31);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray62);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equals(doubleArray51, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray51);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray43, (double) 100L);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray43);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray11, doubleArray43);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray11, doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(21009.0d, doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.0570558719722057E74d), doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-2.220768681426407E78, -2.220768681426407E78, -2.220768681426407E79]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray44);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44);
        int[] intArray50 = new int[] {};
        int[] intArray55 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray55);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray55, (int) (short) 1);
        int[] intArray59 = new int[] {};
        int[] intArray64 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray59, intArray64);
        int[] intArray67 = org.apache.commons.math3.util.MathArrays.copyOf(intArray64, (int) (short) 1);
        int int68 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray67);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (short) 100);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70, 1);
        double double74 = org.apache.commons.math3.util.MathArrays.distance(intArray49, intArray70);
        int[] intArray75 = new int[] {};
        int[] intArray80 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int81 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray75, intArray80);
        int[] intArray82 = new int[] {};
        int[] intArray87 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int88 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray82, intArray87);
        int int89 = org.apache.commons.math3.util.MathArrays.distance1(intArray75, intArray87);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray75, 0);
        int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = org.apache.commons.math3.util.MathArrays.distance(intArray49, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 145.68802284333466d + "'", double74 == 145.68802284333466d);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray22 = new int[] {};
        int[] intArray27 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray22, intArray27);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (short) 10);
        int int31 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray27);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray44);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) 'a');
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray69);
        int[] intArray71 = new int[] {};
        int[] intArray76 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray71, intArray76);
        double double78 = org.apache.commons.math3.util.MathArrays.distance(intArray69, intArray76);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76);
        int int81 = org.apache.commons.math3.util.MathArrays.distance1(intArray49, intArray76);
        int[] intArray82 = new int[] {};
        int[] intArray87 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int88 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray82, intArray87);
        int[] intArray90 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87, (int) (short) 1);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87);
        int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87);
        double double93 = org.apache.commons.math3.util.MathArrays.distance(intArray49, intArray87);
        int[] intArray94 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87);
        int[] intArray95 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 100, 100, 35]");
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-92.0d), 2.158964713104729E10d, 1.0d, (-4.149720547934001E12d), 0.0d, (-2.4788709196896968E29d), 7.834007748456647E64d, (double) '#');
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.7419027119598262E66d + "'", double8 == 2.7419027119598262E66d);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray8, (double) 100L);
        double[][] doubleArray33 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray32, doubleArray33);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray51);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray53, (int) ' ');
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(doubleArray32, doubleArray53);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray75);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equals(doubleArray64, doubleArray75);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray75);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray75, (double) (byte) 1);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray75, (int) (short) 0);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray32, doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray41);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray83);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray41, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.scale((-2.613107296291178E10d), doubleArray86);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray89, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[2.3779276396249723E13, -5.252345665545268E12, -2.613107296291178E13]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray30, doubleArray49);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray30, orderDirection51, true);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray6, orderDirection51, false, false);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray6);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray64);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray57, doubleArray64);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray71);
        double[] doubleArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.2584423289608705E9, -1.2584423289608705E9, -1.2584423289608704E10]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-Infinity, -Infinity, -Infinity]");
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 235, (-1.2114525348282043E21d), 0.0d, (double) 100.0f);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-2.8469134568462802E23d) + "'", double4 == (-2.8469134568462802E23d));
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, 144652.08102413287d);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray73);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray75, (int) (byte) 0);
        double double78 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray75);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (-79.0d));
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray82);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 20.09975124224178d + "'", double78 == 20.09975124224178d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-87.77777777777777, 8.777777777777779, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        double double31 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.04987562112089d + "'", double31 == 10.04987562112089d);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray5);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray5);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(doubleArray20, doubleArray31);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray31);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) (byte) 1);
        double double37 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray36, doubleArray38);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray12, doubleArray38);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray45);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray45);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray71);
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equals(doubleArray60, doubleArray71);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray71);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray71, (double) (byte) 1);
        double double77 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray76);
        double[][] doubleArray78 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray76, doubleArray78);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray52, doubleArray78);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray52);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.scale((-5.818854497478488E40d), doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4.533823502911814d + "'", double37 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 4.533823502911814d + "'", double77 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-5.8188544974784885E41, -5.8188544974784885E41, -5.818854497478489E42]");
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(3600.0d, (-7.217129340870217E24d), 2010.0d, (-2.5043938381010786E8d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-2.598166562713278E28d) + "'", double4 == (-2.598166562713278E28d));
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray48);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection50, true);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray5, orderDirection50, false, false);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray5);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray56);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray63);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray56, doubleArray63);
        double[] doubleArray74 = new double[] { 1, 1, 10 };
        double[] doubleArray78 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray78);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray89);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(doubleArray78, doubleArray89);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray89);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray89, (double) (byte) 1);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray89, (int) (short) 0);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray89);
        double[] doubleArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray97, doubleArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.2584423289608705E9, -1.2584423289608705E9, -1.2584423289608704E10]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-Infinity, -Infinity, -Infinity]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-1.2584414289608705E9, -1.2584425289608705E9, -1.2584424289608704E10]");
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray60);
        double double64 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(13.601470508735444d, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        java.lang.Class<?> wildcardClass67 = doubleArray19.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-12241.3234578619, 2720.294101747089, 13601.470508735443]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(18500.0d, 1.5460450237574003E9d, (double) 100L, 0.0d, (-2.3050398777241942E83d), 2.1398173455879595E253d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.NEGATIVE_INFINITY + "'", double6 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray16, orderDirection17, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection20 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray16, orderDirection20, false);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray4, orderDirection20, true);
        double[] doubleArray29 = new double[] { 1, 1, 10 };
        double[] doubleArray33 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray29);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray29);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray36, doubleArray40);
        double double47 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray4, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.9964918550255632E12d, doubleArray40);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray68);
        double[] doubleArray74 = new double[] { 1, 1, 10 };
        double[] doubleArray78 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray78);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray87);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray87);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(474492.3840484359d, doubleArray87);
        double double93 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray40, doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + orderDirection20 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection20.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.9964918550255632E12, 1.9964918550255632E12, 1.9964918550255633E13]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1020.0d + "'", double46 == 1020.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[4744923.840484359, -474492.3840484359, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 8.5258816202192742E18d + "'", double93 == 8.5258816202192742E18d);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray0, 48965.2938314476d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray38, doubleArray58);
        double[] doubleArray65 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[] doubleArray69 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[][] doubleArray70 = new double[][] { doubleArray65, doubleArray69 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray38, doubleArray70);
        double double72 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray38);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        double[] doubleArray85 = new double[] { 1, 1, 10 };
        double[] doubleArray89 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray85, doubleArray89);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray89);
        double double92 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray38, doubleArray91);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale(1000.0d, doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray83);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(doubleArray72, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray72);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray64, (double) 100L);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -9 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray4);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray11, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(101755.73525134209d, (-2.359922046250594E90d), (-1.372588062112734E26d), (-2.2886347112689247E108d), 7.22460913395122E72d, (double) (byte) 1, 3.0855098392300684E13d, 2.4215696632833603E43d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.1413526832245498E134d + "'", double8 == 3.1413526832245498E134d);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int[] intArray48 = new int[] {};
        int[] intArray53 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int54 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray53);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (short) 1);
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, 0);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray60, 1);
        int[] intArray63 = new int[] {};
        int[] intArray68 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray63, intArray68);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray68, (int) (short) 1);
        int[] intArray72 = new int[] {};
        int[] intArray77 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int78 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray77);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77, (int) (short) 1);
        int int81 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray71, intArray80);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80, (int) (byte) 10);
        int int84 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray80);
        double double85 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray60);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray40, (double) 100L);
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray64);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray64, orderDirection66, false, false);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.scale(21009.0d, doubleArray64);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray71, 2.0652291407971942E8d);
        double[] doubleArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray71, doubleArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 439.780879782446d + "'", double65 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-6302700.0, 1400600.0, 7003000.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-6.195687422391583E8, 1.3768194271981293E8, 6.884097135990648E8]");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.0d, 0.0d, 10000.499987500625d, 4.403214624117384E71d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4.4034347793448465E75d + "'", double4 == 4.4034347793448465E75d);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) '4');
        int[] intArray17 = new int[] {};
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray22);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 1);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22);
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray12, intArray27);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray57);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray65);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray65);
        int[] intArray71 = new int[] {};
        int[] intArray76 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray71, intArray76);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76, (int) (short) 1);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76);
        int int81 = org.apache.commons.math3.util.MathArrays.distance1(intArray65, intArray80);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80, (int) (byte) 100);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1]");
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.2170120134952047E22d), (-2.598166562713278E28d), 145.68802284333466d, 1346.545580364809d, 1366.9312345542478d, (-2.554111747075503E77d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-3.4912951236194243E80d) + "'", double6 == (-3.4912951236194243E80d));
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray5);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray5);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray12, 0.0d);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-5.691405330849884E16d), doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-0.0, -0.0, -0.0]");
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(48965.2938314476d, (-2.639260241354281E12d), (-1.1867527700951934E25d), (-1.552472386491933E14d), 1.4102824113935717E10d, (double) 1L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.8424009051655974E39d + "'", double6 == 1.8424009051655974E39d);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray19);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray66);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.scale(1.2423244926866538E15d, doubleArray66);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale(1000.0499987500625d, doubleArray68);
        double[] doubleArray74 = new double[] { 1, 1, 10 };
        double[] doubleArray78 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray74);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray74);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray68, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.scale(11.1665284679121d, doubleArray83);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray84, orderDirection85, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (0 <= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 439.780879782446d + "'", double67 == 439.780879782446d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-3.726973478059961E17, 8.2821632845776928E16, 4.1410816422888454E17]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-3.7271598220753804E20, 8.282577382389735E19, 4.1412886911948666E20]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray36 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int37 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, 0);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48);
        int int63 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray62);
        int[] intArray64 = new int[] {};
        int[] intArray69 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 1);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78, (int) (short) 1);
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray81);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray81);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray81, 100);
        int[] intArray86 = org.apache.commons.math3.util.MathArrays.copyOf(intArray85);
        double double87 = org.apache.commons.math3.util.MathArrays.distance(intArray39, intArray86);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 98 + "'", int37 == 98);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 98 + "'", int38 == 98);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1]");
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.3971118681998659E37d, 4.149720547924001E12d, 6.364464749353691E111d, 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 5.797623827217472E49d + "'", double4 == 5.797623827217472E49d);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (double) 100L);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray41);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray9, doubleArray41);
        double double68 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray67, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 22457.292802116644d + "'", double68 == 22457.292802116644d);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray58);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray74 = new double[] { 1, 1, 10 };
        double[] doubleArray78 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray78);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray89);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(doubleArray78, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray78);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray70, (double) 100L);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray70);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray28, doubleArray58);
        double double97 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray9, doubleArray28);
        double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.scale(2010.0d, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-3.5851885979534E128d), doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[-7.206229081886334E132, 7.206229081886335E131, -0.0]");
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray24);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray24);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray50);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray50, (double) (byte) 1);
        double double56 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray55);
        double[][] doubleArray57 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray55, doubleArray57);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray31, doubleArray57);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray8, doubleArray57);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection71 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray70, orderDirection71, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection74 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray70, orderDirection74, false);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray63, orderDirection74, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection79 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray63, orderDirection79, false);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray8, orderDirection79, false, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray0, orderDirection79, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 4.533823502911814d + "'", double56 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + orderDirection71 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection71.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + orderDirection74 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection74.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + orderDirection79 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection79.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.3399302268582524E25d), (double) 1L, 0.0d, 5.525048868831705E39d, 2.819888708394894E13d, (-1058.0d), (-1.3755656043295059E12d), (-1.6689060509564007E32d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.2956897605530104E44d + "'", double8 == 2.2956897605530104E44d);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        long[] longArray0 = new long[] {};
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray0);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray0);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray0);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray0);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray0);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray0);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray0 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] {};
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray58);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray70);
        double double72 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray58, doubleArray70);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection73 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray70, orderDirection73, true);
        double double76 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray38, doubleArray70);
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection84 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray83, orderDirection84, false);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray38, orderDirection84, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray0, orderDirection84, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(orderDirectionArray0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2111.0d + "'", double72 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection73 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection73.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-9200.0d) + "'", double76 == (-9200.0d));
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + orderDirection84 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection84.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 235, (-5.718703196015772E45d), 2.4415591134470963E30d, (-2.559673952118356E12d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.3439015006589716E48d) + "'", double4 == (-1.3439015006589716E48d));
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray37, orderDirection38, false);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16, orderDirection38, true, false);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, (int) (short) 10);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray45);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray56);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection75 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray74, orderDirection75, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection78 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray74, orderDirection78, false);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray62, orderDirection78, true);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray88 = new double[] { 1, 1, 10 };
        double[] doubleArray92 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray88, doubleArray92);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray88);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray88);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray88);
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray58, doubleArray88);
        double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.scale(1.7246705822717612E15d, doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray45, doubleArray98);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 10 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + orderDirection75 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection75.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + orderDirection78 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection78.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[-1.7246705822717612E16, 1.7246705822717612E15, -0.0]");
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int[] intArray18 = new int[] {};
        int[] intArray23 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray23);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (short) 1);
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, 0);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int int37 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray38);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray44);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) 'a');
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray69);
        int[] intArray71 = new int[] {};
        int[] intArray76 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray71, intArray76);
        double double78 = org.apache.commons.math3.util.MathArrays.distance(intArray69, intArray76);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76);
        int int81 = org.apache.commons.math3.util.MathArrays.distance1(intArray49, intArray76);
        int[] intArray82 = new int[] {};
        int[] intArray87 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int88 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray82, intArray87);
        int[] intArray90 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87, (int) (short) 1);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87);
        int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87);
        double double93 = org.apache.commons.math3.util.MathArrays.distance(intArray49, intArray87);
        int[] intArray95 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) 'a');
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) '#', (-2.0153985E7d), 3.401775050104543E33d, (-1.6689060509564007E32d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-5.677242965111985E65d) + "'", double4 == (-5.677242965111985E65d));
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray30, (int) '4');
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray41);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray43, (int) (byte) 0);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray73);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.equals(doubleArray62, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray62);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray54, (double) 100L);
        double[][] doubleArray79 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray78, doubleArray79);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray45, doubleArray79);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray30, doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray79);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        int[] intArray0 = new int[] {};
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 1);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray18);
        int[] intArray20 = new int[] {};
        int[] intArray25 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray25);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, (int) (short) 1);
        int[] intArray29 = new int[] {};
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 1);
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray37);
        int int39 = org.apache.commons.math3.util.MathArrays.distance1(intArray18, intArray37);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int[] intArray59 = new int[] {};
        int[] intArray64 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray59, intArray64);
        double double66 = org.apache.commons.math3.util.MathArrays.distance(intArray57, intArray64);
        int[] intArray67 = org.apache.commons.math3.util.MathArrays.copyOf(intArray64);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray64);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray68);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray68, (int) ' ');
        double double72 = org.apache.commons.math3.util.MathArrays.distance(intArray18, intArray68);
        double double73 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray18);
        int[] intArray75 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, 0);
        int[] intArray76 = new int[] {};
        int[] intArray81 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray76, intArray81);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray81, (int) (short) 1);
        int[] intArray91 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int92 = org.apache.commons.math3.util.MathArrays.distance1(intArray84, intArray91);
        int int93 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray91);
        int[] intArray94 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 98 + "'", int92 == 98);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray23 = new int[] {};
        int[] intArray28 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int29 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray23, intArray28);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28, (int) (short) 1);
        int[] intArray32 = new int[] {};
        int[] intArray37 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray32, intArray37);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (short) 1);
        int int41 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray31, intArray40);
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, 0);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31);
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31);
        int int46 = org.apache.commons.math3.util.MathArrays.distance1(intArray22, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, 100);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray44);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) (byte) 1);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray69);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69);
        int int73 = org.apache.commons.math3.util.MathArrays.distance1(intArray51, intArray69);
        int[] intArray74 = org.apache.commons.math3.util.MathArrays.copyOf(intArray51);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1]");
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray47, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray72);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray75, 1.9964918550255632E12d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-890.0, 199.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-5.98947556507669E12, 1.330994570017042E12, 6.654972850085211E12]");
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        float[] floatArray0 = null;
        float[] floatArray1 = null;
        boolean boolean2 = org.apache.commons.math3.util.MathArrays.equals(floatArray0, floatArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) '4');
        int[] intArray17 = new int[] {};
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray22);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 1);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22);
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray12, intArray27);
        int[] intArray29 = new int[] {};
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 1);
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 1);
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray37, intArray46);
        int[] intArray48 = new int[] {};
        int[] intArray53 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int54 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray53);
        double double55 = org.apache.commons.math3.util.MathArrays.distance(intArray46, intArray53);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53);
        int[] intArray57 = new int[] {};
        int[] intArray62 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int63 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray57, intArray62);
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62, (int) (short) 1);
        int[] intArray66 = new int[] {};
        int[] intArray71 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int72 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray66, intArray71);
        int[] intArray74 = org.apache.commons.math3.util.MathArrays.copyOf(intArray71, (int) (short) 1);
        int int75 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray65, intArray74);
        int[] intArray77 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 100);
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77);
        int int79 = org.apache.commons.math3.util.MathArrays.distance1(intArray53, intArray78);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78);
        int int81 = org.apache.commons.math3.util.MathArrays.distance1(intArray27, intArray78);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 235 + "'", int79 == 235);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 235 + "'", int81 == 235);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray41);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray83);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray41, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.scale(6181.097447311743d, doubleArray86);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-5624798.677053686, 1242400.5869096604, 6181097.447311743]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-5624798.677053686, 1242400.5869096604, 6181097.447311743]");
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38, (int) (byte) 100);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection68 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray67, orderDirection68, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection71 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray67, orderDirection71, false);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray55, orderDirection71, true);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray81);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray81);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray81);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray51, doubleArray81);
        double double91 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray51);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray51, 3.041454381069284E101d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + orderDirection68 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection68.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + orderDirection71 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection71.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.04987562112089d + "'", double91 == 10.04987562112089d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[3.379393756743649E101, -3.3793937567436493E100, 0.0]");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1.2423244926866538E15d, (double) (byte) 1, (double) (short) 10, (-4.466684551957364E139d), 1.4574354727153006E8d, 2.6740627672928667E44d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-4.466684551957364E140d) + "'", double6 == (-4.466684551957364E140d));
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27);
        int int29 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray28);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1]");
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection72, true);
        double double75 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray37, doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray69);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2111.0d + "'", double71 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-9200.0d) + "'", double75 == (-9200.0d));
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-273300.0d), (-1.8381134056869864E7d), 2.620301998137665E92d, (-2.3289362392541196E50d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-6.102516281252789E142d) + "'", double4 == (-6.102516281252789E142d));
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 100);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int[] intArray70 = new int[] {};
        int[] intArray75 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int76 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray70, intArray75);
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray75, (int) (short) 1);
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray69, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 100);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(intArray48, intArray69);
        double double83 = org.apache.commons.math3.util.MathArrays.distance(intArray36, intArray69);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (byte) 1);
        int[] intArray86 = new int[] {};
        int[] intArray91 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int92 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray86, intArray91);
        int[] intArray94 = org.apache.commons.math3.util.MathArrays.copyOf(intArray91, (int) (short) 1);
        int[] intArray95 = org.apache.commons.math3.util.MathArrays.copyOf(intArray91);
        int[] intArray97 = org.apache.commons.math3.util.MathArrays.copyOf(intArray95, (int) (short) 10);
        double double98 = org.apache.commons.math3.util.MathArrays.distance(intArray36, intArray97);
        int[] intArray99 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[-1]");
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double double53 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray17, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, 100.0d);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray87 = new double[] { 1, 1, 10 };
        double[] doubleArray91 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray87, doubleArray91);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray91);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray74, doubleArray93);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray55, doubleArray93);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.scale((double) (short) 0, doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[111.11111111111111, -11.11111111111111, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[111.11111111111111, -11.11111111111111, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, (double) 100L);
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray63);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection75 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray74, orderDirection75, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection78 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray74, orderDirection78, false);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray67, orderDirection78, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection83 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray67, orderDirection83, false);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray63, orderDirection83, true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 439.780879782446d + "'", double64 == 439.780879782446d);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + orderDirection75 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection75.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + orderDirection78 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection78.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + orderDirection83 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection83.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        double double61 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray47, doubleArray59);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection69 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray68, orderDirection69, false);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray47, orderDirection69, true, false);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47, (int) (short) 10);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray28, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray76, 100);
        double double80 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2111.0d + "'", double61 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + orderDirection69 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection69.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 10.04987562112089d + "'", double80 == 10.04987562112089d);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        double double32 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray30);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray30, orderDirection33, true);
        double double36 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray30);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, 1363.329967155091d);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray30);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.scale(Double.NaN, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (-1.1867527700951934E25d));
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2111.0d + "'", double32 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1360.1470508735442d + "'", double36 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[3.5602583102855805E25, -7.911685133967956E24, -3.955842566983978E25]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[3.5602583102855805E25, -7.911685133967956E24, -3.955842566983978E25]");
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray40);
        double double55 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray20, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale(929377.4372207435d, doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2068.0d + "'", double55 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.7658171307194125E7, 2788132.3116622306, 9293774.372207435]");
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, 100);
        double double27 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(9.835522828058196E71d, doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[8.851970545252377E74, -1.9671045656116393E74, -9.835522828058196E74]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1360.1470508735442d + "'", double27 == 1360.1470508735442d);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (short) 1);
        int[] intArray16 = new int[] {};
        int[] intArray21 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int22 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray16, intArray21);
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (short) 1);
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray15, intArray24);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15);
        int[] intArray27 = new int[] {};
        int[] intArray32 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int33 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray32);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32, (int) (short) 10);
        int int36 = org.apache.commons.math3.util.MathArrays.distance1(intArray15, intArray32);
        double double37 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray15);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) '4');
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray38, orderDirection39, false);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray17, orderDirection39, true, false);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray17, (int) (short) 10);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale(1.0570558719722057E74d, doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0570558719722058E75, -1.0570558719722057E74, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray40, (double) 100L);
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.scale(1.2423244926866538E15d, doubleArray64);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64, (int) (byte) 0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 439.780879782446d + "'", double65 == 439.780879782446d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-3.726973478059961E17, 8.2821632845776928E16, 4.1410816422888454E17]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray40, 10);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray72);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(doubleArray61, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray61);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray53, (double) 100L);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray53);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.5460450237574002E8d, doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray42, doubleArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-910.0, 201.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-910.0, 201.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.3914405213816602E9, 3.0920900475148004E8, 1.5460450237574003E9]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray37, orderDirection38, false);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16, orderDirection38, true, false);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, (int) (short) 10);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16);
        double double47 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray56);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray87);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(doubleArray76, doubleArray87);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray76);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray68, (double) 100L);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(3600.0d, doubleArray68);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray58, doubleArray68);
        double double95 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray46, doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray68);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -32,400 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.04987562112089d + "'", double47 == 10.04987562112089d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-32400.0, 7200.0, 36000.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-32410.0, 7201.0, 36000.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 75611.0d + "'", double95 == 75611.0d);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, 100);
        double double27 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.1213842535294886E10, -2.491965007843308E9, -1.245982503921654E10]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1360.1470508735442d + "'", double27 == 1360.1470508735442d);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray9);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray11, (int) (byte) 0);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 0);
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, (int) (short) 1);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(6.573889109854259E24d, doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-3.5851885979534E128d), (-2.639260241354281E13d), 1.347347400304754E92d, (-2.615914305086962E12d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 9.462245724335106E141d + "'", double4 == 9.462245724335106E141d);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(2.620301998137665E92d, (-1.0736316432238322E99d), 1020.0d, (double) 'a', 2720.2941017470885d, 3.2276883093128493E34d, 0.0d, (-1.405900735433483E96d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-2.8132391400032325E191d) + "'", double8 == (-2.8132391400032325E191d));
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 10, 75611.0d, 2.7081350412376205E15d, 0.0d, 7.926180822553106E46d, 3.401775050104543E33d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.696308416477826E80d + "'", double6 == 2.696308416477826E80d);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) '#');
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, 0);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        int int58 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.9777683343670226E57d), (-2.6653694205676815E15d), 1.7246705822717612E15d, 8.80879893310199E72d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.5192276385067893E88d + "'", double4 == 1.5192276385067893E88d);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) (short) 0);
        double[] doubleArray29 = new double[] { 1, 1, 10 };
        double[] doubleArray33 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray33);
        double[] doubleArray39 = new double[] { 1, 1, 10 };
        double[] doubleArray43 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray43);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray44);
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equals(doubleArray33, doubleArray44);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray44);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray44, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray49);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        float[] floatArray0 = null;
        float[] floatArray3 = new float[] { (-1L), (byte) 10 };
        float[] floatArray7 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean8 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray7);
        float[] floatArray11 = new float[] { (short) 1, (-1L) };
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray7, floatArray11);
        boolean boolean13 = org.apache.commons.math3.util.MathArrays.equals(floatArray0, floatArray7);
        float[] floatArray16 = new float[] { (-1L), (byte) 10 };
        float[] floatArray20 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray16, floatArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(floatArray0, floatArray16);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double double35 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray29);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray29, 1363.329967155091d);
        double double38 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale(2.3726213090057078E14d, doubleArray37);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray58);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray74 = new double[] { 1, 1, 10 };
        double[] doubleArray78 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray78);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray89);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(doubleArray78, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray78);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray70, (double) 100L);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray70);
        double double96 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray95);
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.equals(doubleArray37, doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1360.1470508735442d + "'", double35 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 6181.097447311743d + "'", double38 == 6181.097447311743d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.7039971938346611E17, 2.1564438208521472E17, 1.07822191042607347E18]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1346.545580364809d + "'", double96 == 1346.545580364809d);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray5);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray28);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        double double42 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray28, doubleArray40);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray40, orderDirection43, true);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray83);
        double[] doubleArray90 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray86, doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray90);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray5, doubleArray40);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray40, 10);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.scale((-1.2114525348282043E21d), doubleArray95);
        double[] doubleArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray96, doubleArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2111.0d + "'", double42 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1427.5857242211412d + "'", double92 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[1.0903072813453838E24, -2.4229050696564087E23, -1.2114525348282044E24, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray9);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray11, (int) (byte) 0);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2.667039156913762E7d, doubleArray15);
        double[] doubleArray21 = new double[] { 1, 1, 10 };
        double[] doubleArray25 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray25);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray25);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray43, orderDirection44, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection47 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray43, orderDirection47, false);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray31, orderDirection47, true);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray52, 2111.0d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + orderDirection47 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection47.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1105.7619047619048, -0.0, 1005.2380952380952]");
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray37, orderDirection38, false);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16, orderDirection38, true, false);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, (int) (short) 10);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection63 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray62, orderDirection63, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray62, orderDirection66, false);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray50, orderDirection66, true);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray46, orderDirection66, false);
        double double73 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + orderDirection63 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection63.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.04987562112089d + "'", double73 == 10.04987562112089d);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, 0);
        int[] intArray17 = new int[] {};
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray22);
        int[] intArray24 = new int[] {};
        int[] intArray29 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int30 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray24, intArray29);
        int int31 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray29);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) '4');
        int[] intArray34 = new int[] {};
        int[] intArray39 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray34, intArray39);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39, (int) (short) 1);
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39);
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray44);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray42);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray42);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale(1360.1470508735442d, doubleArray42);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray71, (-2.8132391400032325E191d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-12241.323457861898, 2720.2941017470885, 13601.470508735441]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        float[] floatArray0 = null;
        float[] floatArray1 = null;
        float[] floatArray4 = new float[] { (-1L), (byte) 10 };
        float[] floatArray8 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray4, floatArray8);
        float[] floatArray12 = new float[] { (short) 1, (-1L) };
        boolean boolean13 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray8, floatArray12);
        float[] floatArray16 = new float[] { (-1L), (byte) 10 };
        float[] floatArray20 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray16, floatArray20);
        float[] floatArray24 = new float[] { (short) 1, (-1L) };
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray20, floatArray24);
        float[] floatArray28 = new float[] { (-1L), (byte) 10 };
        float[] floatArray32 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray28, floatArray32);
        float[] floatArray34 = null;
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equals(floatArray28, floatArray34);
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equals(floatArray20, floatArray28);
        float[] floatArray39 = new float[] { (-1L), (byte) 10 };
        float[] floatArray43 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray39, floatArray43);
        float[] floatArray47 = new float[] { (short) 1, (-1L) };
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray43, floatArray47);
        float[] floatArray51 = new float[] { (-1L), (byte) 10 };
        float[] floatArray55 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray51, floatArray55);
        float[] floatArray57 = null;
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equals(floatArray51, floatArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(floatArray43, floatArray51);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray28, floatArray51);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray8, floatArray28);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(floatArray1, floatArray8);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(floatArray0, floatArray8);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray17, doubleArray48);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray48, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.scale((-2165.0d), doubleArray75);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray80);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray75, doubleArray80);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-890.0, 199.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1926850.0, -430835.0, -2165000.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 1.0, 10.0]");
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection61 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray60, orderDirection61, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection64 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray60, orderDirection64, false);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray48, orderDirection64, true);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray44, orderDirection64, false);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection74 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray73, orderDirection74, false);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray44, orderDirection74, false);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38, orderDirection74, false, false);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.scale((-5.2221633920904585E36d), doubleArray38);
        java.lang.String[] strArray90 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection91 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray90, orderDirection91, false);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray83, orderDirection91, false, true);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + orderDirection61 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection61.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + orderDirection64 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection64.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + orderDirection74 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection74.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + orderDirection91 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection91.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-0.0, -0.0, -0.0]");
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-2.7326318893828427E20d), 3.811678112579062E9d, 990.0d, 2.8885398876251348E35d, 2.1398173455879595E253d, (-2.613107296291178E10d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5.591572318486318E263d) + "'", double6 == (-5.591572318486318E263d));
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        double double32 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray30);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray30, orderDirection33, true);
        double double36 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray30);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, 1363.329967155091d);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray30);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.scale(Double.NaN, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.5183756289549949E7d, doubleArray51);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray51);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray58, (int) '#');
        double double66 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray41, doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2111.0d + "'", double32 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1360.1470508735442d + "'", double36 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.3665380660594955E8, 3.0367512579099897E7, 1.518375628954995E8]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 209990.0d + "'", double66 == 209990.0d);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 100);
        double[] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray10, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(2.6740627672928667E44d, (double) (short) 10, (-820.0d), 1.3342652706739132E34d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.6740627563518914E45d + "'", double4 == 2.6740627563518914E45d);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-2.3289362392541196E50d), (-2.598166562713278E28d), (double) (-1L), 6.525883142260517E35d, 2.8772624126635964E38d, 2.0652291407971942E8d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 6.050964263521264E78d + "'", double6 == 6.050964263521264E78d);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int[] intArray18 = new int[] {};
        int[] intArray23 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray23);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (short) 1);
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (short) 100);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, (int) (short) 100);
        double double51 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray38);
        int int52 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray17);
        int[] intArray53 = new int[] {};
        int[] intArray58 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray58);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (short) 1);
        int[] intArray68 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int69 = org.apache.commons.math3.util.MathArrays.distance1(intArray61, intArray68);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray68);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray71);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 98 + "'", int69 == 98);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 98 + "'", int70 == 98);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1]");
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, (double) 100L);
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray63);
        double double65 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray8);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray75, doubleArray86);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray86);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray86, 100);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray92);
        double double94 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray93);
        double double95 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray93);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray96);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -9 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 439.780879782446d + "'", double64 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 13.601470508735444d + "'", double65 == 13.601470508735444d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1360.1470508735442d + "'", double94 == 1360.1470508735442d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1346.545580364809d + "'", double95 == 1346.545580364809d);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-9.0, 2.0, 10.0]");
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray57);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray65);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray65);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, 98);
        int[] intArray74 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray76 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(3.401775050104543E33d, 2.7081350412376205E15d, 88.21557489650559d, (-5.718703196015772E45d), 3.1413526832245498E134d, (-2.666466636913762E8d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-8.376312124597788E142d) + "'", double6 == (-8.376312124597788E142d));
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        double double42 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray29);
        int[] intArray43 = new int[] {};
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray43, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 1);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int int61 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray60);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray51, (int) (short) 100);
        int[] intArray64 = new int[] {};
        int[] intArray69 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 1);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78, (int) (short) 1);
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray81);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) 100);
        double double85 = org.apache.commons.math3.util.MathArrays.distance(intArray51, intArray72);
        int int86 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray51);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (byte) 100);
        int[] intArray90 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88, (int) (byte) 10);
        int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray90, 98);
        int[] intArray93 = org.apache.commons.math3.util.MathArrays.copyOf(intArray92);
        java.lang.Class<?> wildcardClass94 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(4.0273832394686912E16d, (-3.2747201721782604E59d), 79.0d, 7.6769829973339556E18d, (double) 10.0f, 1.1461596173157833E27d, 9.037912452420332E72d, 4.403214624117384E71d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.979586828198981E144d + "'", double8 == 3.979586828198981E144d);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray18, orderDirection39, true);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) (byte) 0);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray62);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equals(doubleArray51, doubleArray62);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray62);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray62, (double) (byte) 1);
        double double68 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray67);
        double[][] doubleArray69 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray67, doubleArray69);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray18, doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 4.533823502911814d + "'", double68 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray69);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, 0);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 0);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(doubleArray29, doubleArray40);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray29);
        double double44 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray21);
        double double45 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray10, doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -10 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 13.601470508735444d + "'", double44 == 13.601470508735444d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57, 0);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray66);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray72);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray72);
        java.lang.Class<?> wildcardClass76 = doubleArray75.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        double double43 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray29, doubleArray41);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray41, orderDirection44, true);
        double double47 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray41);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, 1363.329967155091d);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray41);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale(Double.NaN, doubleArray50);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection73 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray72, orderDirection73, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection76 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray72, orderDirection76, false);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray60, orderDirection76, true);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray56, orderDirection76, false);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray51, orderDirection76, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray10, orderDirection76, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not decreasing (1 < 10)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2111.0d + "'", double43 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1360.1470508735442d + "'", double47 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + orderDirection73 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection73.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + orderDirection76 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection76.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        double double63 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray48);
        double double64 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray9, doubleArray48);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.5183866289549949E7d), doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (136,654,796.606 >= -30,367,732.579)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.3665479660594955E8, -3.0367732579099897E7, -1.518386628954995E8]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.04987562112089d + "'", double63 == 10.04987562112089d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-92.0d) + "'", double64 == (-92.0d));
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        long[] longArray3 = new long[] { 100, 10L, 100 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[100, 10, 100]");
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, 100);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, 1);
        int[] intArray24 = new int[] {};
        int[] intArray25 = new int[] {};
        int[] intArray30 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int31 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray25, intArray30);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (short) 1);
        int[] intArray34 = new int[] {};
        int[] intArray39 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray34, intArray39);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39, (int) (short) 1);
        int int43 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray33, intArray42);
        int[] intArray44 = new int[] {};
        int[] intArray49 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int50 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray44, intArray49);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) (short) 1);
        int[] intArray53 = new int[] {};
        int[] intArray58 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray58);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (short) 1);
        int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray61);
        int int63 = org.apache.commons.math3.util.MathArrays.distance1(intArray42, intArray61);
        int[] intArray64 = new int[] {};
        int[] intArray69 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 1);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78, (int) (short) 1);
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray81);
        int[] intArray83 = new int[] {};
        int[] intArray88 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int89 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray83, intArray88);
        double double90 = org.apache.commons.math3.util.MathArrays.distance(intArray81, intArray88);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88);
        int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88);
        int[] intArray93 = org.apache.commons.math3.util.MathArrays.copyOf(intArray92);
        int[] intArray95 = org.apache.commons.math3.util.MathArrays.copyOf(intArray92, (int) ' ');
        double double96 = org.apache.commons.math3.util.MathArrays.distance(intArray42, intArray92);
        double double97 = org.apache.commons.math3.util.MathArrays.distance(intArray24, intArray42);
        // The following exception was thrown during execution in test generation
        try {
            int int98 = org.apache.commons.math3.util.MathArrays.distance1(intArray23, intArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(8.038986369571635E23d, 439.780879782446d, 48965.2938314476d, 3.041454381069284E101d, 1.1994689109482976E37d, (double) (-1.0f), (-1.2157512288535557E51d), (-1.2114525348282043E21d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.489257074440011E106d + "'", double8 == 1.489257074440011E106d);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-1101.0d), 2.819888708394894E13d, 6.364464749353691E111d, (-5.963592403540382E49d), (-12.601470508735444d), 2.4415591134470963E30d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-3.7955073631846215E161d) + "'", double6 == (-3.7955073631846215E161d));
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        double[] doubleArray0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean13 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray10, orderDirection11, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection14 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray10, orderDirection14, false);
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray3, orderDirection14, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection19 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray3, orderDirection19, false);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray24, orderDirection25, false);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray3, orderDirection25, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection25, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + orderDirection14 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection14.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + orderDirection19 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection19.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray57);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray65);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray65);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, 98);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        int[] intArray80 = new int[] {};
        int[] intArray85 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int86 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray80, intArray85);
        int int87 = org.apache.commons.math3.util.MathArrays.distance1(intArray73, intArray85);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) '4');
        int[] intArray17 = new int[] {};
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray22);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 1);
        int[] intArray26 = new int[] {};
        int[] intArray31 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int32 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray26, intArray31);
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (short) 1);
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray25, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, 0);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, (int) ' ');
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = org.apache.commons.math3.util.MathArrays.distance1(intArray12, intArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(48013.29967155091d, 929377.4372207435d, (-79.0d), 2.696308416477826E80d, 0.0d, (-7.887202131357053E44d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2.1300836490174828E82d) + "'", double6 == (-2.1300836490174828E82d));
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray8, (double) 100L);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8, 0);
        double[] doubleArray39 = new double[] { 1, 1, 10 };
        double[] doubleArray43 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray43);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray54);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(doubleArray43, doubleArray54);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray54);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray74, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray74);
        double double89 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray54, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.scale(929377.4372207435d, doubleArray88);
        double double91 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray34, doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -17,658,171.307 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2068.0d + "'", double89 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.7658171307194125E7, 2788132.3116622306, 9293774.372207435]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2.014842271203998E7d + "'", double91 == 2.014842271203998E7d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0, 235);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-2.3289362392541196E50d), (-2.3289362392541196E50d), (-1.622053541788808E83d), 6.469126606706673E72d, (-2.196974293715284E112d), 1849908.0027625682d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0493269724688772E156d) + "'", double6 == (-1.0493269724688772E156d));
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray5);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray5);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray31, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray70);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equals(doubleArray59, doubleArray70);
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray50, doubleArray70);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray70, 0);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray85);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray12, (int) (short) 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(6.095966089161461E33d, doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[6.095966089161461E34, 6.095966089161461E34, 6.095966089161461E35]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[9.0, 9.0, 90.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        long[] longArray0 = new long[] {};
        long[] longArray1 = new long[] {};
        long[] longArray2 = new long[] {};
        long[][] longArray3 = new long[][] { longArray0, longArray1, longArray2 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray40, (double) 100L);
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray64);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray64, orderDirection66, false, false);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.scale(1000.0d, doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 439.780879782446d + "'", double65 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-300000.0, 66666.66666666667, 333333.3333333333]");
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (short) 1, (-1.2114525348282044E23d), (-2.196974293715284E112d), (-1.0736316432238322E99d), 3.6103273374458373E109d, (-183792.33961872238d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.3587411210820586E211d + "'", double6 == 2.3587411210820586E211d);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray57);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray65);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray65);
        int[] intArray71 = new int[] {};
        int[] intArray76 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray71, intArray76);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76, (int) (short) 1);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76);
        int int81 = org.apache.commons.math3.util.MathArrays.distance1(intArray65, intArray80);
        int[] intArray82 = new int[] {};
        int[] intArray87 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int88 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray82, intArray87);
        int[] intArray90 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87, (int) (short) 1);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87);
        int[] intArray93 = org.apache.commons.math3.util.MathArrays.copyOf(intArray91, (int) (short) 10);
        int int94 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray65, intArray93);
        int[] intArray96 = org.apache.commons.math3.util.MathArrays.copyOf(intArray93, 10);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, 0);
        int[] intArray42 = new int[] {};
        int[] intArray47 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray42, intArray47);
        int int49 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray47);
        double double50 = org.apache.commons.math3.util.MathArrays.distance(intArray20, intArray29);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        double double32 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray30);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray30, orderDirection33, true);
        double double36 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray30);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, 1363.329967155091d);
        double double39 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.scale(2.3726213090057078E14d, doubleArray38);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray40, 100);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double45 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray0, doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2111.0d + "'", double32 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1360.1470508735442d + "'", double36 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 6181.097447311743d + "'", double39 == 6181.097447311743d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.7039971938346611E17, 2.1564438208521472E17, 1.07822191042607347E18]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.7039971938346611E17, 2.1564438208521472E17, 1.07822191042607347E18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-9.7039971938346611E17, 2.1564438208521472E17, 1.07822191042607347E18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray61);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.7246705822717612E15d, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.scale((-1.2170120134952047E22d), doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray68);
        double[] doubleArray72 = null;
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray71, doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.7246705822717612E15, 1.7246705822717612E15, 1.7246705822717612E16]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-2.098944817946503E37, -2.098944817946503E37, -2.098944817946503E38]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.7246705822708612E15, 1.7246705822719612E15, 1.7246705822718612E16]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(5.525048868831705E39d, 1849908.0027625682d, 1020.0d, 1.9964918550255632E12d, 4.987623771057232E31d, 2.506821214483436E71d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.2503081079148144E103d + "'", double6 == 1.2503081079148144E103d);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(21.0d, (double) 'a', (-7.6769830141116774E18d), (-2.0559464345526106E59d), (-3.446049549398677E120d), 8.583023989821415E99d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2.9577525952602123E220d) + "'", double6 == (-2.9577525952602123E220d));
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, 100);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, 1);
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21);
        int[] intArray25 = new int[] {};
        int[] intArray30 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int31 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray25, intArray30);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (short) 1);
        int[] intArray40 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int41 = org.apache.commons.math3.util.MathArrays.distance1(intArray33, intArray40);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray24, intArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 98 + "'", int41 == 98);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 1, 52, 1, 32, -1]");
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray40);
        double double55 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray20, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale(929377.4372207435d, doubleArray54);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2068.0d + "'", double55 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.7658171307194125E7, 2788132.3116622306, 9293774.372207435]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-0.0, 0.0, 0.0]");
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 0);
        double[] doubleArray17 = new double[] { 1, 1, 10 };
        double[] doubleArray21 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray21);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray30);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray52, doubleArray63);
        double double66 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray30, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2165.0d, doubleArray52);
        double double68 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray10, doubleArray52);
        java.lang.Class<?> wildcardClass69 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[21650.0, -2165.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-218665.0d) + "'", double68 == (-218665.0d));
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray39);
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equals(doubleArray28, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray28);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray20, (double) 100L);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(3600.0d, doubleArray20);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray10, doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -10 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-32400.0, 7200.0, 36000.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-32410.0, 7201.0, 36000.0]");
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3, (int) '#');
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray37, orderDirection38, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection41 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray37, orderDirection41, false);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray25, orderDirection41, true);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray25);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray51);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray51);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray51);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray21, doubleArray51);
        double double61 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray21);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + orderDirection41 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection41.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.04987562112089d + "'", double61 == 10.04987562112089d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-10.0, -9.0, -99.0, 10.0, 0.0]");
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        double double42 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray29);
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray44 = new int[] {};
        int[] intArray49 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int50 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray44, intArray49);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) (short) 1);
        int[] intArray53 = new int[] {};
        int[] intArray58 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray58);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (short) 1);
        int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray61);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52);
        int[] intArray64 = new int[] {};
        int[] intArray69 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 10);
        int int73 = org.apache.commons.math3.util.MathArrays.distance1(intArray52, intArray69);
        int int74 = org.apache.commons.math3.util.MathArrays.distance1(intArray43, intArray52);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (-1.0f), 1.0570558719722057E74d, (-2.1014830991446272E112d), 1.1579293173848756E34d, (-2.359922046250594E90d), 7.926180822553106E46d, (double) (short) -1, 6.534471319905731E69d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-2.4333688923589076E146d) + "'", double8 == (-2.4333688923589076E146d));
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray27, orderDirection28, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray27, orderDirection31, false);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray15, orderDirection31, true);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray15);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray36, 2111.0d);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray67);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(doubleArray56, doubleArray67);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray56);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray48, (double) 100L);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(3600.0d, doubleArray48);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray36, doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray0, doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1105.7619047619048, -0.0, 1005.2380952380952]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-32400.0, 7200.0, 36000.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[3.3950617283950616E-4, 0.0, -2.777777777777778E-4]");
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(104715.43798342906d, 7.214337735553726E68d, 47618.74825108279d, (-5.479592817681999E9d), (-2.359922046250594E90d), 1849908.0027625682d, 0.0d, 2.4415591134470963E30d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-4.365638679254789E96d) + "'", double8 == (-4.365638679254789E96d));
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 1);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray18);
        int[] intArray20 = new int[] {};
        int[] intArray25 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray25);
        double double27 = org.apache.commons.math3.util.MathArrays.distance(intArray18, intArray25);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25);
        int[] intArray29 = new int[] {};
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 1);
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 1);
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray37, intArray46);
        int[] intArray48 = new int[] {};
        int[] intArray53 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int54 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray53);
        double double55 = org.apache.commons.math3.util.MathArrays.distance(intArray46, intArray53);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray25, intArray57);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int[] intArray69 = new int[] {};
        int[] intArray74 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int75 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray69, intArray74);
        int[] intArray77 = org.apache.commons.math3.util.MathArrays.copyOf(intArray74, (int) (short) 1);
        int int78 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray68, intArray77);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77, 100);
        int int82 = org.apache.commons.math3.util.MathArrays.distance1(intArray57, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            int int83 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 235 + "'", int82 == 235);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) 100L);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray31);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray84);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(doubleArray73, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray73);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray65, (double) 100L);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray65);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray90);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, 100.00499987500625d);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray31);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-300.01499962501873, 66.66999991667083, 333.3499995833542]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-9.0, 2.0, 10.0]");
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray83);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(doubleArray72, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray72);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray64, (double) 100L);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, 100.00499987500625d);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, 1353.403487508437d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-300.01499962501873, 66.66999991667083, 333.3499995833542]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-4060.2104625253105, 902.2689916722912, 4511.3449583614565]");
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int[] intArray18 = new int[] {};
        int[] intArray23 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray23);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (short) 1);
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (short) 100);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, (int) (short) 100);
        double double51 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray38);
        int int52 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray17);
        int[] intArray53 = new int[] {};
        int[] intArray58 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray58);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (short) 1);
        int[] intArray68 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int69 = org.apache.commons.math3.util.MathArrays.distance1(intArray61, intArray68);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray68);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray72 = new int[] {};
        int[] intArray77 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int78 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray77);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77, (int) (short) 1);
        int[] intArray81 = new int[] {};
        int[] intArray86 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int87 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray81, intArray86);
        int[] intArray89 = org.apache.commons.math3.util.MathArrays.copyOf(intArray86, (int) (short) 1);
        int int90 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray80, intArray89);
        int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80, 0);
        int[] intArray93 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80);
        int[] intArray94 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80);
        int[] intArray95 = org.apache.commons.math3.util.MathArrays.copyOf(intArray94);
        int int96 = org.apache.commons.math3.util.MathArrays.distance1(intArray71, intArray95);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 98 + "'", int69 == 98);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 98 + "'", int70 == 98);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double double35 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray29);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray29, 1363.329967155091d);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray29);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray29, 1.855513131712105E113d);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1360.1470508735442d + "'", double35 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-5.566539395136315E113, 1.2370087544747366E113, 6.185043772373683E113]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-5.566539395136315E113, 1.2370087544747366E113, 6.185043772373683E113]");
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray10);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray12, (int) (byte) 0);
        double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 0);
        double[] doubleArray21 = new double[] { 1, 1, 10 };
        double[] doubleArray25 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray25);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray36);
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equals(doubleArray25, doubleArray36);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray36);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray67);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(doubleArray56, doubleArray67);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray56);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray48, (double) 100L);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray48);
        double[] doubleArray77 = new double[] { 1, 1, 10 };
        double[] doubleArray81 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray36, doubleArray81);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-2165.0d), doubleArray81);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray81);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.scale(1.855513131712105E113d, doubleArray81);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.scale((-1.2170120134952047E22d), doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-21650.0, 2165.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-4.017185930156707E117, 4.017185930156707E116, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[4.88896353744462E139, -4.88896353744462E138, 0.0]");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray57);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray65);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray65);
        int[] intArray71 = new int[] {};
        int[] intArray76 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray71, intArray76);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76, (int) (short) 1);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76);
        int int81 = org.apache.commons.math3.util.MathArrays.distance1(intArray65, intArray80);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80, (int) (byte) 100);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80);
        java.lang.Class<?> wildcardClass85 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray45);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray28, doubleArray47);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection49, true);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray4, orderDirection49, false, false);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray4);
        java.lang.Class<?> wildcardClass56 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection49 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection49.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray39, doubleArray59);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray59, 0);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray68);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray74);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equals(doubleArray59, doubleArray74);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2.667039156913762E7d, doubleArray74);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale(1.4951800047059846E8d, doubleArray74);
        double double79 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray78);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[2.667039156913762E7, 2.667039156913762E7, 2.667039156913762E8]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[3.987703619185364E15, 3.987703619185364E15, 3.987703619185364E16]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 4.0273832394686912E16d + "'", double79 == 4.0273832394686912E16d);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21);
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        int[] intArray25 = new int[] {};
        int[] intArray30 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int31 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray25, intArray30);
        int[] intArray32 = new int[] {};
        int[] intArray37 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray32, intArray37);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (short) 1);
        int[] intArray41 = new int[] {};
        int[] intArray46 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray41, intArray46);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (short) 1);
        int int50 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray49);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        double double58 = org.apache.commons.math3.util.MathArrays.distance(intArray49, intArray56);
        double double59 = org.apache.commons.math3.util.MathArrays.distance(intArray25, intArray49);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int[] intArray69 = new int[] {};
        int[] intArray74 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int75 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray69, intArray74);
        int[] intArray77 = org.apache.commons.math3.util.MathArrays.copyOf(intArray74, (int) (short) 1);
        int int78 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray68, intArray77);
        int[] intArray79 = new int[] {};
        int[] intArray84 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int85 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray79, intArray84);
        double double86 = org.apache.commons.math3.util.MathArrays.distance(intArray77, intArray84);
        int int87 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray77);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = org.apache.commons.math3.util.MathArrays.distance1(intArray24, intArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray38, 100.0d);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54, 98);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray56);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -11.111 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[111.11111111111111, -11.11111111111111, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[111.11111111111111, -11.11111111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double double35 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray29);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray53);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray75, doubleArray86);
        double double89 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray53, doubleArray75);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray75, 100.0d);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.scale(9319.084308623767d, doubleArray75);
        double double93 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray29, doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray0, doubleArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1360.1470508735442d + "'", double35 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[111.11111111111111, -11.11111111111111, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[93190.84308623767, -9319.084308623767, 0.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 104609.92739486144d + "'", double93 == 104609.92739486144d);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.591572318486318E263d), (-92.0d), (-2.6131166153754868E10d), 929377.4372207435d, (-1.2170120134952047E22d), (-5.9777683343670226E57d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.144246533007413E265d + "'", double6 == 5.144246533007413E265d);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray39, doubleArray59);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray59, 0);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray68);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray74);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equals(doubleArray59, doubleArray74);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2.667039156913762E7d, doubleArray74);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale(1.4951800047059846E8d, doubleArray74);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray74, (int) '#');
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[2.667039156913762E7, 2.667039156913762E7, 2.667039156913762E8]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[3.987703619185364E15, 3.987703619185364E15, 3.987703619185364E16]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[2.667039156913762E7, 2.667039156913762E7, 2.667039156913762E8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        float[] floatArray6 = new float[] { 1, (byte) -1, '4', 10L, (short) 10, 10L };
        float[] floatArray9 = new float[] { (-1L), (byte) 10 };
        float[] floatArray13 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray9, floatArray13);
        float[] floatArray17 = new float[] { (short) 1, (-1L) };
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray13, floatArray17);
        float[] floatArray21 = new float[] { (-1L), (byte) 10 };
        float[] floatArray25 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray21, floatArray25);
        float[] floatArray29 = new float[] { (short) 1, (-1L) };
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray25, floatArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(floatArray17, floatArray29);
        float[] floatArray34 = new float[] { (-1L), (byte) 10 };
        float[] floatArray38 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray34, floatArray38);
        float[] floatArray42 = new float[] { (short) 1, (-1L) };
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray38, floatArray42);
        float[] floatArray46 = new float[] { (-1L), (byte) 10 };
        float[] floatArray50 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray46, floatArray50);
        float[] floatArray52 = null;
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(floatArray46, floatArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(floatArray38, floatArray46);
        float[] floatArray57 = new float[] { (-1L), (byte) 10 };
        float[] floatArray61 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray57, floatArray61);
        float[] floatArray63 = null;
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equals(floatArray57, floatArray63);
        float[] floatArray67 = new float[] { (-1L), (byte) 10 };
        float[] floatArray71 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray67, floatArray71);
        float[] floatArray75 = new float[] { (short) 1, (-1L) };
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray71, floatArray75);
        float[] floatArray79 = new float[] { (-1L), (byte) 10 };
        float[] floatArray83 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray79, floatArray83);
        float[] floatArray85 = null;
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(floatArray79, floatArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(floatArray71, floatArray79);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(floatArray57, floatArray71);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(floatArray38, floatArray57);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(floatArray17, floatArray57);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(floatArray6, floatArray57);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[1.0, -1.0, 52.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray83), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1.1579293173848756E34d, 144652.08102413287d, (double) 10.0f, (-2.639260241354281E12d), (-12.601470508735444d), 2.4215696632833603E43d, 2.3726213090057078E14d, 1.0511625127070385E53d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.4940105768767026E67d + "'", double8 == 2.4940105768767026E67d);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection40 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray19, orderDirection40, true);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) (byte) 0);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray52, doubleArray63);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray63);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray63, (double) (byte) 1);
        double double69 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray68);
        double[][] doubleArray70 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray68, doubleArray70);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray19, doubleArray70);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.scale(2.1940812183982476E20d, doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection40 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection40.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 4.533823502911814d + "'", double69 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray9);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray11, (int) (byte) 0);
        double[] doubleArray17 = new double[] { 1, 1, 10 };
        double[] doubleArray21 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray21);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray51, doubleArray70);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray85 = new double[] { 1, 1, 10 };
        double[] doubleArray89 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray85, doubleArray89);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray90);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(doubleArray79, doubleArray90);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray70, doubleArray90);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray32, doubleArray90);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equals(doubleArray11, doubleArray90);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray90, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray0, doubleArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray42);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray65);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(doubleArray54, doubleArray65);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray84);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray42, doubleArray87);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2.0652291407971942E8d, doubleArray9);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[2.0652291407971942E11, -2.0652291407971943E10, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[2.0652291407971942E11, -2.0652291407971943E10, 0.0]");
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (900 >= -200)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        double[] doubleArray0 = null;
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray21);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(doubleArray10, doubleArray21);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray21);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray52);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray41);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray33, (double) 100L);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray33);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray75, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray75);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray21, doubleArray89);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.scale((double) 1L, doubleArray21);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray91, 100);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray93);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equals(doubleArray0, doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-919.0, 203.0, 1010.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray44);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 100);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray56 = new int[] {};
        int[] intArray61 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray56, intArray61);
        int int63 = org.apache.commons.math3.util.MathArrays.distance1(intArray49, intArray61);
        double double64 = org.apache.commons.math3.util.MathArrays.distance(intArray44, intArray61);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (byte) 100);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        double double42 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray29);
        int[] intArray43 = new int[] {};
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray43, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 1);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int int61 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray60);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray51, (int) (short) 100);
        int[] intArray64 = new int[] {};
        int[] intArray69 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 1);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78, (int) (short) 1);
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray81);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) 100);
        double double85 = org.apache.commons.math3.util.MathArrays.distance(intArray51, intArray72);
        int int86 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray51);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (byte) 100);
        int[] intArray89 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray89, 100);
        java.lang.Class<?> wildcardClass92 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray42, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray85 = new double[] { 1, 1, 10 };
        double[] doubleArray89 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray85, doubleArray89);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray90);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(doubleArray79, doubleArray90);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray79);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray71, (double) 100L);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray61, doubleArray71);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray23, doubleArray71);
        double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray71, 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-12.0, 2.6666666666666665, 13.333333333333334]");
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[]");
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(820404.8465375019d, 2.2956897605530104E44d, 1353.403487508437d, (-4.149720547934001E12d), 10.0d, 1.855513131712105E113d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.855513131712105E114d + "'", double6 == 1.855513131712105E114d);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, 0);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 100);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray60);
        double double62 = org.apache.commons.math3.util.MathArrays.distance(intArray39, intArray60);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39);
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39, 10);
        double double66 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray65);
        int[] intArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double68 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray19);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray66);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.scale(1.2423244926866538E15d, doubleArray66);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale(1000.0499987500625d, doubleArray68);
        double[] doubleArray74 = new double[] { 1, 1, 10 };
        double[] doubleArray78 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray74);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray74);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray68, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.scale(11.1665284679121d, doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray83);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 439.780879782446d + "'", double67 == 439.780879782446d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-3.726973478059961E17, 8.2821632845776928E16, 4.1410816422888454E17]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-3.7271598220753804E20, 8.282577382389735E19, 4.1412886911948666E20]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray39);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray59);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray71);
        double double73 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray59, doubleArray71);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection74 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray71, orderDirection74, true);
        double double77 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray39, doubleArray71);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray82);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray39, doubleArray82);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection90 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray39, orderDirection90, false);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale(929377.4372207435d, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(0.0d, doubleArray93);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray93);
        double[] doubleArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray93, doubleArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2111.0d + "'", double73 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection74 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection74.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-9200.0d) + "'", double77 == (-9200.0d));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection90 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection90.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[0.0, -0.0, 0.0]");
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, 2.2956897605530104E44d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-6.887069281659031E44, 1.5304598403686735E44, 7.652299201843367E44]");
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray44);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 1);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52);
        int int57 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray56);
        int[] intArray58 = new int[] {};
        int[] intArray63 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int64 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray63);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (short) 1);
        int[] intArray73 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int74 = org.apache.commons.math3.util.MathArrays.distance1(intArray66, intArray73);
        int[] intArray76 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (byte) 100);
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray73);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, 0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 98 + "'", int74 == 98);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1, 52, 1, 32, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 98 + "'", int77 == 98);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray64 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[] doubleArray68 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[][] doubleArray69 = new double[][] { doubleArray64, doubleArray68 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray37, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        double double72 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray8, (double) 100L);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8, 0);
        double[] doubleArray39 = new double[] { 1, 1, 10 };
        double[] doubleArray43 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray43);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray54);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(doubleArray43, doubleArray54);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray54);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray74, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray74);
        double double89 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray54, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.scale(929377.4372207435d, doubleArray88);
        double double91 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray34, doubleArray90);
        double double93 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2068.0d + "'", double89 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.7658171307194125E7, 2788132.3116622306, 9293774.372207435]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2.014842271203998E7d + "'", double91 == 2.014842271203998E7d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray58);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray70);
        double double72 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray58, doubleArray70);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection73 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray70, orderDirection73, true);
        double double76 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray38, doubleArray70);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray81);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray38, doubleArray81);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.scale((-1.3439015006589716E48d), doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2111.0d + "'", double72 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection73 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection73.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-9200.0d) + "'", double76 == (-9200.0d));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-0.0, -0.0, -0.0]");
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57, 0);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray66);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray72);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray72);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        long[] longArray5 = new long[] { (short) 100, (byte) 0, 0L, 100L, ' ' };
        long[] longArray11 = new long[] { (short) 100, (byte) 0, 0L, 100L, ' ' };
        long[] longArray17 = new long[] { (short) 100, (byte) 0, 0L, 100L, ' ' };
        long[][] longArray18 = new long[][] { longArray5, longArray11, longArray17 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray18);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray18);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray18);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray18);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[100, 0, 0, 100, 32]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[100, 0, 0, 100, 32]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[100, 0, 0, 100, 32]");
        org.junit.Assert.assertNotNull(longArray18);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, 100);
        double double41 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray36);
        int[] intArray42 = new int[] {};
        int[] intArray47 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray42, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (short) 1);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (short) 1);
        int int60 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray59);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69);
        int int71 = org.apache.commons.math3.util.MathArrays.distance1(intArray59, intArray70);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray59);
        int int73 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray59);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray12, 0);
        double[] doubleArray18 = new double[] { 1, 1, 10 };
        double[] doubleArray22 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray22);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray33, doubleArray52);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection75 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray74, orderDirection75, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection78 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray74, orderDirection78, false);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray62, orderDirection78, true);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray58, orderDirection78, false);
        java.lang.String[] strArray87 = new java.lang.String[] { "", "hi!" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray87, orderDirection88, false);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray58, orderDirection88, false);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray52, orderDirection88, false, false);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + orderDirection75 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection75.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + orderDirection78 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection78.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + orderDirection88 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection88.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double double35 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray29);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray29, 1363.329967155091d);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray29);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray29, (-19.0d));
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray59);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray71);
        double double73 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray59, doubleArray71);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection74 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray71, orderDirection74, true);
        double double77 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray71);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray71, 1363.329967155091d);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray71);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.scale(Double.NaN, doubleArray80);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray80);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray80);
        double[] doubleArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1360.1470508735442d + "'", double35 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[57.0, -12.666666666666666, -63.333333333333336]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2111.0d + "'", double73 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection74 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection74.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1360.1470508735442d + "'", double77 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[8.1E7, -3.6E7, -1.76E8, 4.0E7, 1.0E8]");
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(13.601470508735444d, (double) 100, 1360.1470508735442d, 145.68802284333466d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 199517.28166883273d + "'", double4 == 199517.28166883273d);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        double[] doubleArray0 = null;
        double[] doubleArray7 = new double[] { 1, 1, 10 };
        double[] doubleArray11 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray11);
        double[] doubleArray17 = new double[] { 1, 1, 10 };
        double[] doubleArray21 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray22);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(doubleArray11, doubleArray22);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray22);
        double[] doubleArray30 = new double[] { 1, 1, 10 };
        double[] doubleArray34 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray34);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray45);
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equals(doubleArray34, doubleArray45);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray64);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray64);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray22, doubleArray67);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22, (int) 'a');
        double[] doubleArray74 = new double[] { 1, 1, 10 };
        double[] doubleArray78 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray78);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray89);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(doubleArray78, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray22, doubleArray89);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray22, 2.303752319195026E28d);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2.620301998137665E92d, doubleArray94);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2.6740627672928667E44d, doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-810000.0, -40000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-4.842615472066012E165, 1.0761367715702249E165, 5.380683857851124E165]");
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.scale(1366.9312345542478d, doubleArray29);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray35);
        java.lang.Class<?> wildcardClass37 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1230238.111098823, 273386.2469108496, 1366931.2345542477]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1230238.111098823, 273386.2469108496, 1366931.2345542477]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray5);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray11);
        double[] doubleArray17 = new double[] { 1, 1, 10 };
        double[] doubleArray21 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray21);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray32);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(doubleArray21, doubleArray32);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray32);
        double[] doubleArray39 = new double[] { 1, 1, 10 };
        double[] doubleArray43 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray43);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray54);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(doubleArray43, doubleArray54);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray73);
        double double77 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray32, doubleArray54);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(13.601470508735444d, doubleArray32);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray12, doubleArray32);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.scale(1.7658161307194125E7d, doubleArray32);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray80);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-12241.3234578619, 2720.294101747089, 13601.470508735443]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-12241.3234578619, 2720.294101747089, 136014.70508735444]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-2.1615926423246478E11, 4.8035392051658844E10, 2.401769602582942E11]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-2.1615926423246478E11, 4.8035392051658844E10, 2.401769602582942E11]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(88.21557489650559d, (-1.0458049754775623E91d), (-1.0493269724688772E156d), 1.0282061941137209E34d, (-1.629021819880944E76d), 21009.0d, 2.065229095458959E8d, 2.7081350412376205E15d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0789244927430973E190d) + "'", double8 == (-1.0789244927430973E190d));
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, 0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray39);
        double[] doubleArray46 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray46);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.211513105940706E25d), doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.211513105940706E27, -0.0, -1.211513105940706E25]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10000.0, 0.0, 100.0]");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        double double32 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray30);
        double double33 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2010.0d, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-2.3050398777241942E83d), doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-4.633130154225631E87, 4.6331301542256303E86, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2111.0d + "'", double32 == 2111.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.04987562112089d + "'", double33 == 10.04987562112089d);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray39, doubleArray59);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray59, 0);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray68);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray74);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equals(doubleArray59, doubleArray74);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2.667039156913762E7d, doubleArray74);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale(1.4951800047059846E8d, doubleArray74);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[2.667039156913762E7, 2.667039156913762E7, 2.667039156913762E8]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[3.987703619185364E15, 3.987703619185364E15, 3.987703619185364E16]");
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray71);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray71);
        double[] doubleArray78 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray74, doubleArray78);
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray78);
        double double81 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray78);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1427.5857242211412d + "'", double80 == 1427.5857242211412d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 100.00499987500625d + "'", double81 == 100.00499987500625d);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 1.629021819880944E76d, 1.1994689109482976E37d, 3.1413526832245498E134d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.767954881851863E171d + "'", double4 == 3.767954881851863E171d);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray19);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double double65 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray50);
        double double66 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray11, doubleArray50);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.5183866289549949E7d), doubleArray11);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale((-1.8381134056869864E7d), doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-2.359922046250594E90d), doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.3665479660594955E8, -3.0367732579099897E7, -1.518386628954995E8]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.04987562112089d + "'", double65 == 10.04987562112089d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-92.0d) + "'", double66 == (-92.0d));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[5.927817711095538E105, -1.3172928246878972E105, -6.586464123439486E105]");
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(9.826260134749828E79d, 1.1155051E7d, 3.401775050104543E33d, 0.0d, 2.8772624126635964E38d, (-1.92580055599819E69d), (-8.39419851318388E54d), 116405.9998500075d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-5.5410335540602476E107d) + "'", double8 == (-5.5410335540602476E107d));
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-8.376312124597788E142d), 21009.0d, (double) 98, 2010.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.759779414256749E147d) + "'", double4 == (-1.759779414256749E147d));
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection61 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray60, orderDirection61, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection64 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray60, orderDirection64, false);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray48, orderDirection64, true);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray44, orderDirection64, false);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection74 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray73, orderDirection74, false);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray44, orderDirection74, false);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38, orderDirection74, false, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray0, orderDirection74, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + orderDirection61 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection61.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + orderDirection64 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection64.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + orderDirection74 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection74.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(2.1940812183982476E20d, 1360.1470508735442d, (-3.020383302338395E119d), 929377.4372207435d, (-5.718703196015772E45d), 474492.3840484359d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2.8070760929515838E125d) + "'", double6 == (-2.8070760929515838E125d));
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray10 = new float[] { (short) 1, (-1L) };
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray10);
        float[] floatArray14 = new float[] { (-1L), (byte) 10 };
        float[] floatArray18 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray14, floatArray18);
        float[] floatArray20 = null;
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(floatArray14, floatArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(floatArray6, floatArray14);
        float[] floatArray25 = new float[] { (-1L), (byte) 10 };
        float[] floatArray29 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray25, floatArray29);
        float[] floatArray33 = new float[] { (short) 1, (-1L) };
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray29, floatArray33);
        float[] floatArray37 = new float[] { (-1L), (byte) 10 };
        float[] floatArray41 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray37, floatArray41);
        float[] floatArray45 = new float[] { (short) 1, (-1L) };
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray41, floatArray45);
        float[] floatArray49 = new float[] { (-1L), (byte) 10 };
        float[] floatArray53 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray49, floatArray53);
        float[] floatArray57 = new float[] { (short) 1, (-1L) };
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray53, floatArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(floatArray45, floatArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(floatArray29, floatArray57);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(floatArray14, floatArray57);
        float[] floatArray64 = new float[] { (-1L), (byte) 10 };
        float[] floatArray68 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray64, floatArray68);
        float[] floatArray70 = null;
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equals(floatArray64, floatArray70);
        float[] floatArray74 = new float[] { (-1L), (byte) 10 };
        float[] floatArray78 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray74, floatArray78);
        float[] floatArray82 = new float[] { (short) 1, (-1L) };
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray78, floatArray82);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray64, floatArray78);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(floatArray57, floatArray64);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(floatArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray82), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray83);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(doubleArray72, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray72);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -19 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-919.0, 203.0, 1010.0]");
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray0 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] {};
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray17, doubleArray48);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray48, doubleArray73);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray73);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray73, orderDirection77, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray0, orderDirection77, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(orderDirectionArray0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-890.0, 199.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + orderDirection77 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection77.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 0);
        double[] doubleArray13 = null;
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray13);
        double[] doubleArray19 = new double[] { 1, 1, 10 };
        double[] doubleArray23 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray23);
        double[] doubleArray29 = new double[] { 1, 1, 10 };
        double[] doubleArray33 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray33);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray34);
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equals(doubleArray23, doubleArray34);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray34);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray34);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray34, 100);
        double double41 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray34);
        double double42 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1360.1470508735442d + "'", double41 == 1360.1470508735442d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1360.1470508735442d + "'", double42 == 1360.1470508735442d);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray8, (double) 100L);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8, 0);
        double[] doubleArray39 = new double[] { 1, 1, 10 };
        double[] doubleArray43 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray43);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray43);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray45, (int) (byte) 0);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray75);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equals(doubleArray64, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray64);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray56, (double) 100L);
        double[][] doubleArray81 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray80, doubleArray81);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray47, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray34, doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray42);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray42);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray10, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(21009.0d, doubleArray72);
        double double80 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[21009.0, 21009.0, 210090.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 212180.4992500489d + "'", double80 == 212180.4992500489d);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray19, (double) (byte) 1);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray43, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray77 = new double[] { 1, 1, 10 };
        double[] doubleArray81 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray81);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray82);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equals(doubleArray71, doubleArray82);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray62, doubleArray82);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray82, 0);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray82);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.scale(3.780478449848133E29d, doubleArray19);
        java.lang.Class<?> wildcardClass90 = doubleArray19.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-3.402430604863319E32, 7.560956899696265E31, 3.7804784498481325E32]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, 100);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray51);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray42, doubleArray51);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray73);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.equals(doubleArray62, doubleArray73);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray88 = new double[] { 1, 1, 10 };
        double[] doubleArray92 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray88, doubleArray92);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray92);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray92);
        double double96 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray73);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray51, doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.5293309841224786E247d, doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.3763978857102308E250, 3.058661968244957E249, 1.5293309841224784E250]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1360.1470508735442d + "'", double96 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-9000.0, 2900.0, 9800.0, -1000.0, 0.0]");
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray54);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray37, doubleArray56);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray76);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equals(doubleArray65, doubleArray76);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray56, doubleArray76);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-900.0, 200.0, 1000.0]");
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        double double42 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray29);
        int[] intArray43 = new int[] {};
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray43, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 1);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int int61 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray60);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray51, (int) (short) 100);
        int[] intArray64 = new int[] {};
        int[] intArray69 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 1);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78, (int) (short) 1);
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray81);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) 100);
        double double85 = org.apache.commons.math3.util.MathArrays.distance(intArray51, intArray72);
        int int86 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray51);
        int[] intArray87 = new int[] {};
        int[] intArray92 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int93 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray87, intArray92);
        int[] intArray95 = org.apache.commons.math3.util.MathArrays.copyOf(intArray92, (int) (short) 1);
        double double96 = org.apache.commons.math3.util.MathArrays.distance(intArray29, intArray95);
        int[] intArray98 = org.apache.commons.math3.util.MathArrays.copyOf(intArray95, 100);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection27, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection30, false);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray14, orderDirection30, true);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray14);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray35, 2111.0d);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray66);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(doubleArray55, doubleArray66);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray55);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (double) 100L);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(3600.0d, doubleArray47);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray35, doubleArray47);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (-273300.0d));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1105.7619047619048, -0.0, 1005.2380952380952]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-32400.0, 7200.0, 36000.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[3.3950617283950616E-4, 0.0, -2.777777777777778E-4]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[819900.0, -182200.0, -911000.0]");
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray9);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray11, (int) (byte) 0);
        double[] doubleArray18 = new double[] { 1, 1, 10 };
        double[] doubleArray22 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray22);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray31);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double double67 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray31, doubleArray53);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2165.0d, doubleArray53);
        double double69 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray11, doubleArray53);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.759779414256749E147d), doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.759779414256749E148, -1.759779414256749E147, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[21650.0, -2165.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-218665.0d) + "'", double69 == (-218665.0d));
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray19);
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray21);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray21, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray0, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 14.866068747318506d + "'", double22 == 14.866068747318506d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-10.0, 1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray17, doubleArray48);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray48, doubleArray73);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray73);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray73, orderDirection77, false);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.scale(4.533823502911814d, doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-890.0, 199.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + orderDirection77 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection77.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-4080.4411526206327, 906.7647005823628, 4533.823502911814]");
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray10 = new float[] { (short) 1, (-1L) };
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray10);
        float[] floatArray14 = new float[] { (-1.0f), 100.0f };
        float[] floatArray17 = new float[] { (-1L), (byte) 10 };
        float[] floatArray21 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray17, floatArray21);
        float[] floatArray25 = new float[] { (short) 1, (-1L) };
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray21, floatArray25);
        float[] floatArray29 = new float[] { (-1L), (byte) 10 };
        float[] floatArray33 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray29, floatArray33);
        float[] floatArray35 = null;
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equals(floatArray29, floatArray35);
        boolean boolean37 = org.apache.commons.math3.util.MathArrays.equals(floatArray21, floatArray29);
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equals(floatArray14, floatArray29);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equals(floatArray10, floatArray29);
        float[] floatArray42 = new float[] { (-1L), (byte) 10 };
        float[] floatArray46 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray42, floatArray46);
        float[] floatArray48 = null;
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(floatArray42, floatArray48);
        float[] floatArray52 = new float[] { (-1L), (byte) 10 };
        float[] floatArray56 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray52, floatArray56);
        float[] floatArray60 = new float[] { (short) 1, (-1L) };
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray56, floatArray60);
        float[] floatArray64 = new float[] { (-1L), (byte) 10 };
        float[] floatArray68 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray64, floatArray68);
        float[] floatArray70 = null;
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equals(floatArray64, floatArray70);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equals(floatArray56, floatArray64);
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equals(floatArray42, floatArray56);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(floatArray10, floatArray42);
        float[] floatArray75 = null;
        float[] floatArray78 = new float[] { (-1L), (byte) 10 };
        float[] floatArray82 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray78, floatArray82);
        float[] floatArray86 = new float[] { (short) 1, (-1L) };
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray82, floatArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(floatArray75, floatArray82);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray42, floatArray75);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray82), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(floatArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray86), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        double double64 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray49);
        double double65 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray10, doubleArray49);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.5183866289549949E7d), doubleArray10);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.scale((-1.8381134056869864E7d), doubleArray10);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray68, 6.469126606706673E72d);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        double[] doubleArray86 = new double[] { 1, 1, 10 };
        double[] doubleArray90 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray86, doubleArray90);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray91);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equals(doubleArray80, doubleArray91);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray91);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray91);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray91, 100);
        double double98 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.3665479660594955E8, -3.0367732579099897E7, -1.518386628954995E8]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.04987562112089d + "'", double64 == 10.04987562112089d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-92.0d) + "'", double65 == (-92.0d));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-2.5118701359282435E15, 5.581933635396096E14, 2.7909668176980485E15]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.940737982012002E73, 4.312751071137781E72, 2.156375535568891E73]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 2.932987825279887E73d + "'", double98 == 2.932987825279887E73d);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray38, doubleArray58);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray58, 0);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray67);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray73);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.equals(doubleArray58, doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(9.207239720523508E39d, doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[9.207239720523508E39, 9.207239720523508E39, 9.207239720523509E40]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(doubleArray20, doubleArray31);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray31);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray42, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray72);
        double double76 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray31, doubleArray53);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(13.601470508735444d, doubleArray31);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray11, doubleArray31);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.scale(1.7658161307194125E7d, doubleArray31);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray79, (-1.02040068542142E52d));
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray79, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-12241.3234578619, 2720.294101747089, 13601.470508735443]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-12241.3234578619, 2720.294101747089, 136014.70508735444]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-2.1615926423246478E11, 4.8035392051658844E10, 2.401769602582942E11]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[3.06120205626426E52, -6.802671236142802E51, -3.4013356180714005E52]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-30.000000000000007, 6.666666666666668, 33.333333333333336]");
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray47);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray50, 100);
        int[] intArray53 = new int[] {};
        int[] intArray58 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray58);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (short) 1);
        int[] intArray62 = new int[] {};
        int[] intArray67 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int68 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray62, intArray67);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray67, (int) (short) 1);
        int int71 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray70);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray61, 0);
        int[] intArray74 = new int[] {};
        int[] intArray79 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int80 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray74, intArray79);
        int[] intArray82 = org.apache.commons.math3.util.MathArrays.copyOf(intArray79, (int) (short) 1);
        int int83 = org.apache.commons.math3.util.MathArrays.distance1(intArray73, intArray82);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray82);
        int int85 = org.apache.commons.math3.util.MathArrays.distance1(intArray50, intArray82);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) ' ', 1.8325905930266478E95d, 3.655405393522434E85d, 0.0d, (-2.2886347112689247E108d), (-1.6689060509564007E32d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.819516318065563E140d + "'", double6 == 3.819516318065563E140d);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray39);
        double[] doubleArray46 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.scale((-2.598166562713278E28d), doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10000.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-2.598166562713278E32, -0.0, -2.598166562713278E30]");
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray23, 10.0d);
        double[] doubleArray29 = new double[] { 1, 1, 10 };
        double[] doubleArray33 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray29);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray44);
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray46, (int) (short) 100);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray23, doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-30.0, 6.666666666666666, 33.333333333333336]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 14.866068747318506d + "'", double47 == 14.866068747318506d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-10.0, 1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[30.0, -9.666666666666666, -32.66666666666667, 3.3333333333333335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 100);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray18, doubleArray63);
        double[] doubleArray66 = null;
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray66);
        double[] doubleArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double69 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray66, doubleArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray37);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equals(doubleArray26, doubleArray37);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray57);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray49, (double) 100L);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray49);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray7, doubleArray37);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray7, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray17, doubleArray48);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray48, 144652.08102413287d);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray74);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray76, (int) (byte) 0);
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray76);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray76);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (1 >= -0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 20.09975124224178d + "'", double79 == 20.09975124224178d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray4);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray39);
        double double41 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray27, doubleArray39);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray39, orderDirection42, true);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray52, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray82);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray82);
        double[] doubleArray89 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray85, doubleArray89);
        double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray4, doubleArray39);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray92);
        double double94 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray92);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2111.0d + "'", double41 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1427.5857242211412d + "'", double91 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray4);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) (byte) 1);
        double double36 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray35);
        double[][] doubleArray37 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray35, doubleArray37);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray11, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4.533823502911814d + "'", double36 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 10.0, 100.0]");
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        double[] doubleArray0 = null;
        double[] doubleArray7 = new double[] { 1, 1, 10 };
        double[] doubleArray11 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray11);
        double[] doubleArray17 = new double[] { 1, 1, 10 };
        double[] doubleArray21 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray22);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(doubleArray11, doubleArray22);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray22);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22, 100);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-7.6769830141116774E18d), doubleArray28);
        double[] doubleArray32 = null;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray28, doubleArray32);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(doubleArray0, doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-6.90928471270051E21, 1.5353966028223354E21, 7.676983014111678E21, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray36 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int37 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, 0);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48);
        int int63 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray62);
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62);
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 98 + "'", int37 == 98);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 98 + "'", int38 == 98);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1]");
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        double double42 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray29);
        int[] intArray43 = new int[] {};
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray43, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 1);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int int61 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray60);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray51, (int) (short) 100);
        int[] intArray64 = new int[] {};
        int[] intArray69 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 1);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78, (int) (short) 1);
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray81);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) 100);
        double double85 = org.apache.commons.math3.util.MathArrays.distance(intArray51, intArray72);
        int int86 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray51);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (byte) 100);
        int[] intArray90 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88, (int) (byte) 100);
        int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88, 0);
        int[] intArray94 = org.apache.commons.math3.util.MathArrays.copyOf(intArray92, 235);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double double35 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray29);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray29, 1363.329967155091d);
        double double38 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale(2.3726213090057078E14d, doubleArray37);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray45);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray45);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray52, 0.0d);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale((-2165.0d), doubleArray52);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray39, doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1360.1470508735442d + "'", double35 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 6181.097447311743d + "'", double38 == 6181.097447311743d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.7039971938346611E17, 2.1564438208521472E17, 1.07822191042607347E18]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-21650.0, -21650.0, -216500.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.7039971938348774E17, 2.15644382085193056E17, 1.07822191042585702E18]");
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        double double32 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray30);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray30, orderDirection33, true);
        double[] doubleArray39 = new double[] { 1, 1, 10 };
        double[] doubleArray43 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray43);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray54);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(doubleArray43, doubleArray54);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray73);
        double[] doubleArray80 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray76, doubleArray80);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray80);
        double[] doubleArray87 = new double[] { 1, 1, 10 };
        double[] doubleArray91 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray87, doubleArray91);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray87);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray87);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray87);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.scale(2068.0d, doubleArray30);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.scale(3.0855098392300684E13d, doubleArray30);
        double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray30);
        java.lang.Class<?> wildcardClass99 = doubleArray98.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2111.0d + "'", double32 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1427.5857242211412d + "'", double82 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-901.0, 199.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-1861200.0, 413600.0, 2068000.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-2.7769588553070616E16, 6.171019678460137E15, 3.0855098392300684E16]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray41);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray83);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray41, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2.3726213090057078E14d, doubleArray8);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[2.372621309005708E15, -2.3726213090057078E14, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[2.372621309005708E15, -2.3726213090057078E14, 0.0]");
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray15, orderDirection16, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection19 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray15, orderDirection19, false);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray3, orderDirection19, true);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray28);
        double[] doubleArray39 = new double[] { 1, 1, 10 };
        double[] doubleArray43 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray43);
        double double45 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray35, doubleArray39);
        double double46 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray3, doubleArray39);
        double double47 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (1 >= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + orderDirection19 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection19.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1020.0d + "'", double45 == 1020.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.099504938362077d + "'", double47 == 10.099504938362077d);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray61);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray64);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) 'a');
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray75, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray19, doubleArray86);
        java.lang.Class<?> wildcardClass90 = doubleArray19.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-810000.0, -40000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double double35 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray29);
        double[] doubleArray39 = new double[] { 1, 1, 10 };
        double[] doubleArray43 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray43);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        double double46 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray29, doubleArray45);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray82);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray65, doubleArray84);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection86 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray65, orderDirection86, true);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-8.209137999113313E130d), doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1360.1470508735442d + "'", double35 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 990.0d + "'", double46 == 990.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection86 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection86.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-0.0, -0.0, -0.0, -0.0, -0.0]");
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20);
        int[] intArray22 = new int[] {};
        int[] intArray27 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray22, intArray27);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (short) 1);
        int[] intArray31 = new int[] {};
        int[] intArray36 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray31, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (short) 1);
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray39);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, 0);
        int[] intArray43 = new int[] {};
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray43, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 1);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int int61 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray60);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray51, (int) (short) 100);
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63);
        double double65 = org.apache.commons.math3.util.MathArrays.distance(intArray42, intArray63);
        int int66 = org.apache.commons.math3.util.MathArrays.distance1(intArray20, intArray63);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray9);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray31, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray70);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equals(doubleArray59, doubleArray70);
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray50, doubleArray70);
        double[] doubleArray77 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[] doubleArray81 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[][] doubleArray82 = new double[][] { doubleArray77, doubleArray81 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray50, doubleArray82);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray9, orderDirection12, doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[13.601470508735444, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[13.601470508735444, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.405900735433483E96d), 2.8772624126635964E38d, (-1.9477175745264727E145d), 9319.084308623767d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.8150944286400434E149d) + "'", double4 == (-1.8150944286400434E149d));
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray9, orderDirection10, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray9, orderDirection13, false);
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection13, true);
        double[] doubleArray21 = new double[] { 1, 1, 10 };
        double[] doubleArray25 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray25);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection34 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray33, orderDirection34, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray33, orderDirection37, false);
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray21, orderDirection37, true);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection37, false);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray60);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray62, doubleArray81);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection83 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray62, orderDirection83, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray86 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection37, orderDirection83 };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection87 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray86, orderDirection87, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + orderDirection34 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection34.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection83 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection83.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(orderDirectionArray86);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray40, (double) 100L);
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray64);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray64, orderDirection66, false, false);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.scale(21009.0d, doubleArray64);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray71, 0.0d);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray76, orderDirection77, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray71, orderDirection77, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (-6,302,700 <= 1,400,600)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 439.780879782446d + "'", double65 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-6302700.0, 1400600.0, 7003000.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + orderDirection77 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection77.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(4.451729603812351E60d, (-5.644230165222219E15d), 100.0d, (double) (byte) 100, 1.2503081079148144E103d, 2.4940105768767026E67d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.1182816454942446E170d + "'", double6 == 3.1182816454942446E170d);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(3.0341344585090943E22d, 47618.74825108279d, 2.3587411210820586E211d, (-1.0736316432238322E99d), 8.5815885820656E40d, (-1101.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.NEGATIVE_INFINITY + "'", double6 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (short) 1);
        int[] intArray16 = new int[] {};
        int[] intArray21 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int22 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray16, intArray21);
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (short) 1);
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray15, intArray24);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15);
        int[] intArray27 = new int[] {};
        int[] intArray32 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int33 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray32);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32, (int) (short) 10);
        int int36 = org.apache.commons.math3.util.MathArrays.distance1(intArray15, intArray32);
        double double37 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray15);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray10 = new float[] { (short) 1, (-1L) };
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray10);
        float[] floatArray14 = new float[] { (-1L), (byte) 10 };
        float[] floatArray18 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray14, floatArray18);
        float[] floatArray22 = new float[] { (short) 1, (-1L) };
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray18, floatArray22);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(floatArray10, floatArray22);
        float[] floatArray27 = new float[] { (-1L), (byte) 10 };
        float[] floatArray31 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray27, floatArray31);
        float[] floatArray35 = new float[] { (short) 1, (-1L) };
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray31, floatArray35);
        float[] floatArray39 = new float[] { (-1L), (byte) 10 };
        float[] floatArray43 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray39, floatArray43);
        float[] floatArray45 = null;
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray45);
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equals(floatArray31, floatArray39);
        float[] floatArray50 = new float[] { (-1L), (byte) 10 };
        float[] floatArray54 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray50, floatArray54);
        float[] floatArray56 = null;
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equals(floatArray50, floatArray56);
        float[] floatArray60 = new float[] { (-1L), (byte) 10 };
        float[] floatArray64 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray60, floatArray64);
        float[] floatArray68 = new float[] { (short) 1, (-1L) };
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray64, floatArray68);
        float[] floatArray72 = new float[] { (-1L), (byte) 10 };
        float[] floatArray76 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray72, floatArray76);
        float[] floatArray78 = null;
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(floatArray72, floatArray78);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(floatArray64, floatArray72);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(floatArray50, floatArray64);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equals(floatArray31, floatArray50);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(floatArray10, floatArray50);
        float[] floatArray84 = null;
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray10, floatArray84);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray5);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray28);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        double double42 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray28, doubleArray40);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray40, orderDirection43, true);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray83);
        double[] doubleArray90 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray86, doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray90);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray5, doubleArray40);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray93);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(145.68802284333466d, doubleArray93);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray93);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2111.0d + "'", double42 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1427.5857242211412d + "'", double92 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-0.0, 0.0, 0.0]");
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 1);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray18);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray18);
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray20);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, (int) (short) 100);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray23, 9319.084308623767d);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray55);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equals(doubleArray44, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray44);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray36, (double) 100L);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray36);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray36);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray36, (int) (byte) 10);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray25, doubleArray36);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 100 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 14.866068747318506d + "'", double21 == 14.866068747318506d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-10.0, 1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10354.538120693074, -1035.4538120693076, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-900.0, 200.0, 1000.0]");
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray8 = null;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray8);
        float[] floatArray12 = new float[] { (-1L), (byte) 10 };
        float[] floatArray16 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray12, floatArray16);
        float[] floatArray20 = new float[] { (short) 1, (-1L) };
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray16, floatArray20);
        float[] floatArray24 = new float[] { (-1L), (byte) 10 };
        float[] floatArray28 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray24, floatArray28);
        float[] floatArray32 = new float[] { (short) 1, (-1L) };
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray28, floatArray32);
        float[] floatArray36 = new float[] { (-1L), (byte) 10 };
        float[] floatArray40 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray36, floatArray40);
        float[] floatArray42 = null;
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(floatArray36, floatArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(floatArray28, floatArray36);
        float[] floatArray47 = new float[] { (-1L), (byte) 10 };
        float[] floatArray51 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray47, floatArray51);
        float[] floatArray55 = new float[] { (short) 1, (-1L) };
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray51, floatArray55);
        float[] floatArray59 = new float[] { (-1L), (byte) 10 };
        float[] floatArray63 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray59, floatArray63);
        float[] floatArray65 = null;
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(floatArray59, floatArray65);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(floatArray51, floatArray59);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray36, floatArray59);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray16, floatArray36);
        float[] floatArray72 = new float[] { (-1L), (byte) 10 };
        float[] floatArray76 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray72, floatArray76);
        float[] floatArray80 = new float[] { (short) 1, (-1L) };
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray76, floatArray80);
        float[] floatArray84 = new float[] { (-1L), (byte) 10 };
        float[] floatArray88 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray84, floatArray88);
        float[] floatArray90 = null;
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(floatArray84, floatArray90);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(floatArray76, floatArray84);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equals(floatArray36, floatArray76);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray8, floatArray36);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(floatArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray80), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(floatArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray84), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray88), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray18, doubleArray49);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray49, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((-2165.0d), doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray81);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray76, doubleArray81);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray76, (int) (byte) 100);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray90);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray90, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray93);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -890 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-890.0, 199.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1926850.0, -430835.0, -2165000.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-890.0, 199.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[890.0, -199.0, -1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-890.0]");
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray6);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray12);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.7246705822717612E15d, doubleArray13);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.scale((-1.2170120134952047E22d), doubleArray13);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-2.4788709196896968E29d), doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-4.275235752437766E44, -4.275235752437766E44, -4.275235752437766E45]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-2.098944817946503E37, -2.098944817946503E37, -2.098944817946503E38]");
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray71);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray71);
        double[] doubleArray78 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray74, doubleArray78);
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray78);
        double[] doubleArray85 = new double[] { 1, 1, 10 };
        double[] doubleArray89 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray85, doubleArray89);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray85);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray85);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray85);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection94 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray85, orderDirection94, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (1 >= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1427.5857242211412d + "'", double80 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-901.0, 199.0, 990.0]");
        org.junit.Assert.assertTrue("'" + orderDirection94 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection94.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        java.lang.Class<?> wildcardClass42 = longArray35.getClass();
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray21);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(doubleArray10, doubleArray21);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray40);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(474492.3840484359d, doubleArray40);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-3.2747201721782604E59d), doubleArray40);
        double double48 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.5538297815883674E66, 1.5538297815883672E65, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.561579604135653E66d + "'", double48 == 1.561579604135653E66d);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection3 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean5 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection3, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection6 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean8 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection6, true);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray21 = new double[] { 1, 1, 10 };
        double[] doubleArray25 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray25);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray25);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray32);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray32);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray58);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray58, (double) (byte) 1);
        double double64 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray63);
        double[][] doubleArray65 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray63, doubleArray65);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray39, doubleArray65);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray16, doubleArray65);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection79 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray78, orderDirection79, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection82 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray78, orderDirection82, false);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray71, orderDirection82, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection87 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray71, orderDirection87, false);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16, orderDirection87, false, false);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection87, true);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + orderDirection3 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection3.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + orderDirection6 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection6.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4.533823502911814d + "'", double64 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + orderDirection79 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection79.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + orderDirection82 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection82.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + orderDirection87 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection87.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray71);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray71);
        double double75 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray30, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(13.601470508735444d, doubleArray30);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray10, doubleArray30);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray30, 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-12241.3234578619, 2720.294101747089, 13601.470508735443]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-12241.3234578619, 2720.294101747089, 136014.70508735444]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray2 = new int[] {};
        int[] intArray7 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int8 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray2, intArray7);
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (short) 1);
        int[] intArray11 = new int[] {};
        int[] intArray16 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int17 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray11, intArray16);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16, (int) (short) 1);
        int int20 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray19);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int int40 = org.apache.commons.math3.util.MathArrays.distance1(intArray19, intArray38);
        int[] intArray41 = new int[] {};
        int[] intArray46 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray41, intArray46);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (short) 1);
        int[] intArray50 = new int[] {};
        int[] intArray55 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray55);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray55, (int) (short) 1);
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray58);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        double double67 = org.apache.commons.math3.util.MathArrays.distance(intArray58, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) ' ');
        double double73 = org.apache.commons.math3.util.MathArrays.distance(intArray19, intArray69);
        double double74 = org.apache.commons.math3.util.MathArrays.distance(intArray1, intArray19);
        int[] intArray76 = org.apache.commons.math3.util.MathArrays.copyOf(intArray1, 0);
        int[] intArray77 = new int[] {};
        int[] intArray82 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int83 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray77, intArray82);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray82, (int) (short) 1);
        int[] intArray92 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int93 = org.apache.commons.math3.util.MathArrays.distance1(intArray85, intArray92);
        int int94 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray92);
        int[] intArray96 = org.apache.commons.math3.util.MathArrays.copyOf(intArray1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int97 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 98 + "'", int93 == 98);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[]");
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(9319.084308623767d, 2068.0d, (-1.3755656043295059E12d), (-4.365638679254789E96d), 1.8424009051655974E39d, (double) 10);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 6.005222408113379E108d + "'", double6 == 6.005222408113379E108d);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray21);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(doubleArray10, doubleArray21);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(doubleArray32, doubleArray43);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray43);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray43);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray66);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(doubleArray55, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray85);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray43, doubleArray88);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray10, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.scale((-2.613107296291178E10d), doubleArray88);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.2114525348282044E23d), doubleArray88);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(0.0d, doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[2.3779276396249723E13, -5.252345665545268E12, -2.613107296291178E13]");
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray42);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(0.0d, doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray55, (double) 'a');
        double double58 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray55);
        java.lang.Class<?> wildcardClass59 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-291.0, 64.66666666666667, 323.3333333333333]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1346.545580364809d + "'", double58 == 1346.545580364809d);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double double31 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray8);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray70);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray70);
        double[] doubleArray77 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray73, doubleArray77);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray77);
        double double80 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray77);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray77);
        double[] doubleArray82 = null;
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 13.601470508735444d + "'", double31 == 13.601470508735444d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10000.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 100.00499987500625d + "'", double80 == 100.00499987500625d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-109.0, 2.0, 9.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray69);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray71, doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray91);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, (int) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 10.0d + "'", double92 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[10.0]");
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(21009.0d, 4.4034347793448465E75d, 6.469126606706673E72d, (-2.8132391400032325E191d), 79.0d, (-2.5043938381010786E8d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.8199200171623512E264d) + "'", double6 == (-1.8199200171623512E264d));
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(9.207239720523508E39d, 3.1411498696267944E34d, (-6.362785300226671E114d), (double) (byte) 100, 1427.5857242211412d, (-5.232809859895707E66d), (-2.3520815078818308E81d), (-2.554111747075503E77d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 6.007479009360047E158d + "'", double8 == 6.007479009360047E158d);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 1);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 1);
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray46, intArray55);
        int int57 = org.apache.commons.math3.util.MathArrays.distance1(intArray36, intArray55);
        int[] intArray58 = new int[] {};
        int[] intArray63 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int64 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray63);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (short) 1);
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray36, intArray63);
        double double68 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray63);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, 235);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray42);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray42);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale(1360.1470508735442d, doubleArray42);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, 0);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray71, doubleArray81);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-12241.323457861898, 2720.2941017470885, 13601.470508735441]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray38, 100.0d);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray54, 111.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray54);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (111.111 >= -11.111)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[111.11111111111111, -11.11111111111111, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[123.33333333333334, -12.333333333333332, 0.0]");
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        long[] longArray5 = new long[] { (short) 100, (byte) 0, 0L, 100L, ' ' };
        long[] longArray11 = new long[] { (short) 100, (byte) 0, 0L, 100L, ' ' };
        long[] longArray17 = new long[] { (short) 100, (byte) 0, 0L, 100L, ' ' };
        long[][] longArray18 = new long[][] { longArray5, longArray11, longArray17 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray18);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray18);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray18);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray18);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[100, 0, 0, 100, 32]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[100, 0, 0, 100, 32]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[100, 0, 0, 100, 32]");
        org.junit.Assert.assertNotNull(longArray18);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection27, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection30, false);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray14, orderDirection30, true);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray14);
        double double36 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray35);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray55, doubleArray74);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection76 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray55, orderDirection76, true);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray35, doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 14.866068747318506d + "'", double36 == 14.866068747318506d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection76 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection76.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-11.0, 0.0, -10.0]");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection27, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection30, false);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray14, orderDirection30, true);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray14);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray40);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray40);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray10, doubleArray40);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray58);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray76, orderDirection77, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection80 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray76, orderDirection80, false);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray64, orderDirection80, true);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + orderDirection77 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection77.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + orderDirection80 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection80.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[110.0, -11.0, 100.0, -10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[110.0, -11.0, 100.0, -10.0, 0.0]");
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        double[] doubleArray7 = new double[] { 1, 1, 10 };
        double[] doubleArray11 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray7);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(111.0d, doubleArray7);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.552472386491933E14d), doubleArray14);
        double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14);
        double double17 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray14);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.scale(7.22460913395122E72d, doubleArray14);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray14, 4.9562245064804365E153d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-0.0, -0.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-0.0, -0.0, -0.0]");
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray51);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray42, doubleArray51);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, 1.2459825039216539E7d);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, 235);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.scale((-1.0570558719722057E74d), doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray58, (int) (short) 100);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray80);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equals(doubleArray69, doubleArray80);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray80);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray80, (double) (byte) 1);
        double double86 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray85);
        double[][] doubleArray87 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray85, doubleArray87);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray61, doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.3844250043573933E7, -1384425.0043573931, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 4.533823502911814d + "'", double86 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray42, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray81);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray81);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray61, doubleArray81);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray81, 0);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray81);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) '#');
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray61);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray64);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray88 = new double[] { 1, 1, 10 };
        double[] doubleArray92 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray88, doubleArray92);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray93);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equals(doubleArray82, doubleArray93);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray82);
        double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray74, (double) 100L);
        double double99 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 1813.5294011647256d + "'", double99 == 1813.5294011647256d);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) 100L);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray31);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray19, doubleArray64);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-2.667039156913762E7d), doubleArray64);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (26,670,391.569 >= -0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-2.667039156913762E8, 2.667039156913762E7, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-2.667039156913762E8, 2.667039156913762E7, -0.0]");
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray21);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(doubleArray10, doubleArray21);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray21);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray21, 100);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection30, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray8, (double) 100L);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray51, doubleArray70);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray85 = new double[] { 1, 1, 10 };
        double[] doubleArray89 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray85, doubleArray89);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray90);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(doubleArray79, doubleArray90);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray70, doubleArray90);
        double double94 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray8, doubleArray90);
        double double95 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 990.0d + "'", double94 == 990.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1360.1470508735442d + "'", double95 == 1360.1470508735442d);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.7246705822717612E15d, doubleArray11);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(doubleArray20, doubleArray31);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray31);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray62);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equals(doubleArray51, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray51);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray43, (double) 100L);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray43);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray31, doubleArray76);
        double[] doubleArray79 = null;
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray79);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(doubleArray11, doubleArray31);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray31, (int) (byte) 1);
        double[] doubleArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double85 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray83, doubleArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.7246705822717612E15, 1.7246705822717612E15, 1.7246705822717612E16]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-900.0]");
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10, (-3.5851885979534E128d), (-1.0d), (double) 98, 22457.292802116644d, (-183792.33961872238d), 1.5192276385067893E88d, (double) 0.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-3.5851885979534E129d) + "'", double8 == (-3.5851885979534E129d));
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray61);
        double double65 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray20, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(13.601470508735444d, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.scale((-3.2949139463354136E89d), doubleArray20);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray20, (-2.8070760929515838E125d));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-12241.3234578619, 2720.294101747089, 13601.470508735443]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[4.033410738291202E93, -8.963134973980449E92, -4.481567486990224E93]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[8.421228278854752E125, -1.8713840619677228E125, -9.356920309838612E125]");
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray8 = null;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray8);
        float[] floatArray12 = new float[] { (-1L), (byte) 10 };
        float[] floatArray16 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray12, floatArray16);
        float[] floatArray20 = new float[] { (short) 1, (-1L) };
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray16, floatArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray16);
        float[] floatArray25 = new float[] { (-1L), (byte) 10 };
        float[] floatArray29 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray25, floatArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray25);
        float[] floatArray32 = null;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray25, floatArray32);
        float[] floatArray34 = null;
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray25, floatArray34);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray18, doubleArray63);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray44);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 1);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52);
        int int57 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray56);
        int[] intArray58 = new int[] {};
        int[] intArray63 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int64 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray63);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (short) 1);
        int[] intArray73 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int74 = org.apache.commons.math3.util.MathArrays.distance1(intArray66, intArray73);
        int[] intArray76 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (byte) 100);
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray73);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 98 + "'", int74 == 98);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1, 52, 1, 32, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 98 + "'", int77 == 98);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray57);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray65);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray65);
        int[] intArray71 = new int[] {};
        int[] intArray76 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray71, intArray76);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76, (int) (short) 1);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76);
        int int81 = org.apache.commons.math3.util.MathArrays.distance1(intArray65, intArray80);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80, (int) (short) 10);
        int[] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int85 = org.apache.commons.math3.util.MathArrays.distance1(intArray80, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (double) 100L);
        double double66 = org.apache.commons.math3.util.MathArrays.distance(doubleArray10, doubleArray65);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.scale(1.2423244926866538E15d, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(9.226011509507019E11d, doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-2.7678034528521056E14, 6.150674339671346E13, 3.075337169835673E14]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 439.780879782446d + "'", double66 == 439.780879782446d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-3.726973478059961E17, 8.2821632845776928E16, 4.1410816422888454E17]");
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray5);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray5);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(doubleArray20, doubleArray31);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray31);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) (byte) 1);
        double double37 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray36);
        double[][] doubleArray38 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray36, doubleArray38);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray12, doubleArray38);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray45);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray45);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray71);
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equals(doubleArray60, doubleArray71);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray71);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray71, (double) (byte) 1);
        double double77 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray76);
        double[][] doubleArray78 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray76, doubleArray78);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray52, doubleArray78);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.3838648976946252E105d), doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (-13,838,648,976,946,251,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 >= -13,838,648,976,946,251,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.3838648976946251E106, -1.3838648976946251E106, -1.3838648976946251E107]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4.533823502911814d + "'", double37 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 4.533823502911814d + "'", double77 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray5);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray5);
        double[] doubleArray17 = new double[] { 1, 1, 10 };
        double[] doubleArray21 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray21);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray32);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(doubleArray21, doubleArray32);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray51);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray51);
        double[] doubleArray58 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray54, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray58);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray5, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(88.21557489650559d, doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[882155.7489650559, 0.0, 8821.557489650559]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray42);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray42);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(doubleArray0, doubleArray68);
        double[] doubleArray70 = null;
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray68, doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray48);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        double double62 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray48, doubleArray60);
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection70 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray69, orderDirection70, false);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray48, orderDirection70, true, false);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray48, (int) (short) 10);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray29, doubleArray77);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray77, 10.0d);
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray87, orderDirection88, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection91 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray87, orderDirection91, false);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray77, orderDirection91, false, false);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-5.9777683343670226E57d), doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray77);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -59,777,683,343,670,220,000,000,000,000,000,000,000,000,000,000,000,000,000,000 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2111.0d + "'", double62 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + orderDirection70 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection70.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-5.977768334367022E58, 5.9777683343670226E57, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[11.11111111111111, -1.1111111111111112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + orderDirection88 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection88.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + orderDirection91 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection91.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray10 = new float[] { (-1.0f), 100.0f };
        float[] floatArray13 = new float[] { (-1L), (byte) 10 };
        float[] floatArray17 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray13, floatArray17);
        float[] floatArray21 = new float[] { (short) 1, (-1L) };
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray17, floatArray21);
        float[] floatArray25 = new float[] { (-1L), (byte) 10 };
        float[] floatArray29 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray25, floatArray29);
        float[] floatArray31 = null;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray25, floatArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(floatArray17, floatArray25);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(floatArray10, floatArray25);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray25);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray18, doubleArray49);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray49, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((-2165.0d), doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray81);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray76, doubleArray81);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray76, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-890.0, 199.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1926850.0, -430835.0, -2165000.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-890.0, 199.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray48);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        double double62 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray48, doubleArray60);
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection70 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray69, orderDirection70, false);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray48, orderDirection70, true, false);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray48, (int) (short) 10);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray29, doubleArray77);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray77, 10.0d);
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray87, orderDirection88, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection91 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray87, orderDirection91, false);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray77, orderDirection91, false, false);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-5.0554510251207795E22d), doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2111.0d + "'", double62 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + orderDirection70 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection70.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-5.0554510251207793E23, 5.0554510251207795E22, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[11.11111111111111, -1.1111111111111112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + orderDirection88 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection88.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + orderDirection91 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection91.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray28);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray62);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equals(doubleArray51, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray51);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray43, (double) 100L);
        double[][] doubleArray68 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray67, doubleArray68);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray28, doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray6);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        double double43 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray29, doubleArray41);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray41, orderDirection44, true);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray65);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(doubleArray54, doubleArray65);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray84);
        double[] doubleArray91 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray87, doubleArray91);
        double double93 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray91);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray6, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-7.217129340870217E24d), doubleArray6);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-4.15140860596838E58d), doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2111.0d + "'", double43 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1427.5857242211412d + "'", double93 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-0.0, 0.0, 0.0]");
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray9);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray11, (int) (byte) 0);
        double[] doubleArray17 = new double[] { 1, 1, 10 };
        double[] doubleArray21 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray21);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray51, doubleArray70);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray85 = new double[] { 1, 1, 10 };
        double[] doubleArray89 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray85, doubleArray89);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray90);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(doubleArray79, doubleArray90);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray70, doubleArray90);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray32, doubleArray90);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equals(doubleArray11, doubleArray90);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.scale((-1.2170120134952046E23d), doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[1.2170120134952047E24, -1.2170120134952046E23, 0.0]");
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double double53 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray52);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray52, (int) (short) 10);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray59);
        double double66 = org.apache.commons.math3.util.MathArrays.distance(doubleArray52, doubleArray59);
        java.lang.Class<?> wildcardClass67 = doubleArray59.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2068.0d + "'", double53 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-19.0, 3.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 20.09975124224178d + "'", double66 == 20.09975124224178d);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray68);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray68);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray8, doubleArray72);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection74 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean77 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray8, orderDirection74, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-0.9, -2.0, Infinity]");
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-8.835989905008883E122d), (-2.8469134568462802E23d), 3.0341344585090943E22d, 1.855513131712105E113d, 3.1413526832245498E134d, 8.038986369571635E23d, 1.489257074440011E106d, 2.4215696632833603E43d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.525329143854799E158d + "'", double8 == 2.525329143854799E158d);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray44);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) 'a');
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray69);
        int[] intArray71 = new int[] {};
        int[] intArray76 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray71, intArray76);
        double double78 = org.apache.commons.math3.util.MathArrays.distance(intArray69, intArray76);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76);
        int int81 = org.apache.commons.math3.util.MathArrays.distance1(intArray49, intArray76);
        int[] intArray82 = new int[] {};
        int[] intArray87 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int88 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray82, intArray87);
        int[] intArray90 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87, (int) (short) 1);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87);
        int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87);
        double double93 = org.apache.commons.math3.util.MathArrays.distance(intArray49, intArray87);
        int[] intArray94 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = org.apache.commons.math3.util.MathArrays.copyOf(intArray94, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 100, 100, 35]");
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray37, orderDirection38, false);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16, orderDirection38, true, false);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, (int) (short) 10);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray45);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray55);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57, (int) (byte) 0);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray59, 0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray59);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray59);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray45, doubleArray64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 10 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray42, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray72);
        double[] doubleArray79 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray75, doubleArray79);
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray79);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (byte) 10, doubleArray79);
        double double83 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray79);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79, 98);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray79, 2068.0d);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray87, (-1.92580055599819E69d));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1000.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1427.5857242211412d + "'", double81 == 1427.5857242211412d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1000.0499987500625d + "'", double83 == 1000.0499987500625d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1000.0, 0.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[2047.5247524752476, 0.0, 20.475247524752476]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-1.906733223760584E69, -0.0, -1.906733223760584E67]");
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(2.2267871488170685E30d, (-5.677242965111985E65d), (-6.362785300226671E114d), 3.1182816454942446E170d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.9840956615917416E285d) + "'", double4 == (-1.9840956615917416E285d));
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray41, 10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.708270408017212E47d), doubleArray41);
        double[] doubleArray45 = null;
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray45);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, 1849908.0027625682d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray41);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -34,336,235,201,145,966,000,000,000,000,000,000,000,000,000,000,000 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.554526071295663E50, -3.4336235201145966E49, -1.708270408017212E50]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-910.0, 201.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-5784935.678742049, 1277771.5070628044, 6357072.174441813]");
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray70);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray70);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray70);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray10, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.scale(11.1665284679121d, doubleArray10);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-0.9, -2.0, Infinity]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-100.4987562112089, 22.3330569358242, 111.665284679121]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(2.303752319195026E28d, (-92.0d), 8.583023989821415E99d, 1.5460450237574002E8d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.3269741528253784E108d + "'", double4 == 1.3269741528253784E108d);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        double double42 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray29);
        int[] intArray43 = new int[] {};
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray43, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 1);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int int61 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray60);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray51, (int) (short) 100);
        int[] intArray64 = new int[] {};
        int[] intArray69 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 1);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78, (int) (short) 1);
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray81);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) 100);
        double double85 = org.apache.commons.math3.util.MathArrays.distance(intArray51, intArray72);
        int int86 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray51);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (byte) 100);
        int[] intArray90 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88, (int) (byte) 100);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        int[] intArray0 = new int[] {};
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 1);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray18);
        int[] intArray20 = new int[] {};
        int[] intArray25 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray25);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, (int) (short) 1);
        int[] intArray29 = new int[] {};
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 1);
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray37);
        int int39 = org.apache.commons.math3.util.MathArrays.distance1(intArray18, intArray37);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int[] intArray59 = new int[] {};
        int[] intArray64 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray59, intArray64);
        double double66 = org.apache.commons.math3.util.MathArrays.distance(intArray57, intArray64);
        int[] intArray67 = org.apache.commons.math3.util.MathArrays.copyOf(intArray64);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray64);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray68);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray68, (int) ' ');
        double double72 = org.apache.commons.math3.util.MathArrays.distance(intArray18, intArray68);
        double double73 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray18);
        int[] intArray75 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, 0);
        java.lang.Class<?> wildcardClass76 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray37, orderDirection38, false);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16, orderDirection38, true, false);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray45);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray9);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(doubleArray29, doubleArray40);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray29);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray21, (double) 100L);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(3600.0d, doubleArray21);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray11, doubleArray21);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale((-3.745353277432591E36d), doubleArray21);
        java.lang.Class<?> wildcardClass49 = doubleArray48.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-32400.0, 7200.0, 36000.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-32410.0, 7201.0, 36000.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.2134944618881596E41, -2.6966543597514656E40, -1.3483271798757328E41]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray21 = new int[] {};
        int[] intArray22 = new int[] {};
        int[] intArray27 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray22, intArray27);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (short) 1);
        int[] intArray31 = new int[] {};
        int[] intArray36 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray31, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (short) 1);
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray39);
        int[] intArray41 = new int[] {};
        int[] intArray46 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray41, intArray46);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (short) 1);
        int[] intArray50 = new int[] {};
        int[] intArray55 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray55);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray55, (int) (short) 1);
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray58);
        int int60 = org.apache.commons.math3.util.MathArrays.distance1(intArray39, intArray58);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int[] intArray70 = new int[] {};
        int[] intArray75 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int76 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray70, intArray75);
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray75, (int) (short) 1);
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray69, intArray78);
        int[] intArray80 = new int[] {};
        int[] intArray85 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int86 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray80, intArray85);
        double double87 = org.apache.commons.math3.util.MathArrays.distance(intArray78, intArray85);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray85);
        int[] intArray89 = org.apache.commons.math3.util.MathArrays.copyOf(intArray85);
        int[] intArray90 = org.apache.commons.math3.util.MathArrays.copyOf(intArray89);
        int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray89, (int) ' ');
        double double93 = org.apache.commons.math3.util.MathArrays.distance(intArray39, intArray89);
        double double94 = org.apache.commons.math3.util.MathArrays.distance(intArray21, intArray39);
        int int95 = org.apache.commons.math3.util.MathArrays.distance1(intArray20, intArray39);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 100);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int[] intArray70 = new int[] {};
        int[] intArray75 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int76 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray70, intArray75);
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray75, (int) (short) 1);
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray69, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 100);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(intArray48, intArray69);
        double double83 = org.apache.commons.math3.util.MathArrays.distance(intArray36, intArray69);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray87 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1]");
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int[] intArray37 = new int[] {};
        int[] intArray42 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int43 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray37, intArray42);
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray42, (int) (short) 1);
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray36, intArray45);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        double double54 = org.apache.commons.math3.util.MathArrays.distance(intArray45, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray24, intArray56);
        int[] intArray59 = new int[] {};
        int[] intArray64 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray59, intArray64);
        int[] intArray67 = org.apache.commons.math3.util.MathArrays.copyOf(intArray64, (int) (short) 1);
        int[] intArray68 = new int[] {};
        int[] intArray73 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int74 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray68, intArray73);
        int[] intArray76 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (short) 1);
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray67, intArray76);
        int[] intArray78 = new int[] {};
        int[] intArray83 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int84 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray78, intArray83);
        double double85 = org.apache.commons.math3.util.MathArrays.distance(intArray76, intArray83);
        int[] intArray86 = org.apache.commons.math3.util.MathArrays.copyOf(intArray83);
        int[] intArray87 = org.apache.commons.math3.util.MathArrays.copyOf(intArray83);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87);
        int[] intArray90 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87, (int) ' ');
        int int91 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray24, intArray87);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-3.4912951236194243E80d), 3.9069241870675704E35d, 100.0d, (-1058.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.3640225362659793E116d) + "'", double4 == (-1.3640225362659793E116d));
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.2503081079148144E103d, 5.144246533007413E265d, 3.6103273374458373E109d, (double) 0);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double double31 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray8);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray85 = new double[] { 1, 1, 10 };
        double[] doubleArray89 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray85, doubleArray89);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray90);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(doubleArray79, doubleArray90);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray79);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray71, (double) 100L);
        double double96 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray95);
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray8, doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 13.601470508735444d + "'", double31 == 13.601470508735444d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 439.780879782446d + "'", double96 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-92.0d), 0.0d, 3.655405393522434E85d, (double) 1, (-7.217129340870217E24d), (-8.376312124597788E142d), (-4.2035421686351696E21d), (-5.644230165222219E15d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 6.045292800272164E167d + "'", double8 == 6.045292800272164E167d);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray39, doubleArray59);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.scale(5.525048868831705E39d, doubleArray59);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.scale((-3.2949139463354136E89d), doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-4.972543981948534E42, 1.1050097737663408E42, 5.5250488688317045E42]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.6384104514888456E132, -3.640912114419656E131, -1.8204560572098284E132]");
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        long[] longArray1 = new long[] { 'a' };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray1);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray1);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray1);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray1);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray1);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray1);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[97]");
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.2970519691988204E43d), 4.533823502911814d, 0.0d, (double) 1L, (double) (-1), (-1.2987589125325767E77d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.2987589125325767E77d + "'", double6 == 1.2987589125325767E77d);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        long[] longArray2 = new long[] { (byte) 1, 10 };
        long[] longArray5 = new long[] { (byte) 1, 10 };
        long[] longArray8 = new long[] { (byte) 1, 10 };
        long[] longArray11 = new long[] { (byte) 1, 10 };
        long[] longArray14 = new long[] { (byte) 1, 10 };
        long[] longArray17 = new long[] { (byte) 1, 10 };
        long[][] longArray18 = new long[][] { longArray2, longArray5, longArray8, longArray11, longArray14, longArray17 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray18);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray18);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[1, 10]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[1, 10]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[1, 10]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, 10]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1, 10]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[1, 10]");
        org.junit.Assert.assertNotNull(longArray18);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(3.0341344585090943E22d, 10.04987562112089d, (-6.469188686213148E43d), 0.0d, (-1.3838648976946252E105d), 1.1994689109482976E37d, 6.005222408113379E108d, (-3.020383302338395E119d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.8138073488294018E228d) + "'", double8 == (-1.8138073488294018E228d));
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        java.lang.String[] strArray3 = new java.lang.String[] { "", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray3, orderDirection4, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection40 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray19, orderDirection40, true);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) (byte) 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 10L, doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray44, 8.5815885820656E40d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection40 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection40.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray41);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray83);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray41, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -100 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1000.0, -100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        java.lang.Class<?> wildcardClass41 = longArray35.getClass();
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1346.545580364809d, (-5.644230165222219E15d), (-2.615914305086962E12d), 212180.4992500489d, (-2.3050398777241942E83d), (-5.0554510251207795E22d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.1653016212785054E106d + "'", double6 == 1.1653016212785054E106d);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.2114525348282044E23d), 2068.0d, (-6.469188686213148E43d), (-1.2987589125325767E77d), 88.21557489650559d, (-4.0443212939554954E20d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 8.401916463074236E120d + "'", double6 == 8.401916463074236E120d);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        long[] longArray0 = new long[] {};
        long[] longArray1 = new long[] {};
        long[] longArray2 = new long[] {};
        long[][] longArray3 = new long[][] { longArray0, longArray1, longArray2 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray37);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equals(doubleArray26, doubleArray37);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray56);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray76);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray88);
        double double90 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray76, doubleArray88);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection91 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray88, orderDirection91, true);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray59, orderDirection91, false);
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray18, orderDirection91, true);
        double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2111.0d + "'", double90 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection91 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection91.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[]");
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        java.lang.Class<?> wildcardClass44 = longArray35.getClass();
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray45);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray28, doubleArray47);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection49, true);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray4, orderDirection49, false, false);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray4);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray55, (-1.9875501E7d));
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray74);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray86);
        double double88 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray74, doubleArray86);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray86, orderDirection89, true);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray86);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray55, doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection49 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection49.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1656291.75, -1656291.75, -1.65629175E7]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2111.0d + "'", double88 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[90900.0, -20200.0, -1010000.0]");
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-2.1064966936837643E10d), (double) 'a', 1200.0d, (-1058.0d), (-2.3050398777241942E83d), 1.405900735433483E96d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-3.2406572592959504E179d) + "'", double6 == (-3.2406572592959504E179d));
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38);
        double double41 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray38);
        int[] intArray42 = new int[] {};
        int[] intArray47 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray42, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (short) 1);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (short) 1);
        int int60 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray59);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray59);
        int[] intArray62 = new int[] {};
        int[] intArray67 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int68 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray62, intArray67);
        int[] intArray69 = new int[] {};
        int[] intArray74 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int75 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray69, intArray74);
        int int76 = org.apache.commons.math3.util.MathArrays.distance1(intArray62, intArray74);
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray74, (int) '4');
        int[] intArray79 = new int[] {};
        int[] intArray84 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int85 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray79, intArray84);
        int[] intArray87 = org.apache.commons.math3.util.MathArrays.copyOf(intArray84, (int) (short) 1);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray84);
        int[] intArray89 = org.apache.commons.math3.util.MathArrays.copyOf(intArray84);
        int int90 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray74, intArray89);
        double double91 = org.apache.commons.math3.util.MathArrays.distance(intArray61, intArray74);
        int int92 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray74);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-9200.0d), (-4.135659354056735E69d), 0.0d, 3.1182816454942446E170d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.804806605732196E73d + "'", double4 == 3.804806605732196E73d);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray4);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray16);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection34 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray33, orderDirection34, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray33, orderDirection37, false);
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection37, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection42, false);
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray23, orderDirection42, false, false);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray23, (-6.469188686213299E42d));
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray23);
        double[] doubleArray51 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + orderDirection34 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection34.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-5.3909905718444154E41, -5.3909905718444154E41, -5.390990571844416E42]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, -9.0, -90.0]");
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray9);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray11, (int) (byte) 0);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 0);
        double[] doubleArray20 = new double[] { 1, 1, 10 };
        double[] doubleArray24 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray24);
        double[] doubleArray30 = new double[] { 1, 1, 10 };
        double[] doubleArray34 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray34);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray35);
        boolean boolean37 = org.apache.commons.math3.util.MathArrays.equals(doubleArray24, doubleArray35);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray35);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray66);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(doubleArray55, doubleArray66);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray55);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (double) 100L);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray47);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray35, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-2165.0d), doubleArray80);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray15, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(3.295116804952141E29d, doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-21650.0, 2165.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray5);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.7246705822717612E15d, doubleArray12);
        double[] doubleArray17 = new double[] { 1, 1, 10 };
        double[] doubleArray21 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray21);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray32);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(doubleArray21, doubleArray32);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray32);
        double[] doubleArray39 = new double[] { 1, 1, 10 };
        double[] doubleArray43 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray43);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray52, doubleArray63);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray52);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray44, (double) 100L);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray44);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray32, doubleArray77);
        double[] doubleArray80 = null;
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(doubleArray32, doubleArray80);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equals(doubleArray12, doubleArray32);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray32, (int) (byte) 1);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.scale(8.5815885820656E40d, doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.7246705822717612E15, 1.7246705822717612E15, 1.7246705822717612E16]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-900.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-7.72342972385904E43, 1.71631771641312E43, 8.5815885820656E43]");
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(doubleArray32, doubleArray43);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray62);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray65);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, (int) 'a');
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale(1.347347400304754E92d, doubleArray20);
        double double70 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.2126126602742785E95, -2.694694800609508E94, -1.347347400304754E95]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1360.1470508735442d + "'", double70 == 1360.1470508735442d);
    }
}


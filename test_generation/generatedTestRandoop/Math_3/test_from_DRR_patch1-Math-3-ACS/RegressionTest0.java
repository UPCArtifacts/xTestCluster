import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, (-1.0d), (double) (short) 0, (double) (short) -1, (double) (byte) 1, (double) 1L, 100.0d, (double) (short) 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 101.0d + "'", double8 == 101.0d);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray14 = new double[] { 10.0f, (short) 10, (-1.0d), 100.0d, (-1L) };
        double[] doubleArray20 = new double[] { 10.0f, (short) 10, (-1.0d), 100.0d, (-1L) };
        double[] doubleArray26 = new double[] { 10.0f, (short) 10, (-1.0d), 100.0d, (-1L) };
        double[] doubleArray32 = new double[] { 10.0f, (short) 10, (-1.0d), 100.0d, (-1L) };
        double[][] doubleArray33 = new double[][] { doubleArray14, doubleArray20, doubleArray26, doubleArray32 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray8, doubleArray33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 5 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 10.0, -1.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 10.0, -1.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 10.0, -1.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 10.0, -1.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection9 = null;
        double[] doubleArray16 = new double[] { '#', 100.0d, 0, (-1L), 1L, (short) -1 };
        double[] doubleArray23 = new double[] { '#', 100.0d, 0, (-1L), 1L, (short) -1 };
        double[][] doubleArray24 = new double[][] { doubleArray16, doubleArray23 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray7, orderDirection9, doubleArray24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 6 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, -1.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 0.0, -1.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        java.lang.Class<?> wildcardClass9 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray15 = new double[] { 0.0d, 101.0d, 10, (-1.0d), (short) 100, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray8, doubleArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 3 != 6");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 101.0, 10.0, -1.0, 100.0, 100.0]");
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 0L, (double) 0, (double) (byte) 1, (double) (short) 0, 101.0d, 0.0d, (double) (short) 0, 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray69);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray71, doubleArray90);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection92 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray71, orderDirection92, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38, orderDirection92, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not decreasing (-1 < 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection92 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection92.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray38, doubleArray55);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 5 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray87 = new double[] { 1, 1, 10 };
        double[] doubleArray91 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray87, doubleArray91);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray91);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray74, doubleArray93);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection95 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray74, orderDirection95, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18, orderDirection95, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (-900 <= 200)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection95 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection95.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (-1), (double) (short) 1, 100.0d, (double) (-1L));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-101.0d) + "'", double4 == (-101.0d));
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray61 = new double[] { '4', 10, 10, (byte) -1, (byte) -1 };
        double[] doubleArray67 = new double[] { '4', 10, 10, (byte) -1, (byte) -1 };
        double[] doubleArray73 = new double[] { '4', 10, 10, (byte) -1, (byte) -1 };
        double[][] doubleArray74 = new double[][] { doubleArray61, doubleArray67, doubleArray73 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray55, doubleArray74);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 5 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[52.0, 10.0, 10.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[52.0, 10.0, 10.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[52.0, 10.0, 10.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray9);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray12 = new double[] {};
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = new double[] {};
        double[] doubleArray15 = new double[] {};
        double[][] doubleArray16 = new double[][] { doubleArray11, doubleArray12, doubleArray13, doubleArray14, doubleArray15 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray9, doubleArray16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        double[] doubleArray2 = new double[] { 0L, (short) 1 };
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray2, doubleArray6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 2 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int[] intArray18 = new int[] {};
        int[] intArray23 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray23);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (short) 1);
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray26);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = org.apache.commons.math3.util.MathArrays.distance1(intArray5, intArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray28, orderDirection31, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not decreasing (-900 < 200)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -9 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 1, (double) 0.0f, 2111.0d, (double) (short) 10, (-101.0d), (double) (short) 1);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 21009.0d + "'", double6 == 21009.0d);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10, (double) (short) 100, (double) (short) 0, (double) 10L, (double) 100, 1.0d, (-1.0d), (double) (-1.0f));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1101.0d + "'", double8 == 1101.0d);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (short) 10, (double) (byte) 0, (double) 10, (double) (-1), (double) (byte) -1, (double) 10L, (double) (short) 1, (double) 1.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-19.0d) + "'", double8 == (-19.0d));
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (short) 100, (double) 1L, (double) 0.0f, (double) '4', (double) (byte) 1, (double) (byte) 100, (double) 100.0f, (double) 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1200.0d + "'", double8 == 1200.0d);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray68, doubleArray87);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray68, orderDirection89, true);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray44, orderDirection89, false, false);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray44);
        double double96 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray38, doubleArray44);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) ' ', doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 12.0d + "'", double96 == 12.0d);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        double[] doubleArray0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection8 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray7, orderDirection8, false);
        double[] doubleArray12 = new double[] { 10.0f };
        double[] doubleArray14 = new double[] { 10.0f };
        double[] doubleArray16 = new double[] { 10.0f };
        double[] doubleArray18 = new double[] { 10.0f };
        double[] doubleArray20 = new double[] { 10.0f };
        double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, orderDirection8, doubleArray21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + orderDirection8 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection8.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection0 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray38, orderDirection39, false);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray17, orderDirection39, true, false);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection52 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray51, orderDirection52, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray55 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection0, orderDirection39, orderDirection52 };
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray87 = new double[] { 1, 1, 10 };
        double[] doubleArray91 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray87, doubleArray91);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray91);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray74, doubleArray93);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection95 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray74, orderDirection95, true);
        boolean boolean99 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray55, orderDirection95, false);
        org.junit.Assert.assertTrue("'" + orderDirection0 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection0.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + orderDirection52 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection52.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(orderDirectionArray55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection95 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection95.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray71);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray71);
        double[] doubleArray78 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray74, doubleArray78);
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray78);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1427.5857242211412d + "'", double80 == 1427.5857242211412d);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray83);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(doubleArray72, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray72);
        double double87 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray72);
        java.lang.String[] strArray94 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection95 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray94, orderDirection95, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray72, orderDirection95, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not decreasing (-1 < 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1353.329967155091d + "'", double87 == 1353.329967155091d);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertTrue("'" + orderDirection95 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection95.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray27);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (short) -1, (double) 'a', 2068.0d, (-1.0d), 0.0d, (double) (short) -1, 0.0d, (double) '#');
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-2165.0d) + "'", double8 == (-2165.0d));
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double double53 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray70);
        double[] doubleArray77 = new double[] { 1, 1, 10 };
        double[] doubleArray81 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray81);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray82);
        double double84 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray70, doubleArray82);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray82, orderDirection85, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray52, orderDirection85, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not decreasing (-19 < 3)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2068.0d + "'", double53 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2111.0d + "'", double84 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray58);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray70);
        double double72 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray58, doubleArray70);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection73 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray70, orderDirection73, true);
        double double76 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray38, doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2111.0d + "'", double72 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection73 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection73.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-9200.0d) + "'", double76 == (-9200.0d));
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray27);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray5, intArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(10.0d, (double) (byte) -1, (double) (byte) 10, 2111.0d, (double) ' ', (-9200.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-273300.0d) + "'", double6 == (-273300.0d));
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        long[][] longArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkRectangular(longArray0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(100.0d, 21.0d, (double) 100L, (double) (short) 100, (double) (short) -1, 1353.329967155091d, (-1.0d), 1427.5857242211412d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 9319.084308623767d + "'", double8 == 9319.084308623767d);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray40, doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray44);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(doubleArray29, doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray40);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray52, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray82);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray82);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray40, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray85);
        java.lang.Class<?> wildcardClass88 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(9319.084308623767d, 1360.1470508735442d, (double) 10.0f, (double) (short) 100, 100.0d, (-2165.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.2459825039216539E7d + "'", double6 == 1.2459825039216539E7d);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection7, false);
        java.lang.Class<?> wildcardClass10 = strArray6.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection7.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray8, (double) 100L);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray49);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        double double63 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray49, doubleArray61);
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection71 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray70, orderDirection71, false);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray49, orderDirection71, true, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray8, orderDirection71, true, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (-9 <= 2)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2111.0d + "'", double63 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + orderDirection71 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection71.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray41);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray83);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray41, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.0d), (-101.0d), (double) (short) 1, (double) 10L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 111.0d + "'", double4 == 111.0d);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray69);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray71, doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray91);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 10.0d + "'", double92 == 10.0d);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (-1.0d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int[] intArray18 = new int[] {};
        int[] intArray23 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray23);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (short) 1);
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray5, intArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray42);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) '#', doubleArray42);
        double[] doubleArray70 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray42, doubleArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-315.0, 70.0, 350.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        long[] longArray4 = new long[] { (-1), (-1L), (short) 1, 0L };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: -1 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[-1, -1, 1, 0]");
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray55);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -891 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 100.0f, (double) 10L, (double) 100.0f, 9319.084308623767d, (-273300.0d), 101.0d, (double) 0.0f, (double) (byte) 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-2.667039156913762E7d) + "'", double8 == (-2.667039156913762E7d));
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10, 10.0d, (double) '#', (double) 100, (double) 1.0f, 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3600.0d + "'", double6 == 3600.0d);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        double double42 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray29);
        java.lang.Class<?> wildcardClass43 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray69);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray71, doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 10.0d + "'", double92 == 10.0d);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        java.lang.Class<?> wildcardClass53 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int40 = org.apache.commons.math3.util.MathArrays.distance1(intArray36, intArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (-1L), (double) 100, 21.0d, (double) 1L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-79.0d) + "'", double4 == (-79.0d));
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray48, orderDirection49, false);
        double[] doubleArray58 = new double[] { 10L, 100, 2111.0d, 1101.0d, 1L, 12.0d };
        double[] doubleArray65 = new double[] { 10L, 100, 2111.0d, 1101.0d, 1L, 12.0d };
        double[] doubleArray72 = new double[] { 10L, 100, 2111.0d, 1101.0d, 1L, 12.0d };
        double[][] doubleArray73 = new double[][] { doubleArray58, doubleArray65, doubleArray72 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray18, orderDirection49, doubleArray73);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 6 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + orderDirection49 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection49.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 100.0, 2111.0, 1101.0, 1.0, 12.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 100.0, 2111.0, 1101.0, 1.0, 12.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, 100.0, 2111.0, 1101.0, 1.0, 12.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        double[] doubleArray0 = null;
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection1 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection1, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection1 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection1.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 1L, 9319.084308623767d, 1353.329967155091d, (double) (short) 100);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 144652.08102413287d + "'", double4 == 144652.08102413287d);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray1 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (-1), (double) 1.0f, 1353.329967155091d, 1366.9312345542478d, 0.0d, 21.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1849908.0027625682d + "'", double6 == 1849908.0027625682d);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray71);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray71);
        double[] doubleArray78 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray74, doubleArray78);
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray78);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection81 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray78, orderDirection81, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (100 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1427.5857242211412d + "'", double80 == 1427.5857242211412d);
        org.junit.Assert.assertTrue("'" + orderDirection81 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection81.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, (double) 100L);
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray63);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection65 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray63, orderDirection65, false, false);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray63, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 439.780879782446d + "'", double64 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + orderDirection65 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection65.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray42);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray42);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(doubleArray0, doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(2111.0d, 439.780879782446d, (double) 100, (double) (byte) 10);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 929377.4372207435d + "'", double4 == 929377.4372207435d);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray57);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray65);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray65);
        int[] intArray71 = new int[] {};
        int[] intArray76 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray71, intArray76);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = org.apache.commons.math3.util.MathArrays.distance(intArray65, intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1]");
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (-1.0f), 1.2459825039216539E7d, 100.0d, (double) 0L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.2459825039216539E7d) + "'", double4 == (-1.2459825039216539E7d));
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray18, orderDirection39, true);
        double double42 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray18);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray68);
        double[] doubleArray74 = new double[] { 1, 1, 10 };
        double[] doubleArray78 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray78);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray87);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray70, doubleArray89);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection91 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray70, orderDirection91, true);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray46, orderDirection91, false, false);
        boolean boolean99 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18, orderDirection91, false, true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection91 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection91.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray71);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray71);
        double[] doubleArray78 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray74, doubleArray78);
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray28);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1427.5857242211412d + "'", double80 == 1427.5857242211412d);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-101.0d), 100.0d, 9319.084308623767d, (double) '4');
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 474492.3840484359d + "'", double4 == 474492.3840484359d);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        float[] floatArray0 = null;
        float[] floatArray3 = new float[] { (-1L), (byte) 10 };
        float[] floatArray7 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean8 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray7);
        float[] floatArray11 = new float[] { (short) 1, (-1L) };
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray7, floatArray11);
        float[] floatArray15 = new float[] { (-1L), (byte) 10 };
        float[] floatArray19 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray15, floatArray19);
        float[] floatArray21 = null;
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(floatArray15, floatArray21);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray15);
        float[] floatArray26 = new float[] { (-1L), (byte) 10 };
        float[] floatArray30 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray26, floatArray30);
        float[] floatArray32 = null;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(floatArray26, floatArray32);
        float[] floatArray36 = new float[] { (-1L), (byte) 10 };
        float[] floatArray40 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray36, floatArray40);
        float[] floatArray44 = new float[] { (short) 1, (-1L) };
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray40, floatArray44);
        float[] floatArray48 = new float[] { (-1L), (byte) 10 };
        float[] floatArray52 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray48, floatArray52);
        float[] floatArray54 = null;
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(floatArray48, floatArray54);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(floatArray40, floatArray48);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equals(floatArray26, floatArray40);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray26);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray0, floatArray26);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray61);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray64);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection73 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray72, orderDirection73, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray64, orderDirection73, true, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (-910 <= 201)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + orderDirection73 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection73.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray10 = new float[] { (short) 1, (-1L) };
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray10);
        float[] floatArray14 = new float[] { (-1L), (byte) 10 };
        float[] floatArray18 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray14, floatArray18);
        float[] floatArray20 = null;
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(floatArray14, floatArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(floatArray6, floatArray14);
        float[] floatArray25 = new float[] { (-1L), (byte) 10 };
        float[] floatArray29 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray25, floatArray29);
        float[] floatArray31 = null;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray25, floatArray31);
        float[] floatArray35 = new float[] { (-1L), (byte) 10 };
        float[] floatArray39 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray35, floatArray39);
        float[] floatArray43 = new float[] { (short) 1, (-1L) };
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray39, floatArray43);
        float[] floatArray47 = new float[] { (-1L), (byte) 10 };
        float[] floatArray51 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray47, floatArray51);
        float[] floatArray53 = null;
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(floatArray47, floatArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray47);
        float[] floatArray58 = new float[] { (-1L), (byte) 10 };
        float[] floatArray62 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray58, floatArray62);
        float[] floatArray64 = null;
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(floatArray58, floatArray64);
        float[] floatArray68 = new float[] { (-1L), (byte) 10 };
        float[] floatArray72 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray68, floatArray72);
        float[] floatArray76 = new float[] { (short) 1, (-1L) };
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray72, floatArray76);
        float[] floatArray80 = new float[] { (-1L), (byte) 10 };
        float[] floatArray84 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray80, floatArray84);
        float[] floatArray86 = null;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(floatArray80, floatArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(floatArray72, floatArray80);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(floatArray58, floatArray72);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray58);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray31, floatArray58);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray31);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(floatArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray80), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray84), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10L, (-2.667039156913762E7d), 1101.0d, (double) '4');
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-2.666466636913762E8d) + "'", double4 == (-2.666466636913762E8d));
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.scaleInPlace(1.0d, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(doubleArray32, doubleArray43);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray62);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-101.0d), doubleArray65);
        double[] doubleArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double69 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray65, doubleArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[91910.0, -20301.0, -101000.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1353.329967155091d, 0.0d, 100.0d, (double) 1L, (double) (byte) 1, (double) 0L, 12.0d, 1.2459825039216539E7d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.4951800047059846E8d + "'", double8 == 1.4951800047059846E8d);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 0, (double) 10, (double) 98, (-2.666466636913762E8d), 2111.0d, (double) 98, (double) 10, (double) (short) 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-2.6131166153754868E10d) + "'", double8 == (-2.6131166153754868E10d));
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = new int[] {};
        int[] intArray32 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int33 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray32);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = org.apache.commons.math3.util.MathArrays.distance(intArray24, intArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1]");
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double double53 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray81);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray70);
        double double85 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray18, doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray62);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -9 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2068.0d + "'", double53 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 990.0d + "'", double85 == 990.0d);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(3600.0d, 1.2459825039216539E7d, (double) 1L, (-2.667039156913762E7d), (-19.0d), (-273300.0d), 474492.3840484359d, 1849908.0027625682d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 9.226011509507019E11d + "'", double8 == 9.226011509507019E11d);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 1, (double) 10.0f, (double) (short) 10, (double) 0, 0.0d, (-1.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray68, doubleArray87);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray68, orderDirection89, true);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray44, orderDirection89, false, false);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray44);
        double double96 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray38, doubleArray44);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (1 >= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 12.0d + "'", double96 == 12.0d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[1.0, 1.0, 10.0]");
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        double double42 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray29);
        int[] intArray43 = new int[] {};
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray43, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 1);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int int61 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray60);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray51, (int) (short) 100);
        int[] intArray64 = new int[] {};
        int[] intArray69 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 1);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78, (int) (short) 1);
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray81);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) 100);
        double double85 = org.apache.commons.math3.util.MathArrays.distance(intArray51, intArray72);
        int int86 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray51);
        java.lang.Class<?> wildcardClass87 = intArray29.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1.2459825039216539E7d, (-1.2459825039216539E7d), 1101.0d, 1101.0d, (double) 100, 1366.9312345542478d, (double) 98, (double) (byte) 100);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.552472386491933E14d) + "'", double8 == (-1.552472386491933E14d));
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(doubleArray29, doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray40);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray52, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray82);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray82);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray40, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray85);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray7, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray89, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        long[] longArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10L, 21.0d, 1353.329967155091d, (double) 100L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 135542.9967155091d + "'", double4 == 135542.9967155091d);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 21.0d, (double) (-1L), (-79.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 79.0d + "'", double4 == 79.0d);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray66);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(doubleArray55, doubleArray66);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray55);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (double) 100L);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray37, doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray37, 0.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-0.0, 0.0, 0.0]");
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-2.667039156913762E7d), 0.0d, 21009.0d, 3600.0d, (-9200.0d), (double) (short) 10);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 7.55404E7d + "'", double6 == 7.55404E7d);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray44);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray44);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray54 = new int[] {};
        int[] intArray59 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int60 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray54, intArray59);
        int int61 = org.apache.commons.math3.util.MathArrays.distance1(intArray47, intArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray15 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int16 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray15);
        int[] intArray17 = new int[] {};
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray22);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 1);
        int[] intArray26 = new int[] {};
        int[] intArray31 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int32 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray26, intArray31);
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (short) 1);
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray25, intArray34);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray15, intArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 98 + "'", int16 == 98);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-900.0, 200.0, 1000.0]");
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 10.0d, 0.0d, (double) (byte) 1, (double) (short) 1, (-2.6131166153754868E10d), 9319.084308623767d, (double) 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-2.613107296291178E10d) + "'", double8 == (-2.613107296291178E10d));
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(9319.084308623767d, 79.0d, (-9200.0d), (double) 100.0f);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-183792.33961872238d) + "'", double4 == (-183792.33961872238d));
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int int54 = org.apache.commons.math3.util.MathArrays.distance1(intArray40, intArray52);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray36, intArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(doubleArray32, doubleArray43);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray62);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) ' ', doubleArray66);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray66, doubleArray75);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 5 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-2.6208E7, 1.16128E7, 5.66336E7, -1.2832E7, -3.2E7]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        long[] longArray4 = new long[] { (byte) -1, (short) 0, 10, (byte) 10 };
        long[] longArray9 = new long[] { (byte) -1, (short) 0, 10, (byte) 10 };
        long[] longArray14 = new long[] { (byte) -1, (short) 0, 10, (byte) 10 };
        long[][] longArray15 = new long[][] { longArray4, longArray9, longArray14 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        java.lang.Class<?> wildcardClass17 = longArray15.getClass();
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 1);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray18);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (short) 100);
        int[] intArray22 = new int[] {};
        int[] intArray27 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray22, intArray27);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (short) 1);
        int[] intArray31 = new int[] {};
        int[] intArray36 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray31, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (short) 1);
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray39);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (short) 100);
        double double43 = org.apache.commons.math3.util.MathArrays.distance(intArray9, intArray30);
        int[] intArray44 = new int[] {};
        int[] intArray49 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int50 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray44, intArray49);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) (short) 1);
        int[] intArray53 = new int[] {};
        int[] intArray58 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray58);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (short) 1);
        int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray61);
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 100);
        int[] intArray65 = new int[] {};
        int[] intArray70 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int71 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray65, intArray70);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70, (int) (short) 1);
        int[] intArray74 = new int[] {};
        int[] intArray79 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int80 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray74, intArray79);
        int[] intArray82 = org.apache.commons.math3.util.MathArrays.copyOf(intArray79, (int) (short) 1);
        int int83 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray82);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (short) 100);
        double double86 = org.apache.commons.math3.util.MathArrays.distance(intArray52, intArray73);
        int int87 = org.apache.commons.math3.util.MathArrays.distance1(intArray30, intArray52);
        int[] intArray88 = new int[] {};
        int[] intArray93 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int94 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray88, intArray93);
        int[] intArray96 = org.apache.commons.math3.util.MathArrays.copyOf(intArray93, (int) (short) 1);
        double double97 = org.apache.commons.math3.util.MathArrays.distance(intArray30, intArray96);
        // The following exception was thrown during execution in test generation
        try {
            int int98 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) ' ');
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray48);
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.equals(doubleArray37, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray37);
        double double52 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double53 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray20, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 13.601470508735444d + "'", double52 == 13.601470508735444d);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(100.00499987500625d, 1200.0d, (double) (-1L), 3600.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 116405.9998500075d + "'", double4 == 116405.9998500075d);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray68, doubleArray87);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray68, orderDirection89, true);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray44, orderDirection89, false, false);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray44);
        double double96 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray38, doubleArray44);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray44);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 12.0d + "'", double96 == 12.0d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[1.0, 1.0, 10.0]");
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 1, 0.0d, (double) (-1.0f), (-2165.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2165.0d + "'", double4 == 2165.0d);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray20 = new int[] {};
        int[] intArray25 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray25);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, (int) (short) 1);
        int[] intArray29 = new int[] {};
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 1);
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray37);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28, 0);
        int[] intArray41 = new int[] {};
        int[] intArray46 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray41, intArray46);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (short) 1);
        int[] intArray50 = new int[] {};
        int[] intArray55 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray55);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray55, (int) (short) 1);
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray58);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int[] intArray69 = new int[] {};
        int[] intArray74 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int75 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray69, intArray74);
        int[] intArray77 = org.apache.commons.math3.util.MathArrays.copyOf(intArray74, (int) (short) 1);
        int int78 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray68, intArray77);
        int int79 = org.apache.commons.math3.util.MathArrays.distance1(intArray58, intArray77);
        int[] intArray80 = new int[] {};
        int[] intArray85 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int86 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray80, intArray85);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray85, (int) (short) 1);
        int int89 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray85);
        int int90 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray85);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray4);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray11, orderDirection12, true, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (10 <= 10)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray37);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equals(doubleArray26, doubleArray37);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray57);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray49, (double) 100L);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray49);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray7, doubleArray37);
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection83 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray82, orderDirection83, false);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray7, orderDirection83, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + orderDirection83 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection83.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-9200.0d), 2068.0d, 1200.0d, 144652.08102413287d, 1360.1470508735442d, (double) '#', 0.0d, (double) 10.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.5460450237574002E8d + "'", double8 == 1.5460450237574002E8d);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        java.lang.Class<?> wildcardClass20 = intArray19.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1.0f, (short) -1, 100.0d };
        double[] doubleArray8 = new double[] { 1.0f, (short) -1, 100.0d };
        double[] doubleArray12 = new double[] { 1.0f, (short) -1, 100.0d };
        double[][] doubleArray13 = new double[][] { doubleArray4, doubleArray8, doubleArray12 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, doubleArray13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray71);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray71);
        double double75 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray30, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(13.601470508735444d, doubleArray30);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray10, doubleArray30);
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray84, orderDirection85, false);
        double[][] doubleArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray30, orderDirection85, doubleArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-12241.3234578619, 2720.294101747089, 13601.470508735443]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-12241.3234578619, 2720.294101747089, 136014.70508735444]");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray83);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(doubleArray72, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray72);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray64, (double) 100L);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray89);
        double[] doubleArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double92 = org.apache.commons.math3.util.MathArrays.distance(doubleArray89, doubleArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 0, (double) (byte) -1, 474492.3840484359d, (double) ' ');
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.5183756289549949E7d + "'", double4 == 1.5183756289549949E7d);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray71);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray71);
        double double75 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray30, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(13.601470508735444d, doubleArray30);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray10, doubleArray30);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray86);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray88, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray30, doubleArray90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NoDataException; message: no data");
        } catch (org.apache.commons.math3.exception.NoDataException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-12241.3234578619, 2720.294101747089, 13601.470508735443]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-12241.3234578619, 2720.294101747089, 136014.70508735444]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray38, doubleArray57);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray77);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(doubleArray66, doubleArray77);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray57, doubleArray77);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray19, doubleArray77);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 10, doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray82);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -9,000 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-9000.0, 2000.0, 10000.0]");
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double double50 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray27);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray67);
        double[] doubleArray74 = new double[] { 1, 1, 10 };
        double[] doubleArray78 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray78);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray79);
        double double81 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray67, doubleArray79);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection82 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray79, orderDirection82, true);
        double[] doubleArray85 = new double[] {};
        double[][] doubleArray86 = new double[][] { doubleArray85 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray18, orderDirection82, doubleArray86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 21.0d + "'", double50 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2111.0d + "'", double81 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection82 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection82.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection72, true);
        double double75 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray37, doubleArray69);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray80);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray37, doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray87);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= -0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2111.0d + "'", double71 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-9200.0d) + "'", double75 == (-9200.0d));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, -0.0, 0.0]");
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 1.0f, (double) 1.0f, (-1.0d), 13.601470508735444d, (double) (byte) 0, (double) 10L, (-79.0d), (double) 0.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-12.601470508735444d) + "'", double8 == (-12.601470508735444d));
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1366.9312345542478d, 0.0d, (double) 98, 2165.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 212170.0d + "'", double4 == 212170.0d);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray56);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equals(doubleArray45, doubleArray56);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray56);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray87);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(doubleArray76, doubleArray87);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray76);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray68, (double) 100L);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray68);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray26, doubleArray56);
        double double95 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray7, doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray44);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 1);
        int[] intArray56 = new int[] {};
        int[] intArray61 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray56, intArray61);
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray61, (int) (short) 1);
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray55, intArray64);
        int[] intArray67 = org.apache.commons.math3.util.MathArrays.copyOf(intArray55, 0);
        int[] intArray68 = new int[] {};
        int[] intArray73 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int74 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray68, intArray73);
        int[] intArray75 = new int[] {};
        int[] intArray80 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int81 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray75, intArray80);
        int int82 = org.apache.commons.math3.util.MathArrays.distance1(intArray68, intArray80);
        int int83 = org.apache.commons.math3.util.MathArrays.distance1(intArray67, intArray68);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = org.apache.commons.math3.util.MathArrays.distance1(intArray44, intArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection27, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection30, false);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray14, orderDirection30, true);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray14);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = null;
        double[] doubleArray42 = new double[] { (byte) 100, 1, (-1L), (short) 100, 1020.0d };
        double[] doubleArray48 = new double[] { (byte) 100, 1, (-1L), (short) 100, 1020.0d };
        double[] doubleArray54 = new double[] { (byte) 100, 1, (-1L), (short) 100, 1020.0d };
        double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray48, doubleArray54 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray35, orderDirection36, doubleArray55);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 5 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 1.0, -1.0, 100.0, 1020.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 1.0, -1.0, 100.0, 1020.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 1.0, -1.0, 100.0, 1020.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10, (double) (byte) -1, (-2.613107296291178E10d), 1020.0d, (double) (byte) 100, 2165.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2.6653694205680016E13d) + "'", double6 == (-2.6653694205680016E13d));
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray37, orderDirection38, false);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16, orderDirection38, true, false);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection60 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray59, orderDirection60, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection63 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray59, orderDirection63, false);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray47, orderDirection63, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16, orderDirection63, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not decreasing (-1 < 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + orderDirection60 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection60.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + orderDirection63 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection63.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 1, 1353.329967155091d, (double) 0.0f, 0.0d, (double) 1.0f, 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1363.329967155091d + "'", double6 == 1363.329967155091d);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray53);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale(929377.4372207435d, doubleArray53);
        double[][] doubleArray56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray55, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2068.0d + "'", double54 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.7658171307194125E7, 2788132.3116622306, 9293774.372207435]");
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray38, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[111.11111111111111, -11.11111111111111, 0.0]");
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray56 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray55, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray8, (double) 100L);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray8, orderDirection33, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-300.0, 66.66666666666667, 333.3333333333333]");
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray21 = new double[] { 1, 1, 10 };
        double[] doubleArray25 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray25);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray25);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray37);
        double double39 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray25, doubleArray37);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection47 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray46, orderDirection47, false);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray25, orderDirection47, true, false);
        double[] doubleArray57 = new double[] { 1366.9312345542478d, (short) -1, 0.0d, 13.601470508735444d };
        double[] doubleArray62 = new double[] { 1366.9312345542478d, (short) -1, 0.0d, 13.601470508735444d };
        double[] doubleArray67 = new double[] { 1366.9312345542478d, (short) -1, 0.0d, 13.601470508735444d };
        double[] doubleArray72 = new double[] { 1366.9312345542478d, (short) -1, 0.0d, 13.601470508735444d };
        double[][] doubleArray73 = new double[][] { doubleArray57, doubleArray62, doubleArray67, doubleArray72 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray3, orderDirection47, doubleArray73);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2111.0d + "'", double39 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + orderDirection47 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection47.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1366.9312345542478, -1.0, 0.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1366.9312345542478, -1.0, 0.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1366.9312345542478, -1.0, 0.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1366.9312345542478, -1.0, 0.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray73);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, (-19.0d), (-2.6653694205680016E13d), (double) (byte) 100, (double) ' ', (double) 10);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2.6653694205676815E15d) + "'", double6 == (-2.6653694205676815E15d));
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray45);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray28, doubleArray47);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection49, true);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray4, orderDirection49, false, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray0, orderDirection49, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection49 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection49.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 10, 101.0d, 2068.0d, (double) (-1), 1020.0d, (double) 0, (double) 98, (double) (byte) 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1058.0d) + "'", double8 == (-1058.0d));
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10, 1.4951800047059846E8d, (double) (byte) 0, 100.0d, (-273300.0d), (double) 100L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4678500047059846E9d + "'", double6 == 1.4678500047059846E9d);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double22 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-19.0d), 100.00499987500625d, (double) (byte) 100, (-183792.33961872238d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.8381134056869864E7d) + "'", double4 == (-1.8381134056869864E7d));
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 100.0f, (double) (short) 100, (-273300.0d), 1.5183756289549949E7d, 10.0d, 3600.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-4.149720547934001E12d) + "'", double6 == (-4.149720547934001E12d));
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (double) 100L);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray41);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray9, doubleArray41);
        java.lang.Class<?> wildcardClass68 = doubleArray9.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray18, doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray63);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9000.0, -200.0, 0.0]");
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 0.0f, 1427.5857242211412d, 0.0d, (-2.0153985E7d), 0.0d, (double) 100L, (-1.2459825039216539E7d), 439.780879782446d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-5.479592817681999E9d) + "'", double8 == (-5.479592817681999E9d));
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray88);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray77, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray77);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray69, (double) 100L);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray69);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray27, doubleArray57);
        double double96 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray8, doubleArray27);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.scale((double) 'a', doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[970.0, -97.0, 0.0]");
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1360.1470508735442d, (-4.149720547934001E12d), (double) (short) -1, 439.780879782446d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-5.644230165222219E15d) + "'", double4 == (-5.644230165222219E15d));
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(doubleArray29, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray59);
        double double63 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray40);
        java.lang.Class<?> wildcardClass64 = doubleArray18.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection72, true);
        double double75 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray37, doubleArray69);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray80);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray37, doubleArray80);
        double[] doubleArray92 = new double[] { 1, 1, 10 };
        double[] doubleArray96 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray92, doubleArray96);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray92);
        double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2111.0d + "'", double71 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-9200.0d) + "'", double75 == (-9200.0d));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[10.0, -1.0, 0.0]");
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-2.666466636913762E8d), (double) 100, (double) 100.0f, 116405.9998500075d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-2.665302576915262E10d) + "'", double4 == (-2.665302576915262E10d));
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int[] intArray48 = new int[] {};
        int[] intArray53 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int54 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray53);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (short) 1);
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, 0);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray67 = new int[] {};
        int[] intArray72 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int73 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray67, intArray72);
        int int74 = org.apache.commons.math3.util.MathArrays.distance1(intArray60, intArray72);
        int int75 = org.apache.commons.math3.util.MathArrays.distance1(intArray59, intArray60);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        double[] doubleArray29 = new double[] { 1, 1, 10 };
        double[] doubleArray33 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray33);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray41, orderDirection42, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection45 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray41, orderDirection45, false);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection45, true);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray25, orderDirection45, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18, orderDirection45, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not decreasing (-900 < 200)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + orderDirection45 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection45.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 100, 20.09975124224178d, (-2.667039156913762E7d), (double) 100, 100.00499987500625d, (-2.6131166153754868E10d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2.615914305086962E12d) + "'", double6 == (-2.615914305086962E12d));
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray0, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray15 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int16 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray15);
        int[] intArray17 = new int[] {};
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray22);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 1);
        int[] intArray26 = new int[] {};
        int[] intArray31 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int32 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray26, intArray31);
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (short) 1);
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray25, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, 0);
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 1);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 1);
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray46, intArray55);
        int[] intArray57 = new int[] {};
        int[] intArray62 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int63 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray57, intArray62);
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62, (int) (short) 1);
        int[] intArray66 = new int[] {};
        int[] intArray71 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int72 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray66, intArray71);
        int[] intArray74 = org.apache.commons.math3.util.MathArrays.copyOf(intArray71, (int) (short) 1);
        int int75 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray65, intArray74);
        int int76 = org.apache.commons.math3.util.MathArrays.distance1(intArray55, intArray74);
        int[] intArray77 = new int[] {};
        int[] intArray82 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int83 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray77, intArray82);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray82, (int) (short) 1);
        int int86 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray55, intArray82);
        int int87 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray37, intArray82);
        int[] intArray88 = new int[] {};
        int[] intArray93 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int94 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray88, intArray93);
        int[] intArray96 = org.apache.commons.math3.util.MathArrays.copyOf(intArray93, (int) (short) 1);
        int[] intArray97 = org.apache.commons.math3.util.MathArrays.copyOf(intArray93);
        int int98 = org.apache.commons.math3.util.MathArrays.distance1(intArray82, intArray97);
        int int99 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray97);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 98 + "'", int16 == 98);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray5);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray5);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray5);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 10.0, 100.0]");
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(doubleArray29, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray59);
        double double63 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 1);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray18);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -10 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray44);
        int[] intArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray44, intArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 1);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray18);
        int[] intArray20 = new int[] {};
        int[] intArray25 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray25);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, (int) (short) 1);
        int[] intArray29 = new int[] {};
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 1);
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray37);
        int int39 = org.apache.commons.math3.util.MathArrays.distance1(intArray18, intArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        double double34 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double double45 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray28, doubleArray44);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray62);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray74);
        double double76 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray62, doubleArray74);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray74, orderDirection77, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray44, orderDirection77, false, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not decreasing (1 < 10)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1360.1470508735442d + "'", double34 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 990.0d + "'", double45 == 990.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2111.0d + "'", double76 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection77 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection77.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, (-5.644230165222219E15d), (-1.0d), 1.2459825039216539E7d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.2459825039216539E7d) + "'", double4 == (-1.2459825039216539E7d));
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (double) 100L);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray41);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray9, doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray41);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -9 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double double53 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray17, doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray0, doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray53);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale(929377.4372207435d, doubleArray53);
        double[] doubleArray56 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double57 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray53, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2068.0d + "'", double54 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.7658171307194125E7, 2788132.3116622306, 9293774.372207435]");
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) '#');
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray47);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int[] intArray58 = new int[] {};
        int[] intArray63 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int64 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray63);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (short) 1);
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray57, intArray66);
        int int68 = org.apache.commons.math3.util.MathArrays.distance1(intArray47, intArray66);
        int[] intArray69 = new int[] {};
        int[] intArray74 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int75 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray69, intArray74);
        double double76 = org.apache.commons.math3.util.MathArrays.distance(intArray47, intArray74);
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int79 = org.apache.commons.math3.util.MathArrays.distance1(intArray27, intArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.644230165222219E15d), 1360.1470508735442d, 1.2459825039216539E7d, 0.0d, 2165.0d, 1346.545580364809d, (-1.2459825039216539E7d), (double) '#');
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-7.6769830141116774E18d) + "'", double8 == (-7.6769830141116774E18d));
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray8, (double) 100L);
        java.lang.Class<?> wildcardClass33 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray18, orderDirection39, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray0, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray37);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equals(doubleArray26, doubleArray37);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray57);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray49, (double) 100L);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray49);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray7, doubleArray37);
        java.lang.Class<?> wildcardClass76 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        double[] doubleArray0 = null;
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection1 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray39, doubleArray59);
        double[] doubleArray66 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[] doubleArray70 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[][] doubleArray71 = new double[][] { doubleArray66, doubleArray70 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray39, doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, orderDirection1, doubleArray71);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray71);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray40, doubleArray44);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray52, orderDirection53, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray52, orderDirection56, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray52, orderDirection59, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray44, orderDirection59, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (100 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection53.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + orderDirection56 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection56.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + orderDirection59 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection59.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        float[] floatArray2 = new float[] { (-1.0f), 100.0f };
        float[] floatArray5 = new float[] { (-1L), (byte) 10 };
        float[] floatArray9 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray5, floatArray9);
        float[] floatArray13 = new float[] { (short) 1, (-1L) };
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray9, floatArray13);
        float[] floatArray17 = new float[] { (-1L), (byte) 10 };
        float[] floatArray21 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray17, floatArray21);
        float[] floatArray23 = null;
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(floatArray17, floatArray23);
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equals(floatArray9, floatArray17);
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray17);
        float[] floatArray29 = new float[] { (-1L), (byte) 10 };
        float[] floatArray33 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray29, floatArray33);
        float[] floatArray37 = new float[] { (short) 1, (-1L) };
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray33, floatArray37);
        float[] floatArray41 = new float[] { (-1L), (byte) 10 };
        float[] floatArray45 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray41, floatArray45);
        float[] floatArray47 = null;
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(floatArray41, floatArray47);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(floatArray33, floatArray41);
        float[] floatArray52 = new float[] { (-1L), (byte) 10 };
        float[] floatArray56 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray52, floatArray56);
        float[] floatArray58 = null;
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(floatArray52, floatArray58);
        float[] floatArray62 = new float[] { (-1L), (byte) 10 };
        float[] floatArray66 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray62, floatArray66);
        float[] floatArray70 = new float[] { (short) 1, (-1L) };
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray66, floatArray70);
        float[] floatArray74 = new float[] { (-1L), (byte) 10 };
        float[] floatArray78 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray74, floatArray78);
        float[] floatArray80 = null;
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(floatArray74, floatArray80);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equals(floatArray66, floatArray74);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(floatArray52, floatArray66);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equals(floatArray33, floatArray52);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray33);
        float[] floatArray86 = null;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray33, floatArray86);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1020.0d, (double) 100.0f, (double) 1L, (double) 98);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 102098.0d + "'", double4 == 102098.0d);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1.4951800047059846E8d, (-9200.0d), 2111.0d, (double) 0.0f, (double) (short) -1, 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.3755656043295059E12d) + "'", double6 == (-1.3755656043295059E12d));
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray4);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray39);
        double double41 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray27, doubleArray39);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray39, orderDirection42, true);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray52, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray82);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray82);
        double[] doubleArray89 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray85, doubleArray89);
        double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray4, doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray4, 144652.08102413287d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2111.0d + "'", double41 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1427.5857242211412d + "'", double91 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-0.0, 0.0, 0.0]");
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        double double61 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray47, doubleArray59);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection69 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray68, orderDirection69, false);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray47, orderDirection69, true, false);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47, (int) (short) 10);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray28, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray76, 10.0d);
        double double80 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2111.0d + "'", double61 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + orderDirection69 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection69.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[11.11111111111111, -1.1111111111111112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 11.1665284679121d + "'", double80 == 11.1665284679121d);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 0);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray31, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray70);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equals(doubleArray59, doubleArray70);
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray50, doubleArray70);
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray10, doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1353.403487508437d + "'", double74 == 1353.403487508437d);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray1 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(101.0d, (double) 10L, 0.0d, 1.4678500047059846E9d, (double) 0L, 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1010.0d + "'", double6 == 1010.0d);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        long[] longArray5 = new long[] { '4', ' ', (byte) 10, 98, (short) -1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: -1 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[52, 32, 10, 98, -1]");
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, 144652.08102413287d);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray73);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray75, (int) (byte) 0);
        double double78 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray75);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (-79.0d));
        double double81 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 20.09975124224178d + "'", double78 == 20.09975124224178d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-87.77777777777777, 8.777777777777779, -0.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 88.21557489650559d + "'", double81 == 88.21557489650559d);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, (double) '4', 116405.9998500075d, 111.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.2921065983350832E7d + "'", double4 == 1.2921065983350832E7d);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        long[] longArray3 = new long[] { 100, 10L, 100 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        java.lang.Class<?> wildcardClass7 = longArray3.getClass();
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray5);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale(111.0d, doubleArray5);
        java.lang.Class<?> wildcardClass13 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray39);
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equals(doubleArray28, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray58);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray74 = new double[] { 1, 1, 10 };
        double[] doubleArray78 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray78);
        double[] doubleArray85 = new double[] { 1, 1, 10 };
        double[] doubleArray89 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray85, doubleArray89);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray78, doubleArray90);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection93 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray90, orderDirection93, true);
        double double96 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray58, doubleArray90);
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray18, doubleArray90);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2111.0d + "'", double92 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection93 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection93.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-9200.0d) + "'", double96 == (-9200.0d));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection72, true);
        double double75 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray37, doubleArray69);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray80);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray37, doubleArray80);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray37, orderDirection88, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection91 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray37, orderDirection91, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2111.0d + "'", double71 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-9200.0d) + "'", double75 == (-9200.0d));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection88 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection88.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(20.09975124224178d, (-1.2459825039216539E7d), (double) (byte) 0, (double) 100.0f);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-2.5043938381010786E8d) + "'", double4 == (-2.5043938381010786E8d));
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray56);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equals(doubleArray45, doubleArray56);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray56);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray87);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(doubleArray76, doubleArray87);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray76);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray68, (double) 100L);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray68);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray26, doubleArray56);
        double double95 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray7, doubleArray26);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[10.0, -1.0, 0.0]");
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray42, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray72);
        double[] doubleArray79 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray75, doubleArray79);
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray79);
        double[] doubleArray86 = new double[] { 1, 1, 10 };
        double[] doubleArray90 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray86, doubleArray90);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray86);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray86);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray86);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale(2068.0d, doubleArray29);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1427.5857242211412d + "'", double81 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-901.0, 199.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-1861200.0, 413600.0, 2068000.0]");
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray44);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray27, (double) 100L);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray27);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray27);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray7, (double) 10);
        double[] doubleArray56 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[11.11111111111111, -1.1111111111111112, 0.0]");
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray48);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection50, true);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray5, orderDirection50, false, false);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray5);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray56);
        java.lang.Class<?> wildcardClass59 = doubleArray56.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.2584423289608705E9, -1.2584423289608705E9, -1.2584423289608704E10]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray39);
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equals(doubleArray28, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray58);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray74 = new double[] { 1, 1, 10 };
        double[] doubleArray78 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray78);
        double[] doubleArray85 = new double[] { 1, 1, 10 };
        double[] doubleArray89 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray85, doubleArray89);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray78, doubleArray90);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection93 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray90, orderDirection93, true);
        double double96 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray58, doubleArray90);
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray18, doubleArray90);
        double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) '#');
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2111.0d + "'", double92 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection93 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection93.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-9200.0d) + "'", double96 == (-9200.0d));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection41 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray40, orderDirection41, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray40, orderDirection44, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection47 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray40, orderDirection47, false);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray68, doubleArray87);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray68, orderDirection89, true);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray40, orderDirection89, false);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection89, true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + orderDirection41 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection41.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + orderDirection47 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection47.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) ' ');
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray67);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray50, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection71 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray50, orderDirection71, true);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray26, orderDirection71, false, false);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray26);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray77);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray84);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray77, doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray20, doubleArray77);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 32 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection71 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection71.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.2584423289608705E9, -1.2584423289608705E9, -1.2584423289608704E10]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-Infinity, -Infinity, -Infinity]");
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1346.545580364809d, 9.226011509507019E11d, (-273300.0d), (double) '#');
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.2423244926866538E15d + "'", double4 == 1.2423244926866538E15d);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (double) 100L);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray41);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray9, doubleArray41);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray9, doubleArray71);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray55, (double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-291.0, 64.66666666666667, 323.3333333333333]");
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1101.0d, 111.0d, (double) '4', 212170.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.1155051E7d + "'", double4 == 1.1155051E7d);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray18, doubleArray49);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray49, 144652.08102413287d);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray75);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77, (int) (byte) 0);
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray49, doubleArray77);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray77);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(7.55404E7d, doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-7.55404E8, 7.55404E7, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 20.09975124224178d + "'", double80 == 20.09975124224178d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray88);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray77, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray77);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray69, (double) 100L);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = org.apache.commons.math3.util.MathArrays.distance(doubleArray38, doubleArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-891.0, 198.0, 990.0]");
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(13.601470508735444d, 0.0d, (-1.8381134056869864E7d), 1.1155051E7d, (-273300.0d), (-1.2459825039216539E7d), 1363.329967155091d, (-2.613107296291178E10d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-2.3726249250325616E14d) + "'", double8 == (-2.3726249250325616E14d));
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray53);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale(929377.4372207435d, doubleArray53);
        double[] doubleArray62 = new double[] { (-92.0d), 13.601470508735444d, 14.866068747318506d, (-1.0f), 21009.0d, 0.0f };
        double[] doubleArray69 = new double[] { (-92.0d), 13.601470508735444d, 14.866068747318506d, (-1.0f), 21009.0d, 0.0f };
        double[] doubleArray76 = new double[] { (-92.0d), 13.601470508735444d, 14.866068747318506d, (-1.0f), 21009.0d, 0.0f };
        double[] doubleArray83 = new double[] { (-92.0d), 13.601470508735444d, 14.866068747318506d, (-1.0f), 21009.0d, 0.0f };
        double[] doubleArray90 = new double[] { (-92.0d), 13.601470508735444d, 14.866068747318506d, (-1.0f), 21009.0d, 0.0f };
        double[] doubleArray97 = new double[] { (-92.0d), 13.601470508735444d, 14.866068747318506d, (-1.0f), 21009.0d, 0.0f };
        double[][] doubleArray98 = new double[][] { doubleArray62, doubleArray69, doubleArray76, doubleArray83, doubleArray90, doubleArray97 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray53, doubleArray98);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 6 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2068.0d + "'", double54 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.7658171307194125E7, 2788132.3116622306, 9293774.372207435]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-92.0, 13.601470508735444, 14.866068747318506, -1.0, 21009.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-92.0, 13.601470508735444, 14.866068747318506, -1.0, 21009.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-92.0, 13.601470508735444, 14.866068747318506, -1.0, 21009.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-92.0, 13.601470508735444, 14.866068747318506, -1.0, 21009.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-92.0, 13.601470508735444, 14.866068747318506, -1.0, 21009.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-92.0, 13.601470508735444, 14.866068747318506, -1.0, 21009.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray98);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray42, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray81);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray81);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray61, doubleArray81);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray81, 0);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray81);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44);
        int[] intArray48 = new int[] {};
        int[] intArray53 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int54 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray53);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (short) 1);
        int[] intArray57 = new int[] {};
        int[] intArray62 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int63 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray57, intArray62);
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62, (int) (short) 1);
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray56, intArray65);
        int[] intArray67 = new int[] {};
        int[] intArray72 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int73 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray67, intArray72);
        int[] intArray75 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) 1);
        int[] intArray76 = new int[] {};
        int[] intArray81 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray76, intArray81);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray81, (int) (short) 1);
        int int85 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray75, intArray84);
        int int86 = org.apache.commons.math3.util.MathArrays.distance1(intArray65, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            int int87 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (short) 1);
        int[] intArray16 = new int[] {};
        int[] intArray21 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int22 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray16, intArray21);
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (short) 1);
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray15, intArray24);
        int[] intArray26 = new int[] {};
        int[] intArray31 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int32 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray26, intArray31);
        double double33 = org.apache.commons.math3.util.MathArrays.distance(intArray24, intArray31);
        double double34 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray24);
        int[] intArray35 = new int[] {};
        int[] intArray40 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int41 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray35, intArray40);
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40, (int) (short) 1);
        int[] intArray44 = new int[] {};
        int[] intArray49 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int50 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray44, intArray49);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) (short) 1);
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray43, intArray52);
        int[] intArray54 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52);
        int int55 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray52);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray10 = new float[] { (short) 1, (-1L) };
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray10);
        float[] floatArray14 = new float[] { (-1L), (byte) 10 };
        float[] floatArray18 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray14, floatArray18);
        float[] floatArray22 = new float[] { (short) 1, (-1L) };
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray18, floatArray22);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(floatArray10, floatArray22);
        float[] floatArray27 = new float[] { (-1L), (byte) 10 };
        float[] floatArray31 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray27, floatArray31);
        float[] floatArray35 = new float[] { (short) 1, (-1L) };
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray31, floatArray35);
        float[] floatArray39 = new float[] { (-1L), (byte) 10 };
        float[] floatArray43 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray39, floatArray43);
        float[] floatArray45 = null;
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray45);
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equals(floatArray31, floatArray39);
        float[] floatArray50 = new float[] { (-1L), (byte) 10 };
        float[] floatArray54 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray50, floatArray54);
        float[] floatArray56 = null;
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equals(floatArray50, floatArray56);
        float[] floatArray60 = new float[] { (-1L), (byte) 10 };
        float[] floatArray64 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray60, floatArray64);
        float[] floatArray68 = new float[] { (short) 1, (-1L) };
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray64, floatArray68);
        float[] floatArray72 = new float[] { (-1L), (byte) 10 };
        float[] floatArray76 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray72, floatArray76);
        float[] floatArray78 = null;
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(floatArray72, floatArray78);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(floatArray64, floatArray72);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(floatArray50, floatArray64);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equals(floatArray31, floatArray50);
        float[] floatArray85 = new float[] { (-1L), (byte) 10 };
        float[] floatArray89 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray85, floatArray89);
        float[] floatArray93 = new float[] { (short) 1, (-1L) };
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray89, floatArray93);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray31, floatArray93);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.equals(floatArray22, floatArray31);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(floatArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray85), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray89), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(floatArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray93), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) '#');
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, 0);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (short) 1);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray59, intArray68);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray59, (int) (short) 100);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray71);
        double double73 = org.apache.commons.math3.util.MathArrays.distance(intArray50, intArray71);
        int[] intArray74 = org.apache.commons.math3.util.MathArrays.copyOf(intArray50);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-2.6653694205680016E13d), 79.0d, (-12.601470508735444d), 1353.329967155091d, (-92.0d), (-92.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2.1056418422573112E15d) + "'", double6 == (-2.1056418422573112E15d));
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray68);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray68);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray8, doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray73);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (-0.9 >= -2)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-0.9, -2.0, Infinity]");
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection63 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray62, orderDirection63, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray62, orderDirection66, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30, orderDirection66, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (-9 <= 2)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + orderDirection63 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection63.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(212170.0d, (-2.665302576915262E10d), (-2.665302576915262E10d), 1366.9312345542478d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-5.691405330860345E15d) + "'", double4 == (-5.691405330860345E15d));
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        double double42 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray29);
        int[] intArray43 = new int[] {};
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray43, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 1);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int int61 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray60);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray51, (int) (short) 100);
        int[] intArray64 = new int[] {};
        int[] intArray69 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 1);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78, (int) (short) 1);
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray81);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) 100);
        double double85 = org.apache.commons.math3.util.MathArrays.distance(intArray51, intArray72);
        int int86 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray51);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (byte) 100);
        int[] intArray90 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray88);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray77, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray77);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray69, (double) 100L);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray69);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray27, doubleArray57);
        double double96 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray8, doubleArray27);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.scale((double) 'a', doubleArray8);
        double double98 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[970.0, -97.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 10.04987562112089d + "'", double98 == 10.04987562112089d);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(9.226011509507019E11d, 1.2423244926866538E15d, (double) 0L, 0.0d, (double) 1L, 1366.9312345542478d, 1353.329967155091d, (-7.6769830141116774E18d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1461596173157833E27d + "'", double8 == 1.1461596173157833E27d);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(101.0d, (-2.6131166153754868E10d), (double) (byte) -1, 1.2459825039216539E7d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-2.639260241354281E12d) + "'", double4 == (-2.639260241354281E12d));
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray40);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray32, (double) 100L);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray32);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray74, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray74);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray20, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.scale((double) 1L, doubleArray20);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-919.0, 203.0, 1010.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1.5183756289549949E7d, (double) (-1), (double) (byte) -1, (double) (short) 10, (double) 100L, (double) (short) -1, 1.4951800047059846E8d, 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.5183866289549949E7d) + "'", double8 == (-1.5183866289549949E7d));
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.3755656043295059E12d), 0.0d, 1.5460450237574002E8d, (double) (byte) 10);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.5460450237574003E9d + "'", double4 == 1.5460450237574003E9d);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray8 = null;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray8);
        float[] floatArray12 = new float[] { (-1L), (byte) 10 };
        float[] floatArray16 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray12, floatArray16);
        float[] floatArray20 = new float[] { (short) 1, (-1L) };
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray16, floatArray20);
        float[] floatArray24 = new float[] { (-1L), (byte) 10 };
        float[] floatArray28 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray24, floatArray28);
        float[] floatArray30 = null;
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray24);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray16);
        float[] floatArray36 = new float[] { (-1L), (byte) 10 };
        float[] floatArray40 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray36, floatArray40);
        float[] floatArray44 = new float[] { (short) 1, (-1L) };
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray40, floatArray44);
        float[] floatArray48 = new float[] { (-1L), (byte) 10 };
        float[] floatArray52 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray48, floatArray52);
        float[] floatArray54 = null;
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(floatArray48, floatArray54);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(floatArray40, floatArray48);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray40);
        float[] floatArray58 = null;
        float[] floatArray61 = new float[] { (-1L), (byte) 10 };
        float[] floatArray65 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray61, floatArray65);
        float[] floatArray69 = new float[] { (short) 1, (-1L) };
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray65, floatArray69);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equals(floatArray58, floatArray65);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equals(floatArray40, floatArray65);
        float[] floatArray75 = new float[] { (-1L), (byte) 10 };
        float[] floatArray79 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray75, floatArray79);
        float[] floatArray83 = new float[] { (short) 1, (-1L) };
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray79, floatArray83);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray40, floatArray79);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray83), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray69);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray69);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray9, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.scale((-2.6653694205680016E13d), doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray74);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -0.9 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-0.9, -2.0, Infinity]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[2.3988324785112016E13, 5.330738841136003E13, -Infinity]");
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray37, orderDirection38, false);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16, orderDirection38, true, false);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, (int) (short) 10);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray63);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray75);
        double double77 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray63, doubleArray75);
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray84, orderDirection85, false);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray63, orderDirection85, true, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16, orderDirection85, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not decreasing (-1 < 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2111.0d + "'", double77 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray38, 100.0d);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray71);
        double[] doubleArray77 = new double[] { 1, 1, 10 };
        double[] doubleArray81 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray81);
        double[] doubleArray86 = new double[] { 1, 1, 10 };
        double[] doubleArray90 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray86, doubleArray90);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray90);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray73, doubleArray92);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray54, doubleArray92);
        double[] doubleArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double96 = org.apache.commons.math3.util.MathArrays.distance(doubleArray92, doubleArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[111.11111111111111, -11.11111111111111, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[111.11111111111111, -11.11111111111111, 0.0]");
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(102098.0d, (-2.666466636913762E8d), (-19.0d), 1.5183756289549949E7d, 2068.0d, 0.0d, 2165.0d, 1.5183756289549949E7d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-2.7191506728564754E13d) + "'", double8 == (-2.7191506728564754E13d));
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) -1, (-2.3726249250325616E14d), (double) 10.0f, 116405.9998500075d, 101.0d, (-101.0d), 13.601470508735444d, (-2.667039156913762E7d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.3726213090057078E14d + "'", double8 == 2.3726213090057078E14d);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        long[][] longArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray40);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray32, (double) 100L);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray32);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray74, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray74);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray20, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.scale((double) 1L, doubleArray20);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.scale((-1.552472386491933E14d), doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-919.0, 203.0, 1010.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.39722514784273984E17, -3.1049447729838664E16, -1.55247238649193312E17]");
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.691405330860345E15d), 212170.0d, 1.4951800047059846E8d, (-2.613107296291178E10d), 101.0d, 9319.084308623767d, 1.0d, (double) 10L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.2114525348282043E21d) + "'", double8 == (-1.2114525348282043E21d));
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 10);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int[] intArray18 = new int[] {};
        int[] intArray23 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray23);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (short) 1);
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray26);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int[] intArray37 = new int[] {};
        int[] intArray42 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int43 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray37, intArray42);
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray42, (int) (short) 1);
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray36, intArray45);
        int int47 = org.apache.commons.math3.util.MathArrays.distance1(intArray26, intArray45);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray5, intArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57, 0);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray66);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray72);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray72);
        java.lang.Class<?> wildcardClass75 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray8, (double) 100L);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray50);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray62);
        double double64 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray50, doubleArray62);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection65 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray62, orderDirection65, true);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray33, orderDirection65, true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2111.0d + "'", double64 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection65 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection65.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 10);
        int[] intArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 1);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray18);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (short) 100);
        int[] intArray22 = new int[] {};
        int[] intArray27 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray22, intArray27);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (short) 1);
        int[] intArray31 = new int[] {};
        int[] intArray36 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray31, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (short) 1);
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray39);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (short) 100);
        double double43 = org.apache.commons.math3.util.MathArrays.distance(intArray9, intArray30);
        int[] intArray44 = new int[] {};
        int[] intArray49 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int50 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray44, intArray49);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) (short) 1);
        int[] intArray53 = new int[] {};
        int[] intArray58 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray58);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (short) 1);
        int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray61);
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 100);
        int[] intArray65 = new int[] {};
        int[] intArray70 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int71 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray65, intArray70);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70, (int) (short) 1);
        int[] intArray74 = new int[] {};
        int[] intArray79 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int80 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray74, intArray79);
        int[] intArray82 = org.apache.commons.math3.util.MathArrays.copyOf(intArray79, (int) (short) 1);
        int int83 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray82);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (short) 100);
        double double86 = org.apache.commons.math3.util.MathArrays.distance(intArray52, intArray73);
        int int87 = org.apache.commons.math3.util.MathArrays.distance1(intArray30, intArray52);
        int[] intArray89 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(88.21557489650559d, 1353.329967155091d, (double) 1.0f, 100.0d, (-2.666466636913762E8d), 79.0d, (double) (byte) 10, (double) (byte) 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-2.1064966936837643E10d) + "'", double8 == (-2.1064966936837643E10d));
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray40, doubleArray59);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection61 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray40, orderDirection61, true);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16, orderDirection61, false, false);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray16);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray67);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection70 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray67, orderDirection70, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray8, orderDirection70, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not increasing (10 > -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection61 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection61.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.2584423289608705E9, -1.2584423289608705E9, -1.2584423289608704E10]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + orderDirection70 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection70.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1.5460450237574002E8d, (-2.7191506728564754E13d), (-2.1064966936837643E10d), (-1.8381134056869864E7d), 2165.0d, 439.780879782446d, 0.0d, 1.5460450237574003E9d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-4.2035421686351696E21d) + "'", double8 == (-4.2035421686351696E21d));
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        java.lang.Class<?> wildcardClass19 = doubleArray18.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray45);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray28, doubleArray47);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection49, true);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray4, orderDirection49, false, false);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray4);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray55);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray75);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equals(doubleArray64, doubleArray75);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray90 = new double[] { 1, 1, 10 };
        double[] doubleArray94 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray90, doubleArray94);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray85, doubleArray94);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray94);
        double double98 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray56, doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection49 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection49.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 2010.0d + "'", double98 == 2010.0d);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray48);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection50, true);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray5, orderDirection50, false, false);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray5);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray56);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray63);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray56, doubleArray63);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray71);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -? is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.2584423289608705E9, -1.2584423289608705E9, -1.2584423289608704E10]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-Infinity, -Infinity, -Infinity]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-Infinity, -Infinity, -Infinity]");
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray61);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray64);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) 'a');
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray75, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray19, doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-810000.0, -40000.0, -1000000.0]");
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, 0);
        int[] intArray17 = new int[] {};
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray22);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 1);
        int[] intArray26 = new int[] {};
        int[] intArray31 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int32 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray26, intArray31);
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (short) 1);
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray25, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, 0);
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 1);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 1);
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray46, intArray55);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (short) 100);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58);
        double double60 = org.apache.commons.math3.util.MathArrays.distance(intArray37, intArray58);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37);
        int int62 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray61);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection57 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray56, orderDirection57, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection60 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray56, orderDirection60, false);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray44, orderDirection60, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18, orderDirection60, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not decreasing (-900 < 200)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + orderDirection57 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection57.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + orderDirection60 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection60.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1360.1470508735442d, 1360.1470508735442d, (-4.2035421686351696E21d), (-1.552472386491933E14d), (-7.6769830141116774E18d), 14.866068747318506d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 6.525883142260517E35d + "'", double6 == 6.525883142260517E35d);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray37, orderDirection38, false);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16, orderDirection38, true, false);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, (int) (short) 10);
        java.lang.Class<?> wildcardClass46 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(doubleArray32, doubleArray43);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray62);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray65);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, (int) 'a');
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray87);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(doubleArray76, doubleArray87);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray20, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-2.667039156913762E7d), doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[2.4003352412223858E10, -5.334078313827524E9, -2.6670391569137623E10]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-810000.0, -40000.0, -1000000.0]");
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-4.149720547934001E12d), (double) (-1L), (double) (-1L), 10.0d, (double) (byte) 0, (-1.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 4.149720547924001E12d + "'", double6 == 4.149720547924001E12d);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(2068.0d, 21.0d, 12.0d, 21.0d, 1353.329967155091d, (double) (short) 10, (double) 100.0f, (-92.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 48013.29967155091d + "'", double8 == 48013.29967155091d);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray42, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray72);
        double[] doubleArray79 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray75, doubleArray79);
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray0, doubleArray79);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1427.5857242211412d + "'", double81 == 1427.5857242211412d);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, 144652.08102413287d);
        java.lang.Class<?> wildcardClass65 = doubleArray47.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 10, 1000.0499987500625d, 7.55404E7d, (-2.3726249250325616E14d), 6.525883142260517E35d, (-1.2459825039216539E7d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-8.13113621789387E42d) + "'", double6 == (-8.13113621789387E42d));
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) '4');
        java.lang.Class<?> wildcardClass17 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        float[] floatArray2 = new float[] { (-1.0f), 100.0f };
        float[] floatArray5 = new float[] { (-1L), (byte) 10 };
        float[] floatArray9 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray5, floatArray9);
        float[] floatArray13 = new float[] { (short) 1, (-1L) };
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray9, floatArray13);
        float[] floatArray17 = new float[] { (-1L), (byte) 10 };
        float[] floatArray21 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray17, floatArray21);
        float[] floatArray23 = null;
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(floatArray17, floatArray23);
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equals(floatArray9, floatArray17);
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray17);
        float[] floatArray29 = new float[] { (-1L), (byte) 10 };
        float[] floatArray33 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray29, floatArray33);
        float[] floatArray37 = new float[] { (short) 1, (-1L) };
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray33, floatArray37);
        float[] floatArray41 = new float[] { (-1L), (byte) 10 };
        float[] floatArray45 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray41, floatArray45);
        float[] floatArray47 = null;
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(floatArray41, floatArray47);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(floatArray33, floatArray41);
        float[] floatArray52 = new float[] { (-1L), (byte) 10 };
        float[] floatArray56 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray52, floatArray56);
        float[] floatArray58 = null;
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(floatArray52, floatArray58);
        float[] floatArray62 = new float[] { (-1L), (byte) 10 };
        float[] floatArray66 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray62, floatArray66);
        float[] floatArray70 = new float[] { (short) 1, (-1L) };
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray66, floatArray70);
        float[] floatArray74 = new float[] { (-1L), (byte) 10 };
        float[] floatArray78 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray74, floatArray78);
        float[] floatArray80 = null;
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(floatArray74, floatArray80);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equals(floatArray66, floatArray74);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(floatArray52, floatArray66);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equals(floatArray33, floatArray52);
        float[] floatArray87 = new float[] { (-1L), (byte) 10 };
        float[] floatArray91 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray87, floatArray91);
        float[] floatArray95 = new float[] { (short) 1, (-1L) };
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray91, floatArray95);
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray33, floatArray95);
        boolean boolean98 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray95);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(floatArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray87), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray91), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(floatArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray95), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray41);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray83);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray41, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.scale((-2.613107296291178E10d), doubleArray86);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection90 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray89, orderDirection90, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not increasing (23,779,276,396,249.723 > -5,252,345,665,545.268)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[2.3779276396249723E13, -5.252345665545268E12, -2.613107296291178E13]");
        org.junit.Assert.assertTrue("'" + orderDirection90 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection90.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double double53 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray17, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-2.667039156913762E7d), doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (26,670,391.569 >= -0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-2.667039156913762E8, 2.667039156913762E7, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 474492.3840484359d, 0.0d, (double) ' ', (double) (-1), (-2.667039156913762E7d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.667039156913762E7d + "'", double6 == 2.667039156913762E7d);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray42, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray72);
        double[] doubleArray79 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray75, doubleArray79);
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray79);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (byte) 10, doubleArray79);
        double double83 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray79);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79, 98);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray85);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (1,000 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1000.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1427.5857242211412d + "'", double81 == 1427.5857242211412d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1000.0499987500625d + "'", double83 == 1000.0499987500625d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1000.0, 0.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray83);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(doubleArray72, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray72);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray87);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -919 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-919.0, 203.0, 1010.0]");
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray44);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 100);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray56 = new int[] {};
        int[] intArray61 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray56, intArray61);
        int int63 = org.apache.commons.math3.util.MathArrays.distance1(intArray49, intArray61);
        double double64 = org.apache.commons.math3.util.MathArrays.distance(intArray44, intArray61);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (byte) 100);
        int[] intArray67 = new int[] {};
        int[] intArray72 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int73 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray67, intArray72);
        int[] intArray75 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) 1);
        int[] intArray76 = new int[] {};
        int[] intArray81 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray76, intArray81);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray81, (int) (short) 1);
        int int85 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray75, intArray84);
        int[] intArray86 = org.apache.commons.math3.util.MathArrays.copyOf(intArray84);
        int[] intArray87 = org.apache.commons.math3.util.MathArrays.copyOf(intArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double88 = org.apache.commons.math3.util.MathArrays.distance(intArray44, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1]");
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) 100L);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray31);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray84);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(doubleArray73, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray73);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray19, doubleArray87);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.scale((double) 1L, doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray89);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-919.0, 203.0, 1010.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-900.0, 200.0, 1000.0]");
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (byte) 100, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray18, orderDirection39, true);
        double double42 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray18);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray49, orderDirection50, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray49, orderDirection53, false);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray84);
        double double86 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray72, doubleArray84);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection87 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray84, orderDirection87, true);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray49, orderDirection87, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18, orderDirection87, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (0 <= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection53.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2111.0d + "'", double86 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection87 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection87.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray54);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray37, doubleArray56);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray76);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equals(doubleArray65, doubleArray76);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray56, doubleArray76);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray76);
        java.lang.Class<?> wildcardClass81 = doubleArray80.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.2459825039216539E7d), 474492.3840484359d, 9.226011509507019E11d, (-5.479592817681999E9d), (-1.3755656043295059E12d), 100.00499987500625d, 21009.0d, (double) 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-5.055478783810143E21d) + "'", double8 == (-5.055478783810143E21d));
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1346.545580364809d, (-1.2459825039216539E7d), 0.0d, (-9200.0d), (double) 0L, (double) (short) 0, (-7.6769830141116774E18d), (double) (byte) -1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 7.6769829973339556E18d + "'", double8 == 7.6769829973339556E18d);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray53);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale(929377.4372207435d, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray74);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equals(doubleArray63, doubleArray74);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        double[] doubleArray89 = new double[] { 1, 1, 10 };
        double[] doubleArray93 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray89, doubleArray93);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray93);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray93);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray93);
        double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray53, doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2068.0d + "'", double54 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.7658171307194125E7, 2788132.3116622306, 9293774.372207435]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[-190.0, 49.0, 97.0, -10.0, 0.0]");
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray17, doubleArray48);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray48, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.scale((-2165.0d), doubleArray75);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray80);
        double double87 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray76, doubleArray86);
        double[] doubleArray88 = new double[] {};
        double[] doubleArray89 = new double[] {};
        double[] doubleArray90 = new double[] {};
        double[] doubleArray91 = new double[] {};
        double[][] doubleArray92 = new double[][] { doubleArray88, doubleArray89, doubleArray90, doubleArray91 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray86, doubleArray92);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-890.0, 199.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1926850.0, -430835.0, -2165000.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-2.0153985E7d) + "'", double87 == (-2.0153985E7d));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 1);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray18);
        int[] intArray20 = new int[] {};
        int[] intArray25 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray25);
        double double27 = org.apache.commons.math3.util.MathArrays.distance(intArray18, intArray25);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100, 100, 35]");
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray68, doubleArray87);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray68, orderDirection89, true);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray44, orderDirection89, false, false);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray44);
        double double96 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray38, doubleArray44);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray44);
        double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray44, 1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 12.0d + "'", double96 == 12.0d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[1.0]");
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 235, 439.780879782446d, 1366.9312345542478d, (double) 1);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 104715.43798342906d + "'", double4 == 104715.43798342906d);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 10);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int[] intArray18 = new int[] {};
        int[] intArray23 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray23);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (short) 1);
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray26);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int[] intArray37 = new int[] {};
        int[] intArray42 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int43 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray37, intArray42);
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray42, (int) (short) 1);
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray36, intArray45);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 1);
        int[] intArray56 = new int[] {};
        int[] intArray61 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray56, intArray61);
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray61, (int) (short) 1);
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray55, intArray64);
        int int66 = org.apache.commons.math3.util.MathArrays.distance1(intArray45, intArray64);
        int[] intArray67 = new int[] {};
        int[] intArray72 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int73 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray67, intArray72);
        int[] intArray75 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) 1);
        int int76 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray45, intArray72);
        double double77 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray72);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.3755656043295059E12d), (-1.8381134056869864E7d), (double) (-1L), 0.0d, (double) 0L, 104715.43798342906d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.5284455777199858E19d + "'", double6 == 2.5284455777199858E19d);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) ' ', 14.866068747318506d, 7.6769829973339556E18d, 104715.43798342906d, (double) '#', 12.0d, 135542.9967155091d, 2068.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 8.038986369571635E23d + "'", double8 == 8.038986369571635E23d);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double double41 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray40);
        java.lang.Class<?> wildcardClass43 = doubleArray40.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1366.9312345542478d + "'", double41 == 1366.9312345542478d);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1.5460450237574002E8d, 9.226011509507019E11d, 7.6769829973339556E18d, (double) 10, 21.0d, 1.5460450237574003E9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.1940812183982476E20d + "'", double6 == 2.1940812183982476E20d);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        double double34 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double double45 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray28, doubleArray44);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray62);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray77 = new double[] { 1, 1, 10 };
        double[] doubleArray81 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray64, doubleArray83);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray64, orderDirection85, true);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray28, doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray88);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1360.1470508735442d + "'", double34 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 990.0d + "'", double45 == 990.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray4);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray30, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equals(doubleArray58, doubleArray69);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray49, doubleArray69);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, 0);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray84);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(doubleArray69, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray84);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[9.0, 9.0, 90.0]");
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray69);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray69);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray9, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.scale((-2.6653694205680016E13d), doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray75);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -? is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-0.9, -2.0, Infinity]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[2.3988324785112016E13, 5.330738841136003E13, -Infinity]");
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 10);
        int int19 = org.apache.commons.math3.util.MathArrays.distance1(intArray5, intArray15);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100, 100, 35]");
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57, 0);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray68);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.scale(111.0d, doubleArray68);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray57, doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray75, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray47);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(doubleArray36, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray36);
        double double51 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray28);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray68);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray70, (int) ' ');
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray0, doubleArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 21.0d + "'", double51 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) ' ', 1.5460450237574003E9d, (double) 0L, (-1.5183866289549949E7d), 1.5460450237574002E8d, 1.1155051E7d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.7246705822717612E15d + "'", double6 == 1.7246705822717612E15d);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10, (double) (byte) 0, 1.5460450237574003E9d, (double) 0L, (-2.615914305086962E12d), 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2.615914305086962E12d) + "'", double6 == (-2.615914305086962E12d));
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray4);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray30, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equals(doubleArray58, doubleArray69);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray49, doubleArray69);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, 0);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray84);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(doubleArray69, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray84);
        java.lang.Class<?> wildcardClass88 = doubleArray11.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[9.0, 9.0, 90.0]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray41);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray83);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray41, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray8);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -100 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1000.0, -100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1000.0, -100.0, 0.0]");
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        double double61 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray47, doubleArray59);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection69 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray68, orderDirection69, false);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray47, orderDirection69, true, false);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47, (int) (short) 10);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray28, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray76, 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray76);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2111.0d + "'", double61 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + orderDirection69 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection69.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection18 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray17, orderDirection18, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray17, orderDirection21, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray3, orderDirection21, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not decreasing (1 < 10)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + orderDirection18 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection18.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray69);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray69);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray9, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.scale(1353.329967155091d, doubleArray73);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray73, 1.4678500047059846E9d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-0.9, -2.0, Infinity]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[13533.29967155091, -1353.329967155091, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.630944449673316E9, -1.6309444496733162E8, 0.0]");
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray56);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equals(doubleArray45, doubleArray56);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray56);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray87);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(doubleArray76, doubleArray87);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray76);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray68, (double) 100L);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray68);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray26, doubleArray56);
        double double95 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray7, doubleArray26);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray7, orderDirection96, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray61);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray64);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) 'a');
        double[] doubleArray68 = null;
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray68);
        double[] doubleArray74 = new double[] { 1353.329967155091d, (-7.6769830141116774E18d), (-92.0d), 21.0d };
        double[] doubleArray79 = new double[] { 1353.329967155091d, (-7.6769830141116774E18d), (-92.0d), 21.0d };
        double[] doubleArray84 = new double[] { 1353.329967155091d, (-7.6769830141116774E18d), (-92.0d), 21.0d };
        double[] doubleArray89 = new double[] { 1353.329967155091d, (-7.6769830141116774E18d), (-92.0d), 21.0d };
        double[][] doubleArray90 = new double[][] { doubleArray74, doubleArray79, doubleArray84, doubleArray89 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray68, doubleArray90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1353.329967155091, -7.6769830141116774E18, -92.0, 21.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1353.329967155091, -7.6769830141116774E18, -92.0, 21.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1353.329967155091, -7.6769830141116774E18, -92.0, 21.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1353.329967155091, -7.6769830141116774E18, -92.0, 21.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray88);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray77, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray77);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray69, (double) 100L);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray69);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray27, doubleArray57);
        double double96 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray8, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(144652.08102413287d, doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (1,446,520.81 >= -144,652.081)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1446520.8102413288, -144652.08102413287, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        double double61 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray47, doubleArray59);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection69 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray68, orderDirection69, false);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray47, orderDirection69, true, false);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47, (int) (short) 10);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray28, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray76, 100);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79, 235);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2111.0d + "'", double61 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + orderDirection69 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection69.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray48);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection50, true);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray5, orderDirection50, false, false);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray5);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray56);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray63);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray56, doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray70);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (-? >= -?)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.2584423289608705E9, -1.2584423289608705E9, -1.2584423289608704E10]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-Infinity, -Infinity, -Infinity]");
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.2459825039216539E7d), 12.0d, 48013.29967155091d, 1.5460450237574002E8d, 1010.0d, 1.5460450237574002E8d, (double) 10L, (double) (short) 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 7.579073332736437E12d + "'", double8 == 7.579073332736437E12d);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray68, doubleArray87);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray68, orderDirection89, true);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray44, orderDirection89, false, false);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray44);
        double double96 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray38, doubleArray44);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray44);
        java.lang.Class<?> wildcardClass98 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 12.0d + "'", double96 == 12.0d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray61);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray64);
        double[] doubleArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray64, doubleArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(20.09975124224178d, 1.1461596173157833E27d, 116405.9998500075d, 100.00499987500625d, 13.601470508735444d, (-1.3755656043295059E12d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.303752319195026E28d + "'", double6 == 2.303752319195026E28d);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray55, orderDirection56, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray44);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) 'a');
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray60, 0);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78, (int) (short) 1);
        int int82 = org.apache.commons.math3.util.MathArrays.distance1(intArray72, intArray81);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray81);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray81, (int) '#');
        int int86 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray81);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray10, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double double24 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        double[][] doubleArray25 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray23, doubleArray25);
        double[] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray23, doubleArray27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 4.533823502911814d + "'", double24 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-2165.0d), (-79.0d), 100.0d, 10.04987562112089d, Double.NaN, 116405.9998500075d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) '#');
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, 0);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (short) 1);
        int int60 = org.apache.commons.math3.util.MathArrays.distance1(intArray50, intArray59);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray59);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.691405330860345E15d), 48013.29967155091d, (double) (byte) -1, 79.0d, (-1.3755656043295059E12d), (double) (byte) 0, 14.866068747318506d, (-2.639260241354281E12d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-2.7326318893828427E20d) + "'", double8 == (-2.7326318893828427E20d));
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 1, (double) 98, 2165.0d, (double) 100L, (double) (byte) 100, (-1.2114525348282043E21d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.2114525348282044E23d) + "'", double6 == (-1.2114525348282044E23d));
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray15, orderDirection16, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection19 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray15, orderDirection19, false);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray3, orderDirection19, true);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray28);
        double[] doubleArray39 = new double[] { 1, 1, 10 };
        double[] doubleArray43 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray43);
        double double45 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray35, doubleArray39);
        double double46 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray3, doubleArray39);
        double[] doubleArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + orderDirection19 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection19.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1020.0d + "'", double45 == 1020.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(439.780879782446d, (double) 100, 6.525883142260517E35d, 20.09975124224178d, 0.0d, (double) (byte) -1, 0.0d, 20.09975124224178d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.3116862779537551E37d + "'", double8 == 1.3116862779537551E37d);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double double50 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray27);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray27, doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray54);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (1 >= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 21.0d + "'", double50 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray27, (double) 100L);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray27);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray27);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray7, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray55);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (11.111 >= -1.111)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[11.11111111111111, -1.1111111111111112, 0.0]");
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray83);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(doubleArray72, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray72);
        double double87 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray72);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1353.329967155091d + "'", double87 == 1353.329967155091d);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray28);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray28, (-2.6131166153754868E10d));
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[7.83934984612646E10, -1.742077743583658E10, -8.710388717918289E10]");
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray27, (double) 100L);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray27);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray27);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection54 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray7, orderDirection54, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray60);
        double double64 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray41);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.scale(1.4678500047059846E9d, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray65);
        java.lang.Class<?> wildcardClass67 = doubleArray65.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.3210650042353862E12, 2.935700009411969E11, 1.4678500047059846E12]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray57);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray65);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray65);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, 98);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100, 100, 35]");
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection27, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection30, false);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray14, orderDirection30, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray10, orderDirection30, true, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (1 <= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray10 = new float[] { (short) 1, (-1L) };
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray10);
        float[] floatArray14 = new float[] { (-1L), (byte) 10 };
        float[] floatArray18 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray14, floatArray18);
        float[] floatArray22 = new float[] { (short) 1, (-1L) };
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray18, floatArray22);
        float[] floatArray26 = new float[] { (-1L), (byte) 10 };
        float[] floatArray30 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray26, floatArray30);
        float[] floatArray34 = new float[] { (short) 1, (-1L) };
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray30, floatArray34);
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equals(floatArray22, floatArray34);
        float[] floatArray39 = new float[] { (-1L), (byte) 10 };
        float[] floatArray43 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray39, floatArray43);
        float[] floatArray47 = new float[] { (short) 1, (-1L) };
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray43, floatArray47);
        float[] floatArray51 = new float[] { (-1L), (byte) 10 };
        float[] floatArray55 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray51, floatArray55);
        float[] floatArray57 = null;
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equals(floatArray51, floatArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(floatArray43, floatArray51);
        float[] floatArray62 = new float[] { (-1L), (byte) 10 };
        float[] floatArray66 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray62, floatArray66);
        float[] floatArray68 = null;
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(floatArray62, floatArray68);
        float[] floatArray72 = new float[] { (-1L), (byte) 10 };
        float[] floatArray76 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray72, floatArray76);
        float[] floatArray80 = new float[] { (short) 1, (-1L) };
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray76, floatArray80);
        float[] floatArray84 = new float[] { (-1L), (byte) 10 };
        float[] floatArray88 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray84, floatArray88);
        float[] floatArray90 = null;
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(floatArray84, floatArray90);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(floatArray76, floatArray84);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equals(floatArray62, floatArray76);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equals(floatArray43, floatArray62);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equals(floatArray22, floatArray62);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.equals(floatArray6, floatArray22);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(floatArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray80), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(floatArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray84), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray88), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10.0f, 1427.5857242211412d, (-2.6131166153754868E10d), (-1.8381134056869864E7d), 13.601470508735444d, (-1058.0d), (-1.2114525348282043E21d), (double) (short) 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.21097221436007E21d) + "'", double8 == (-1.21097221436007E21d));
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 1);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray18);
        int[] intArray20 = new int[] {};
        int[] intArray25 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray25);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, (int) (short) 1);
        int[] intArray29 = new int[] {};
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 1);
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray37);
        int int39 = org.apache.commons.math3.util.MathArrays.distance1(intArray18, intArray37);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray45);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(21.0d, (-1.2114525348282043E21d), (double) 'a', (double) (byte) -1, 1.1461596173157833E27d, (-5.644230165222219E15d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-6.469188686213299E42d) + "'", double6 == (-6.469188686213299E42d));
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray38, doubleArray57);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray38, orderDirection59, true);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray17, orderDirection59, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection59, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection59 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection59.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray67);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray69, doubleArray88);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection90 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection90, true);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray45, orderDirection90, false, false);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray45);
        double double97 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray39, doubleArray45);
        double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.scale((-183792.33961872238d), doubleArray45);
        double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.scale((-2.613107296291178E10d), doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection90 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection90.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 12.0d + "'", double97 == 12.0d);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[-183792.33961872238, -183792.33961872238, -1837923.396187224]");
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[4.802691036601096E15, 4.802691036601096E15, 4.8026910366010968E16]");
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray20 = new int[] {};
        int[] intArray25 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray25);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, (int) (short) 1);
        int[] intArray29 = new int[] {};
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 1);
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray37);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28, 0);
        int[] intArray41 = new int[] {};
        int[] intArray46 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray41, intArray46);
        int int48 = org.apache.commons.math3.util.MathArrays.distance1(intArray28, intArray46);
        int int49 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray46);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        long[] longArray4 = new long[] { (byte) -1, (short) 0, 10, (byte) 10 };
        long[] longArray9 = new long[] { (byte) -1, (short) 0, 10, (byte) 10 };
        long[] longArray14 = new long[] { (byte) -1, (short) 0, 10, (byte) 10 };
        long[][] longArray15 = new long[][] { longArray4, longArray9, longArray14 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: -1 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(longArray15);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray48);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        double double62 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray48, doubleArray60);
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection70 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray69, orderDirection70, false);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray48, orderDirection70, true, false);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray48, (int) (short) 10);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray29, doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray0, doubleArray77);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2111.0d + "'", double62 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + orderDirection70 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection70.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        double[] doubleArray0 = null;
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        double[] doubleArray9 = new double[] { 1, 1, 10 };
        double[] doubleArray13 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray13);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray21, orderDirection22, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray21, orderDirection25, false);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray9, orderDirection25, true);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray5, orderDirection25, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection25, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray45);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray28, doubleArray47);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection49, true);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray4, orderDirection49, false, false);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray4);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray55, orderDirection56, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection49 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection49.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-101.0, -101.0, -1010.0]");
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(2.5284455777199858E19d, 1.2423244926866538E15d, (-1.8381134056869864E7d), (double) 100L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.1411498696267944E34d + "'", double4 == 3.1411498696267944E34d);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray30, doubleArray49);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray30, orderDirection51, true);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray6, orderDirection51, false, false);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray6);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray64);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray57, doubleArray64);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.scale(1353.329967155091d, doubleArray71);
        java.lang.Class<?> wildcardClass73 = doubleArray72.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.2584423289608705E9, -1.2584423289608705E9, -1.2584423289608704E10]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-Infinity, -Infinity, -Infinity]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-Infinity, -Infinity, -Infinity]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, 100);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray26);
        double double28 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1360.1470508735442d + "'", double28 == 1360.1470508735442d);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (900 >= -200)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray5);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray5);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray31, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray70);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equals(doubleArray59, doubleArray70);
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray50, doubleArray70);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray70, 0);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray85);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.scale(1366.9312345542478d, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray88, 75611.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[9.0, 9.0, 90.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[12302.38111098823, 12302.38111098823, 123023.8111098823]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[6300.916666666667, 6300.916666666667, 63009.166666666664]");
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        java.lang.Class<?> wildcardClass61 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28, (int) ' ');
        int[] intArray32 = new int[] {};
        int[] intArray37 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray32, intArray37);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (short) 1);
        int[] intArray41 = new int[] {};
        int[] intArray46 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray41, intArray46);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (short) 1);
        int int50 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray49);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        double double58 = org.apache.commons.math3.util.MathArrays.distance(intArray49, intArray56);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (byte) 0);
        double double61 = org.apache.commons.math3.util.MathArrays.distance(intArray28, intArray56);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(doubleArray32, doubleArray43);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray62);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray65);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, (int) 'a');
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray87);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(doubleArray76, doubleArray87);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray20, doubleArray87);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray90, 1);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale(1101.0d, doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-810000.0, -40000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-810000.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-8.9181E8]");
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) -1, 4.533823502911814d, 1.0d, 7.55404E7d, 1346.545580364809d, 1427.5857242211412d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 7.746270471371837E7d + "'", double6 == 7.746270471371837E7d);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray68, doubleArray87);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray68, orderDirection89, true);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray44, orderDirection89, false, false);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray44);
        double double96 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray38, doubleArray44);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(144652.08102413287d, doubleArray38);
        double double98 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 12.0d + "'", double96 == 12.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray4);
        double[] doubleArray14 = new double[] { (-273300.0d), (-1L) };
        double[] doubleArray17 = new double[] { (-273300.0d), (-1L) };
        double[] doubleArray20 = new double[] { (-273300.0d), (-1L) };
        double[] doubleArray23 = new double[] { (-273300.0d), (-1L) };
        double[][] doubleArray24 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray4, doubleArray24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 2 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-273300.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-273300.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-273300.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-273300.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, 144652.08102413287d);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray73);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray75, (int) (byte) 0);
        double double78 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray75);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (-79.0d));
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray84);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray80, doubleArray84);
        double double92 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 20.09975124224178d + "'", double78 == 20.09975124224178d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-87.77777777777777, 8.777777777777779, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-86.77777777777777, 9.777777777777779, 10.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 88.21557489650559d + "'", double92 == 88.21557489650559d);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 0);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray31, doubleArray50);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection52 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray31, orderDirection52, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray10, orderDirection52, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (-10 <= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection52 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection52.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray4);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double double21 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray11, doubleArray15);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        double double52 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray38, doubleArray50);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection60 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray59, orderDirection60, false);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38, orderDirection60, true, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray11, orderDirection60, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (10 <= 10)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1020.0d + "'", double21 == 1020.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2111.0d + "'", double52 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + orderDirection60 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection60.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(doubleArray20, doubleArray31);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray31);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray42, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray72);
        double double76 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray31, doubleArray53);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(13.601470508735444d, doubleArray31);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray11, doubleArray31);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        double[] doubleArray91 = new double[] { 1, 1, 10 };
        double[] doubleArray95 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray91, doubleArray95);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray86, doubleArray95);
        boolean boolean98 = org.apache.commons.math3.util.MathArrays.equals(doubleArray78, doubleArray95);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 1, doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-12241.3234578619, 2720.294101747089, 13601.470508735443]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-12241.3234578619, 2720.294101747089, 136014.70508735444]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.479592817681999E9d), 1.1155051E7d, (double) 10, (-5.055478783810143E21d), 2.3726213090057078E14d, 1427.5857242211412d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5.0554510251207795E22d) + "'", double6 == (-5.0554510251207795E22d));
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44);
        java.lang.Class<?> wildcardClass48 = intArray44.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (short) -1, 1101.0d, 0.0d, (-2.5043938381010786E8d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1101.0d) + "'", double4 == (-1101.0d));
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray44);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 100);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray56 = new int[] {};
        int[] intArray61 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray56, intArray61);
        int int63 = org.apache.commons.math3.util.MathArrays.distance1(intArray49, intArray61);
        double double64 = org.apache.commons.math3.util.MathArrays.distance(intArray44, intArray61);
        int[] intArray65 = new int[] {};
        int[] intArray70 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int71 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray65, intArray70);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70, (int) (short) 1);
        int[] intArray74 = new int[] {};
        int[] intArray79 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int80 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray74, intArray79);
        int[] intArray82 = org.apache.commons.math3.util.MathArrays.copyOf(intArray79, (int) (short) 1);
        int int83 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray82);
        int[] intArray84 = new int[] {};
        int[] intArray89 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int90 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray84, intArray89);
        double double91 = org.apache.commons.math3.util.MathArrays.distance(intArray82, intArray89);
        int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray89);
        int[] intArray93 = org.apache.commons.math3.util.MathArrays.copyOf(intArray89);
        int[] intArray94 = org.apache.commons.math3.util.MathArrays.copyOf(intArray93);
        double double95 = org.apache.commons.math3.util.MathArrays.distance(intArray61, intArray94);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        double[] doubleArray2 = new double[] { '#', 929377.4372207435d };
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray19);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray19, doubleArray50);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray50, 144652.08102413287d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 2 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0, 929377.4372207435]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[160724.53447125875, -16072.453447125874, 0.0]");
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(929377.4372207435d, 7.55404E7d, (-8.13113621789387E42d), (double) 'a', 14.866068747318506d, (double) 1);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-7.887202131357053E44d) + "'", double6 == (-7.887202131357053E44d));
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray47);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(doubleArray36, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray36);
        double double51 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray28);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale(4.149720547924001E12d, doubleArray19);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19, orderDirection53, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 21.0d + "'", double51 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.scale((double) 1.0f, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        double[] doubleArray0 = new double[] {};
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean13 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray10, orderDirection11, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection14 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray10, orderDirection14, false);
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray3, orderDirection14, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection14, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + orderDirection14 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection14.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray39);
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equals(doubleArray28, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray28);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray20, (double) 100L);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(3600.0d, doubleArray20);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray10, doubleArray20);
        java.lang.Class<?> wildcardClass47 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-32400.0, 7200.0, 36000.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-32410.0, 7201.0, 36000.0]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray39);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(474492.3840484359d, doubleArray39);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray39);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39, 10);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection55 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray54, orderDirection55, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection58 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray54, orderDirection58, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection61 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray54, orderDirection61, false);
        double[][] doubleArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray47, orderDirection61, doubleArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[4744923.840484359, -474492.3840484359, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[4744923.840484359, -474492.3840484359, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + orderDirection55 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection55.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + orderDirection58 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection58.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + orderDirection61 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection61.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray16, orderDirection17, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection20 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray16, orderDirection20, false);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray4, orderDirection20, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray0, orderDirection20, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + orderDirection20 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection20.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray68);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray68);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray8, doubleArray72);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection74 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray72, orderDirection74, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not decreasing (-1 < 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-0.9, -2.0, Infinity]");
        org.junit.Assert.assertTrue("'" + orderDirection74 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection74.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.2114525348282044E23d), (-2.0153985E7d), (-2.3726249250325616E14d), 1366.9312345542478d, (-5.0554510251207795E22d), 10.04987562112089d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.4415591134470963E30d + "'", double6 == 2.4415591134470963E30d);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, 100);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray44);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray56);
        double double58 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray44, doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray26, doubleArray44);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 100 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2111.0d + "'", double58 == 2111.0d);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray5);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale(111.0d, doubleArray5);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray12, 1849908.0027625682d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray57);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray65);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray65);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, 98);
        int[] intArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int74 = org.apache.commons.math3.util.MathArrays.distance1(intArray65, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray88);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray77, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray77);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray69, (double) 100L);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray69);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray27, doubleArray57);
        double double96 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray8, doubleArray27);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.scale((double) 'a', doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (970 >= -97)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[970.0, -97.0, 0.0]");
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection69 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray68, orderDirection69, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray68, orderDirection72, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection75 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray68, orderDirection75, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray61, orderDirection75, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + orderDirection69 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection69.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + orderDirection75 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection75.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray19, (double) (byte) 1);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray43, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray77 = new double[] { 1, 1, 10 };
        double[] doubleArray81 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray81);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray82);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equals(doubleArray71, doubleArray82);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray62, doubleArray82);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray82, 0);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray8 = null;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray8);
        float[] floatArray12 = new float[] { (-1L), (byte) 10 };
        float[] floatArray16 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray12, floatArray16);
        float[] floatArray20 = new float[] { (short) 1, (-1L) };
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray16, floatArray20);
        float[] floatArray24 = new float[] { (-1L), (byte) 10 };
        float[] floatArray28 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray24, floatArray28);
        float[] floatArray30 = null;
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray24);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray16);
        float[] floatArray36 = new float[] { (-1L), (byte) 10 };
        float[] floatArray40 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray36, floatArray40);
        float[] floatArray44 = new float[] { (short) 1, (-1L) };
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray40, floatArray44);
        float[] floatArray48 = new float[] { (-1L), (byte) 10 };
        float[] floatArray52 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray48, floatArray52);
        float[] floatArray54 = null;
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(floatArray48, floatArray54);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(floatArray40, floatArray48);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray40);
        float[] floatArray58 = null;
        float[] floatArray61 = new float[] { (-1L), (byte) 10 };
        float[] floatArray65 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray61, floatArray65);
        float[] floatArray69 = new float[] { (short) 1, (-1L) };
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray65, floatArray69);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equals(floatArray58, floatArray65);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equals(floatArray40, floatArray65);
        float[] floatArray75 = new float[] { (-1L), (byte) 10 };
        float[] floatArray79 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray75, floatArray79);
        float[] floatArray83 = new float[] { (short) 1, (-1L) };
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray79, floatArray83);
        float[] floatArray87 = new float[] { (-1L), (byte) 10 };
        float[] floatArray91 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray87, floatArray91);
        float[] floatArray95 = new float[] { (short) 1, (-1L) };
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray91, floatArray95);
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.equals(floatArray83, floatArray95);
        boolean boolean98 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray65, floatArray83);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray83), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(floatArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray87), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray91), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(floatArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray95), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        double[] doubleArray0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean13 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray10, orderDirection11, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection14 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray10, orderDirection14, false);
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray3, orderDirection14, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection14, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + orderDirection14 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection14.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray25 = new double[] {};
        double[][] doubleArray26 = new double[][] { doubleArray24, doubleArray25 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray19, doubleArray26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 235, (-273300.0d), 21009.0d, 2111.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.9875501E7d) + "'", double4 == (-1.9875501E7d));
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray38, orderDirection39, false);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray17, orderDirection39, true, false);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray17, (int) (short) 10);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.scale((-1.5183866289549949E7d), doubleArray17);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray89 = new double[] { 1, 1, 10 };
        double[] doubleArray93 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray89, doubleArray93);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray94);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.equals(doubleArray83, doubleArray94);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray83);
        double double98 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray66, doubleArray75);
        boolean boolean99 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.518386628954995E8, 1.5183866289549949E7, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 21.0d + "'", double98 == 21.0d);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 1363.329967155091d, 1427.5857242211412d, (-5.055478783810143E21d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-7.217129340870217E24d) + "'", double4 == (-7.217129340870217E24d));
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double double50 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray27);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray67);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, (int) ' ');
        double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray69);
        double[] doubleArray73 = null;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray87 = new double[] { 1, 1, 10 };
        double[] doubleArray91 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray87, doubleArray91);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray91);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray93, (int) ' ');
        double double96 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray93);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray93);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 21.0d + "'", double50 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray5);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray5);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray31, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray70);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equals(doubleArray59, doubleArray70);
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray50, doubleArray70);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray70, 0);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray85);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.scale(1366.9312345542478d, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[9.0, 9.0, 90.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[12302.38111098823, 12302.38111098823, 123023.8111098823]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[9.0, 9.0, 90.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[9.0, 9.0, 90.0]");
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray48);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection50, true);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray5, orderDirection50, false, false);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray5);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.scale(4.149720547924001E12d, doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-4.191217753403241E14, -4.191217753403241E14, -4.191217753403241E15]");
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(10.04987562112089d, (-1.21097221436007E21d), 6181.097447311743d, (double) (byte) 100);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.2170120134952047E22d) + "'", double4 == (-1.2170120134952047E22d));
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(10.04987562112089d, 820404.8465375019d, 0.0d, 135542.9967155091d, 0.0d, 990.0d, (-8.13113621789387E42d), 1.4951800047059846E8d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.2157512288535557E51d) + "'", double8 == (-1.2157512288535557E51d));
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(102098.0d, 2.1940812183982476E20d, 1010.0d, (double) 10, Double.NaN, 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray71);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray71);
        double[] doubleArray78 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray74, doubleArray78);
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray78);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection81 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray28, orderDirection81, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1427.5857242211412d + "'", double80 == 1427.5857242211412d);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1.0d, (double) 100L, 10.0d, (-92.0d), 0.0d, (double) 235);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-820.0d) + "'", double6 == (-820.0d));
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57, 0);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray68);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.scale(111.0d, doubleArray68);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray57, doubleArray75);
        java.lang.Class<?> wildcardClass77 = doubleArray57.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double double50 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray27);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray67);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, (int) ' ');
        double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray69);
        double[] doubleArray73 = null;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 21.0d + "'", double50 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 1);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray18);
        int[] intArray20 = new int[] {};
        int[] intArray25 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray25);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, (int) (short) 1);
        int[] intArray29 = new int[] {};
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 1);
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray37);
        int int39 = org.apache.commons.math3.util.MathArrays.distance1(intArray18, intArray37);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        double double47 = org.apache.commons.math3.util.MathArrays.distance(intArray18, intArray45);
        int[] intArray48 = new int[] {};
        int[] intArray53 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int54 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray53);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (short) 1);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53);
        int int58 = org.apache.commons.math3.util.MathArrays.distance1(intArray18, intArray57);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-9200.0d), (-5.055478783810143E21d), 1.5460450237574002E8d, (-2.1056418422573112E15d), 6181.097447311743d, 21.0d, 1.2423244926866538E15d, (-4.2035421686351696E21d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-5.2221633920904585E36d) + "'", double8 == (-5.2221633920904585E36d));
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1.4951800047059846E8d, 1.0d, 75611.0d, (-2165.0d), (-2.665302576915262E10d), (-1058.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.819888708394894E13d + "'", double6 == 2.819888708394894E13d);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray54);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray37, doubleArray56);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray76);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equals(doubleArray65, doubleArray76);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray56, doubleArray76);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray80);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-900.0, 200.0, 1000.0]");
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray44);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int[] intArray58 = new int[] {};
        int[] intArray63 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int64 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray63);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (short) 1);
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray57, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 100);
        int[] intArray70 = new int[] {};
        int[] intArray75 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int76 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray70, intArray75);
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray75, (int) (short) 1);
        int[] intArray85 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int86 = org.apache.commons.math3.util.MathArrays.distance1(intArray78, intArray85);
        int int87 = org.apache.commons.math3.util.MathArrays.distance1(intArray57, intArray85);
        int[] intArray89 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, 100);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = org.apache.commons.math3.util.MathArrays.distance(intArray44, intArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 98 + "'", int86 == 98);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 98 + "'", int87 == 98);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) 100L);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray31);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray19, doubleArray64);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-2165.0d), doubleArray64);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-21650.0, 2165.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-21650.0, 2165.0, -0.0]");
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection48 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray47, orderDirection48, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray47, orderDirection51, false);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray70);
        double[] doubleArray77 = new double[] { 1, 1, 10 };
        double[] doubleArray81 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray81);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray82);
        double double84 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray70, doubleArray82);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray82, orderDirection85, true);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray47, orderDirection85, true);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray37, orderDirection85, true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + orderDirection48 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection48.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2111.0d + "'", double84 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 1849908.0027625682d, 10.04987562112089d, (-1.8381134056869864E7d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.8472811104669136E8d) + "'", double4 == (-1.8472811104669136E8d));
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray55, (double) 'a');
        double double58 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray55);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray65, orderDirection66, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection69 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray65, orderDirection69, false);
        double[] doubleArray76 = new double[] { (-1.2157512288535557E51d), (-101.0d), 104715.43798342906d, (-2.7191506728564754E13d) };
        double[] doubleArray81 = new double[] { (-1.2157512288535557E51d), (-101.0d), 104715.43798342906d, (-2.7191506728564754E13d) };
        double[] doubleArray86 = new double[] { (-1.2157512288535557E51d), (-101.0d), 104715.43798342906d, (-2.7191506728564754E13d) };
        double[] doubleArray91 = new double[] { (-1.2157512288535557E51d), (-101.0d), 104715.43798342906d, (-2.7191506728564754E13d) };
        double[][] doubleArray92 = new double[][] { doubleArray76, doubleArray81, doubleArray86, doubleArray91 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray55, orderDirection69, doubleArray92);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-291.0, 64.66666666666667, 323.3333333333333]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1346.545580364809d + "'", double58 == 1346.545580364809d);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + orderDirection69 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection69.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.2157512288535557E51, -101.0, 104715.43798342906, -2.7191506728564754E13]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.2157512288535557E51, -101.0, 104715.43798342906, -2.7191506728564754E13]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.2157512288535557E51, -101.0, 104715.43798342906, -2.7191506728564754E13]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-1.2157512288535557E51, -101.0, 104715.43798342906, -2.7191506728564754E13]");
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        double double34 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double double45 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray28, doubleArray44);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray62);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray77 = new double[] { 1, 1, 10 };
        double[] doubleArray81 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray64, doubleArray83);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray64, orderDirection85, true);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray28, doubleArray64);
        double double89 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1360.1470508735442d + "'", double34 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 990.0d + "'", double45 == 990.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray58);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray70);
        double double72 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray58, doubleArray70);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection73 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray70, orderDirection73, true);
        double double76 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray38, doubleArray70);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray81);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray38, doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2111.0d + "'", double72 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection73 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection73.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-9200.0d) + "'", double76 == (-9200.0d));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, -0.0, 0.0]");
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.5183866289549949E7d), 1.5460450237574002E8d, 10.0d, (-5.479592817681999E9d), 3.1411498696267944E34d, 0.0d, 2.5284455777199858E19d, 1200.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.0341344585090943E22d + "'", double8 == 3.0341344585090943E22d);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 1.0f, (-7.6769830141116774E18d), (double) (-1), (-4.2035421686351696E21d), (-1.2114525348282044E23d), (-1.8381134056869864E7d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.2267871488170685E30d + "'", double6 == 2.2267871488170685E30d);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 0);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(doubleArray29, doubleArray40);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray29);
        double double44 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray21);
        double double45 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray10, doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -9 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 13.601470508735444d + "'", double44 == 13.601470508735444d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray57);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        double double67 = org.apache.commons.math3.util.MathArrays.distance(intArray38, intArray65);
        int[] intArray68 = new int[] {};
        int[] intArray73 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int74 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray68, intArray73);
        int[] intArray76 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (short) 1);
        int[] intArray77 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73);
        int int78 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray77);
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray38);
        int[] intArray80 = new int[] {};
        int[] intArray85 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int86 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray80, intArray85);
        int[] intArray87 = new int[] {};
        int[] intArray92 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int93 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray87, intArray92);
        int int94 = org.apache.commons.math3.util.MathArrays.distance1(intArray80, intArray92);
        int[] intArray96 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[]");
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        double double34 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double double45 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray28, doubleArray44);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray62);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray77 = new double[] { 1, 1, 10 };
        double[] doubleArray81 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray64, doubleArray83);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray64, orderDirection85, true);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray28, doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1360.1470508735442d + "'", double34 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 990.0d + "'", double45 == 990.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) 100L);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray31);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray19, doubleArray64);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(6.525883142260517E35d, doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-5.873294828034465E39, -1.3051766284521033E38, 0.0]");
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray35 = new int[] {};
        int[] intArray40 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int41 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray35, intArray40);
        int int42 = org.apache.commons.math3.util.MathArrays.distance1(intArray28, intArray40);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28, 0);
        int[] intArray45 = new int[] {};
        int[] intArray50 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int51 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray45, intArray50);
        int[] intArray53 = org.apache.commons.math3.util.MathArrays.copyOf(intArray50, (int) (short) 1);
        int[] intArray54 = new int[] {};
        int[] intArray59 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int60 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray54, intArray59);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray59, (int) (short) 1);
        int int63 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray62);
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, 0);
        int[] intArray66 = new int[] {};
        int[] intArray71 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int72 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray66, intArray71);
        int[] intArray74 = org.apache.commons.math3.util.MathArrays.copyOf(intArray71, (int) (short) 1);
        int[] intArray75 = new int[] {};
        int[] intArray80 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int81 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray75, intArray80);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80, (int) (short) 1);
        int int84 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray74, intArray83);
        int[] intArray86 = org.apache.commons.math3.util.MathArrays.copyOf(intArray74, (int) (short) 100);
        int[] intArray87 = org.apache.commons.math3.util.MathArrays.copyOf(intArray86);
        double double88 = org.apache.commons.math3.util.MathArrays.distance(intArray65, intArray86);
        int[] intArray89 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65);
        int int90 = org.apache.commons.math3.util.MathArrays.distance1(intArray28, intArray89);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = org.apache.commons.math3.util.MathArrays.distance1(intArray24, intArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double double35 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray29);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray29, 1363.329967155091d);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray29);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray29, (-19.0d));
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection48 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray47, orderDirection48, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray47, orderDirection51, false);
        double[][] doubleArray54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray29, orderDirection51, doubleArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1360.1470508735442d + "'", double35 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[57.0, -12.666666666666666, -63.333333333333336]");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + orderDirection48 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection48.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray88);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray77, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray77);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray69, (double) 100L);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray69);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray27, doubleArray57);
        double double96 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray8, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(144652.08102413287d, doubleArray8);
        double[] doubleArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double99 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray8, doubleArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1446520.8102413288, -144652.08102413287, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection7, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection10, false);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        double double43 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray29, doubleArray41);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray41, orderDirection44, true);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection44, true);
        java.lang.Class<?> wildcardClass49 = strArray6.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection7.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2111.0d + "'", double43 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) 'a');
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray13 = new int[] {};
        int[] intArray18 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray13, intArray18);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) (short) 1);
        int[] intArray22 = new int[] {};
        int[] intArray27 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray22, intArray27);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (short) 1);
        int int31 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray30);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, 0);
        int[] intArray34 = new int[] {};
        int[] intArray39 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray34, intArray39);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39, (int) (short) 1);
        int int43 = org.apache.commons.math3.util.MathArrays.distance1(intArray33, intArray42);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray42);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray42, (int) '#');
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 1);
        int[] intArray56 = new int[] {};
        int[] intArray61 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray56, intArray61);
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray61, (int) (short) 1);
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray55, intArray64);
        int[] intArray66 = new int[] {};
        int[] intArray71 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int72 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray66, intArray71);
        int[] intArray74 = org.apache.commons.math3.util.MathArrays.copyOf(intArray71, (int) (short) 1);
        int[] intArray75 = new int[] {};
        int[] intArray80 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int81 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray75, intArray80);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80, (int) (short) 1);
        int int84 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray74, intArray83);
        int int85 = org.apache.commons.math3.util.MathArrays.distance1(intArray64, intArray83);
        int[] intArray86 = new int[] {};
        int[] intArray91 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int92 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray86, intArray91);
        double double93 = org.apache.commons.math3.util.MathArrays.distance(intArray64, intArray91);
        int[] intArray94 = org.apache.commons.math3.util.MathArrays.copyOf(intArray91);
        double double95 = org.apache.commons.math3.util.MathArrays.distance(intArray42, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = org.apache.commons.math3.util.MathArrays.distance(intArray12, intArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 0);
        double[] doubleArray13 = null;
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray39);
        double[] doubleArray46 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.scale(2068.0d, doubleArray48);
        java.lang.Class<?> wildcardClass50 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10000.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[2.068E7, 0.0, 206800.0]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray40, doubleArray52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection62 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray61, orderDirection62, false);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray40, orderDirection62, true, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18, orderDirection62, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not decreasing (-900 < 200)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2111.0d + "'", double54 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + orderDirection62 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection62.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray88);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray77, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray77);
        double double92 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray91);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray91, (int) (short) 10);
        double double95 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray37, doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2068.0d + "'", double92 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-19.0, 3.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray0, (-8.13113621789387E42d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray70);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equals(doubleArray59, doubleArray70);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray59);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray51, (double) 100L);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray51);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray51);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) 10);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray18, doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[11.11111111111111, -1.1111111111111112, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray67);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(doubleArray56, doubleArray67);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray56);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray48, (double) 100L);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray38, doubleArray48);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.scale((-1.8381134056869864E7d), doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray74);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (-0 >= -0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-0.0, -0.0, -0.0]");
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray19, (double) (byte) 1);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray43, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        double[] doubleArray86 = new double[] { 1, 1, 10 };
        double[] doubleArray90 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray86, doubleArray90);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray91);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equals(doubleArray80, doubleArray91);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray80);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray72, (double) 100L);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray62, doubleArray72);
        double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray24, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(12.0d, doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-36.0, 8.0, 40.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[-12.0, 2.6666666666666665, 13.333333333333334]");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28, (int) ' ');
        int[] intArray32 = new int[] {};
        int[] intArray37 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray32, intArray37);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (short) 1);
        int[] intArray41 = new int[] {};
        int[] intArray46 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray41, intArray46);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (short) 1);
        int int50 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray49);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (short) 1);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray59, intArray68);
        int int70 = org.apache.commons.math3.util.MathArrays.distance1(intArray49, intArray68);
        int[] intArray71 = new int[] {};
        int[] intArray76 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray71, intArray76);
        double double78 = org.apache.commons.math3.util.MathArrays.distance(intArray49, intArray76);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = org.apache.commons.math3.util.MathArrays.distance(intArray31, intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 100, 100, 35]");
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray57);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray65);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray65);
        int[] intArray71 = new int[] {};
        int[] intArray76 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray71, intArray76);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76, (int) (short) 1);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76);
        int int81 = org.apache.commons.math3.util.MathArrays.distance1(intArray65, intArray80);
        int[] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int83 = org.apache.commons.math3.util.MathArrays.distance1(intArray80, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(9209.0d, (double) (short) 0, (-5.0554510251207795E22d), 2010.0d, 116405.9998500075d, 2.303752319195026E28d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.6817058196121406E33d + "'", double6 == 2.6817058196121406E33d);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray10 = new float[] { (short) 1, (-1L) };
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray10);
        float[] floatArray14 = new float[] { (-1L), (byte) 10 };
        float[] floatArray18 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray14, floatArray18);
        float[] floatArray22 = new float[] { (short) 1, (-1L) };
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray18, floatArray22);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(floatArray10, floatArray22);
        float[] floatArray27 = new float[] { (-1L), (byte) 10 };
        float[] floatArray31 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray27, floatArray31);
        float[] floatArray35 = new float[] { (short) 1, (-1L) };
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray31, floatArray35);
        float[] floatArray39 = new float[] { (-1L), (byte) 10 };
        float[] floatArray43 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray39, floatArray43);
        float[] floatArray45 = null;
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray45);
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equals(floatArray31, floatArray39);
        float[] floatArray50 = new float[] { (-1L), (byte) 10 };
        float[] floatArray54 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray50, floatArray54);
        float[] floatArray56 = null;
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equals(floatArray50, floatArray56);
        float[] floatArray60 = new float[] { (-1L), (byte) 10 };
        float[] floatArray64 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray60, floatArray64);
        float[] floatArray68 = new float[] { (short) 1, (-1L) };
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray64, floatArray68);
        float[] floatArray72 = new float[] { (-1L), (byte) 10 };
        float[] floatArray76 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray72, floatArray76);
        float[] floatArray78 = null;
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(floatArray72, floatArray78);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(floatArray64, floatArray72);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(floatArray50, floatArray64);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equals(floatArray31, floatArray50);
        float[] floatArray85 = new float[] { (-1L), (byte) 10 };
        float[] floatArray89 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray85, floatArray89);
        float[] floatArray93 = new float[] { (short) 1, (-1L) };
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray89, floatArray93);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray31, floatArray93);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray10, floatArray93);
        float[] floatArray97 = null;
        boolean boolean98 = org.apache.commons.math3.util.MathArrays.equals(floatArray93, floatArray97);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(floatArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray85), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray89), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(floatArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray93), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection72, true);
        double double75 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray37, doubleArray69);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray80);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray37, doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray87, 102098.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2111.0d + "'", double71 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-9200.0d) + "'", double75 == (-9200.0d));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, -0.0, 0.0]");
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(135542.9967155091d, (-1.8381134056869864E7d), 1849908.0027625682d, 116405.9998500075d, (-1.21097221436007E21d), (double) (byte) 100, 1849908.0027625682d, (-1058.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.2109722143828504E23d) + "'", double8 == (-1.2109722143828504E23d));
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41);
        double double43 = org.apache.commons.math3.util.MathArrays.distance(intArray20, intArray41);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20);
        int[] intArray45 = new int[] {};
        int[] intArray50 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int51 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray45, intArray50);
        int[] intArray53 = org.apache.commons.math3.util.MathArrays.copyOf(intArray50, (int) (short) 1);
        int[] intArray54 = new int[] {};
        int[] intArray59 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int60 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray54, intArray59);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray59, (int) (short) 1);
        int int63 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray62);
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (short) 100);
        int[] intArray66 = new int[] {};
        int[] intArray71 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int72 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray66, intArray71);
        int[] intArray74 = org.apache.commons.math3.util.MathArrays.copyOf(intArray71, (int) (short) 1);
        int[] intArray75 = new int[] {};
        int[] intArray80 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int81 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray75, intArray80);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80, (int) (short) 1);
        int int84 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray74, intArray83);
        int[] intArray86 = org.apache.commons.math3.util.MathArrays.copyOf(intArray74, (int) (short) 100);
        double double87 = org.apache.commons.math3.util.MathArrays.distance(intArray53, intArray74);
        int[] intArray89 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) ' ');
        double double90 = org.apache.commons.math3.util.MathArrays.distance(intArray20, intArray53);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray12, intArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        java.lang.Class<?> wildcardClass9 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 100.0f, (-101.0d), (double) 0L, 1849908.0027625682d, 102098.0d, 1427.5857242211412d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4574354727153006E8d + "'", double6 == 1.4574354727153006E8d);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41);
        double double43 = org.apache.commons.math3.util.MathArrays.distance(intArray20, intArray41);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20);
        java.lang.Class<?> wildcardClass45 = intArray44.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray27, orderDirection28, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray27, orderDirection31, false);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray15, orderDirection31, true);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray15);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray41);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray41);
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray11, doubleArray41);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale(1.7246705822717612E15d, doubleArray11);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray58, orderDirection59, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection62 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray58, orderDirection62, false);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection75 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray74, orderDirection75, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection78 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray74, orderDirection78, false);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray67, orderDirection78, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection83 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray67, orderDirection83, false);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray58, orderDirection83, false);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray11, orderDirection83, true);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.7246705822717612E16, 1.7246705822717612E15, -0.0]");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + orderDirection59 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection59.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + orderDirection62 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection62.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + orderDirection75 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection75.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + orderDirection78 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection78.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + orderDirection83 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection83.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int int30 = org.apache.commons.math3.util.MathArrays.distance1(intArray20, intArray29);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) '#');
        int[] intArray34 = new int[] {};
        int[] intArray39 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray34, intArray39);
        int[] intArray41 = new int[] {};
        int[] intArray46 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray41, intArray46);
        int int48 = org.apache.commons.math3.util.MathArrays.distance1(intArray34, intArray46);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) '4');
        int int51 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray46);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray8 = null;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray8);
        float[] floatArray12 = new float[] { (-1L), (byte) 10 };
        float[] floatArray16 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray12, floatArray16);
        float[] floatArray20 = new float[] { (short) 1, (-1L) };
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray16, floatArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray16);
        float[] floatArray25 = new float[] { (-1L), (byte) 10 };
        float[] floatArray29 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray25, floatArray29);
        float[] floatArray33 = new float[] { (short) 1, (-1L) };
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray29, floatArray33);
        float[] floatArray37 = new float[] { (-1L), (byte) 10 };
        float[] floatArray41 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray37, floatArray41);
        float[] floatArray45 = new float[] { (short) 1, (-1L) };
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray41, floatArray45);
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equals(floatArray33, floatArray45);
        float[] floatArray50 = new float[] { (-1L), (byte) 10 };
        float[] floatArray54 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray50, floatArray54);
        float[] floatArray58 = new float[] { (short) 1, (-1L) };
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray54, floatArray58);
        float[] floatArray62 = new float[] { (-1L), (byte) 10 };
        float[] floatArray66 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray62, floatArray66);
        float[] floatArray68 = null;
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(floatArray62, floatArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(floatArray54, floatArray62);
        float[] floatArray73 = new float[] { (-1L), (byte) 10 };
        float[] floatArray77 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray73, floatArray77);
        float[] floatArray81 = new float[] { (short) 1, (-1L) };
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray77, floatArray81);
        float[] floatArray85 = new float[] { (-1L), (byte) 10 };
        float[] floatArray89 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray85, floatArray89);
        float[] floatArray91 = null;
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(floatArray85, floatArray91);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equals(floatArray77, floatArray85);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray62, floatArray85);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray45, floatArray85);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray45);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(floatArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray81), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(floatArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray85), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray89), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray44);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 1);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52);
        int int57 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray56);
        int[] intArray58 = new int[] {};
        int[] intArray63 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int64 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray63);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (short) 1);
        int[] intArray67 = new int[] {};
        int[] intArray72 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int73 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray67, intArray72);
        int[] intArray75 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) 1);
        int int76 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray66, intArray75);
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, 0);
        int[] intArray79 = new int[] {};
        int[] intArray84 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int85 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray79, intArray84);
        int int86 = org.apache.commons.math3.util.MathArrays.distance1(intArray66, intArray84);
        int[] intArray87 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = org.apache.commons.math3.util.MathArrays.distance1(intArray56, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1]");
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        double double34 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double double45 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray28, doubleArray44);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray62);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray77 = new double[] { 1, 1, 10 };
        double[] doubleArray81 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray64, doubleArray83);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray64, orderDirection85, true);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray28, doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray64, (-1.5183866289549949E7d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1360.1470508735442d + "'", double34 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 990.0d + "'", double45 == 990.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, (double) 100L);
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray63);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection65 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray63, orderDirection65, false, false);
        java.lang.Class<?> wildcardClass69 = doubleArray63.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 439.780879782446d + "'", double64 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + orderDirection65 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection65.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) ' ');
        int[] intArray24 = new int[] {};
        int[] intArray29 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int30 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray24, intArray29);
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 1);
        int[] intArray33 = new int[] {};
        int[] intArray38 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray33, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, (int) (short) 1);
        int int42 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray32, intArray41);
        int[] intArray43 = new int[] {};
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray43, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 1);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int int61 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray60);
        int int62 = org.apache.commons.math3.util.MathArrays.distance1(intArray41, intArray60);
        int[] intArray63 = new int[] {};
        int[] intArray68 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray63, intArray68);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray68, (int) (short) 1);
        int int72 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray41, intArray68);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41);
        int[] intArray75 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int76 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray23, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 100, (-92.0d), 1.4574354727153006E8d, 88.21557489650559d, 100.0d, 1.2459825039216539E7d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4102824113935717E10d + "'", double6 == 1.4102824113935717E10d);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.644230165222219E15d), (-5.691405330860345E15d), (double) 100, 820404.8465375019d, (-2.667039156913762E7d), (-2165.0d), (-5.691405330860345E15d), (-5.0554510251207795E22d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.8772624126635964E38d + "'", double8 == 2.8772624126635964E38d);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray15, orderDirection16, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection19 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray15, orderDirection19, false);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray3, orderDirection19, true);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray28);
        double[] doubleArray39 = new double[] { 1, 1, 10 };
        double[] doubleArray43 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray43);
        double double45 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray35, doubleArray39);
        double double46 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray3, doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (1 >= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + orderDirection19 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection19.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1020.0d + "'", double45 == 1020.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray61);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray64);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) 'a');
        double[] doubleArray68 = null;
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray68);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection70 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray68, orderDirection70, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        double[] doubleArray0 = null;
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray0, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray42, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray72);
        double[] doubleArray79 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray75, doubleArray79);
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray79);
        double double82 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray79);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(6.525883142260517E35d, doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[6.525883142260517E37, 0.0, 6.525883142260517E35]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1427.5857242211412d + "'", double81 == 1427.5857242211412d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 100.00499987500625d + "'", double82 == 100.00499987500625d);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection72, true);
        double double75 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray37, doubleArray69);
        double[] doubleArray76 = null;
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equals(doubleArray37, doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2111.0d + "'", double71 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-9200.0d) + "'", double75 == (-9200.0d));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, 0);
        int[] intArray42 = new int[] {};
        int[] intArray47 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray42, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (short) 1);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (short) 1);
        int int60 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray59);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray50, (int) (short) 100);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62);
        double double64 = org.apache.commons.math3.util.MathArrays.distance(intArray41, intArray62);
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray62);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray67 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1]");
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double double24 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        double[][] doubleArray25 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray23, doubleArray25);
        double double27 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection35 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean37 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray34, orderDirection35, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray23, orderDirection35, false, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not decreasing (-3 < 0.667)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 4.533823502911814d + "'", double24 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4.533823502911814d + "'", double27 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + orderDirection35 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection35.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double double50 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray27);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray67);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, (int) ' ');
        double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection73 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18, orderDirection73, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 21.0d + "'", double50 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray58);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray70);
        double double72 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray58, doubleArray70);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection73 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray70, orderDirection73, true);
        double double76 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray38, doubleArray70);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray81);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray38, doubleArray81);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.552472386491933E14d), doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2111.0d + "'", double72 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection73 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection73.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-9200.0d) + "'", double76 == (-9200.0d));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-0.0, 0.0, -0.0]");
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray47, doubleArray72);
        double[] doubleArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray47, doubleArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-890.0, 199.0, 1000.0]");
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray42);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray42);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale(1360.1470508735442d, doubleArray42);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray70);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -12,241.323 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-12241.323457861898, 2720.2941017470885, 13601.470508735441]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-12241.323457861898, 2720.2941017470885, 13601.470508735441]");
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.0554510251207795E22d), (-1.8472811104669136E8d), 75611.0d, (-2.6653694205680016E13d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 9.338839183594195E30d + "'", double4 == 9.338839183594195E30d);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray39);
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equals(doubleArray28, doubleArray39);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray39);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray70);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equals(doubleArray59, doubleArray70);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray59);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray51, (double) 100L);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray51);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray9, doubleArray39);
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray84, orderDirection85, false);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray9, orderDirection85, false);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(0.0d, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray0, doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, 0);
        int[] intArray17 = new int[] {};
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray22);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 1);
        int[] intArray26 = new int[] {};
        int[] intArray31 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int32 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray26, intArray31);
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (short) 1);
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray25, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, 0);
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 1);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 1);
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray46, intArray55);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (short) 100);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58);
        double double60 = org.apache.commons.math3.util.MathArrays.distance(intArray37, intArray58);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37);
        int int62 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray61);
        int[] intArray64 = new int[] { 10 };
        double double65 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray64);
        int[] intArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1346.545580364809d, 1366.9312345542478d, 9209.0d, 1849908.0027625682d, 1.4678500047059846E9d, 21009.0d, 0.0d, (-5.2221633920904585E36d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.0855098392300684E13d + "'", double8 == 3.0855098392300684E13d);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        long[] longArray4 = new long[] { (byte) -1, (short) 0, 10, (byte) 10 };
        long[] longArray9 = new long[] { (byte) -1, (short) 0, 10, (byte) 10 };
        long[] longArray14 = new long[] { (byte) -1, (short) 0, 10, (byte) 10 };
        long[][] longArray15 = new long[][] { longArray4, longArray9, longArray14 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: -1 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(longArray15);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        double double32 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray30);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray30, orderDirection33, true);
        double[] doubleArray39 = new double[] { 1, 1, 10 };
        double[] doubleArray43 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray43);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray54);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(doubleArray43, doubleArray54);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray73);
        double[] doubleArray80 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray76, doubleArray80);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (byte) 10, doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray0, doubleArray80);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2111.0d + "'", double32 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1000.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1427.5857242211412d + "'", double82 == 1427.5857242211412d);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray44);
        java.lang.Class<?> wildcardClass47 = intArray17.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(10.04987562112089d, 18500.0d, (-1.9875501E7d), 2.8772624126635964E38d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-5.718703196015772E45d) + "'", double4 == (-5.718703196015772E45d));
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1101.0d, 9.338839183594195E30d, 3.0341344585090943E22d, (double) (byte) 0, 0.0d, (-1.552472386491933E14d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0282061941137209E34d + "'", double6 == 1.0282061941137209E34d);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.2459825039216539E7d, 3.0341344585090943E22d, 1366.9312345542478d, 1.5460450237574002E8d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.780478449848133E29d + "'", double4 == 3.780478449848133E29d);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(79.0d, 12.0d, (-8.13113621789387E42d), 3.1411498696267944E34d, (-6.469188686213299E42d), (-2.0153985E7d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2.554111747075503E77d) + "'", double6 == (-2.554111747075503E77d));
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray68, doubleArray87);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray68, orderDirection89, true);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray44, orderDirection89, false, false);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray44);
        double double96 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray38, doubleArray44);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.0d), doubleArray44);
        java.lang.Class<?> wildcardClass98 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, -1.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 12.0d + "'", double96 == 12.0d);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-8.13113621789387E42d), (double) 0.0f, (double) (short) -1, 1010.0d, 1.1461596173157833E27d, 116405.9998500075d, 1.4678500047059846E9d, (double) (byte) 100);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.3341985624134572E32d + "'", double8 == 1.3341985624134572E32d);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray41);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray83);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray41, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray8);
        double[] doubleArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1000.0, -100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, 100);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale(212170.0d, doubleArray20);
        java.lang.Class<?> wildcardClass28 = doubleArray20.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.90953E8, -4.2434E7, -2.1217E8]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray27, orderDirection28, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray27, orderDirection31, false);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray15, orderDirection31, true);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray15);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray41);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray41);
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray11, doubleArray41);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale(1.7246705822717612E15d, doubleArray11);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection62 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray61, orderDirection62, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection65 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray61, orderDirection65, false);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray54, orderDirection65, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection70 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray54, orderDirection70, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray11, orderDirection70, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not increasing (1 > -0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.7246705822717612E16, 1.7246705822717612E15, -0.0]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + orderDirection62 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection62.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + orderDirection65 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection65.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + orderDirection70 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection70.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-1101.0d), (-820.0d), 1020.0d, Double.NaN, (-2.5043938381010786E8d), 1.2423244926866538E15d, 1.7246705822717612E15d, (-5.2221633920904585E36d));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray47);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(doubleArray36, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray36);
        double double51 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray28);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale(4.149720547924001E12d, doubleArray19);
        double[] doubleArray53 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray52, doubleArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 21.0d + "'", double51 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(474492.3840484359d, (double) ' ', 88.21557489650559d, 21.0d, 0.0d, 10.04987562112089d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.5185608816622775E7d + "'", double6 == 1.5185608816622775E7d);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray40);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray77 = new double[] { 1, 1, 10 };
        double[] doubleArray81 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray81);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray82);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equals(doubleArray71, doubleArray82);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray71);
        double double86 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray71);
        double double87 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray32, doubleArray71);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray32);
        double double89 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray23, doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 10.04987562112089d + "'", double86 == 10.04987562112089d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-92.0d) + "'", double87 == (-92.0d));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 61.66666666666667d + "'", double89 == 61.66666666666667d);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray42);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray65);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(doubleArray54, doubleArray65);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray84);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray42, doubleArray87);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray87);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.scale((-2.613107296291178E10d), doubleArray87);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray90, 0);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale(1.2423244926866538E15d, doubleArray90);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray93, (double) 10);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[2.3779276396249723E13, -5.252345665545268E12, -2.613107296291178E13]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[2.9541577485426656E28, -6.52511766436347E27, -3.2463271962007313E28]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-31.271477663230247, 6.907216494845362, 34.364261168384886]");
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.scale((double) 1.0f, doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (900 >= -200)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[900.0, -200.0, -1000.0]");
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 1, 1353.329967155091d, (-1.2114525348282044E23d), 100.00499987500625d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.211513105940706E25d) + "'", double4 == (-1.211513105940706E25d));
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-218665.0d), 1.2423244926866538E15d, (double) (short) 1, 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-2.7165288519332715E20d) + "'", double4 == (-2.7165288519332715E20d));
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection24 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray23, orderDirection24, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray7, orderDirection24, true, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly decreasing (-1 <= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + orderDirection24 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection24.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, (double) (short) 0, 9319.084308623767d, 79.0d, 0.0d, (double) (byte) 0, (double) 235, 1.7246705822717612E15d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 4.0529758683460013E17d + "'", double8 == 4.0529758683460013E17d);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-6.469188686213299E42d), (double) 10, (-1.2114525348282044E23d), (-1.2459825039216539E7d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-6.469188686213148E43d) + "'", double4 == (-6.469188686213148E43d));
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray39, doubleArray59);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray59, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(88.21557489650559d, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) 0, doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(doubleArray29, doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray40);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray52, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray82);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray82);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray40, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray85);
        double double88 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray7);
        java.lang.Class<?> wildcardClass89 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 10.04987562112089d + "'", double88 == 10.04987562112089d);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray45 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray45);
        double double48 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10000.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10000.499987500625d + "'", double48 == 10000.499987500625d);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57, 0);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray66);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray72);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray72);
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection82 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray81, orderDirection82, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray81, orderDirection85, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray81, orderDirection88, false);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray57, orderDirection88, true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + orderDirection82 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection82.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + orderDirection88 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection88.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(7.6769829973339556E18d, 1346.545580364809d, 2.8772624126635964E38d, (double) ' ');
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 9.207239720523508E39d + "'", double4 == 9.207239720523508E39d);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray40, (double) 100L);
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray64);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0L, doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 439.780879782446d + "'", double65 == 439.780879782446d);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, 144652.08102413287d);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (double) 10L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray67);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[11.11111111111111, -1.1111111111111112, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-2.639260241354281E12d), (-4.2035421686351696E21d), 21009.0d, (-8.13113621789387E42d), 1020.0d, (-5.055478783810143E21d), 1346.545580364809d, 1.7246705822717612E15d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.708270408017212E47d) + "'", double8 == (-1.708270408017212E47d));
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray4);
        java.lang.Class<?> wildcardClass12 = doubleArray4.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray45 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray45);
        double double48 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray45);
        double[] doubleArray49 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray45, doubleArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10000.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.00499987500625d + "'", double48 == 100.00499987500625d);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray23, 10.0d);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray55, doubleArray74);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection76 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray55, orderDirection76, true);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray31, orderDirection76, false, false);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray27, orderDirection76, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray23, orderDirection76, true, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (-3 <= 0.667)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-30.0, 6.666666666666666, 33.333333333333336]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection76 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection76.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        float[] floatArray2 = new float[] { (-1.0f), 100.0f };
        float[] floatArray5 = new float[] { (-1L), (byte) 10 };
        float[] floatArray9 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray5, floatArray9);
        float[] floatArray13 = new float[] { (short) 1, (-1L) };
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray9, floatArray13);
        float[] floatArray17 = new float[] { (-1L), (byte) 10 };
        float[] floatArray21 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray17, floatArray21);
        float[] floatArray23 = null;
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(floatArray17, floatArray23);
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equals(floatArray9, floatArray17);
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray17);
        float[] floatArray29 = new float[] { (-1.0f), 100.0f };
        float[] floatArray32 = new float[] { (-1L), (byte) 10 };
        float[] floatArray36 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean37 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray32, floatArray36);
        float[] floatArray40 = new float[] { (short) 1, (-1L) };
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray36, floatArray40);
        float[] floatArray44 = new float[] { (-1L), (byte) 10 };
        float[] floatArray48 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray44, floatArray48);
        float[] floatArray50 = null;
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(floatArray44, floatArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(floatArray36, floatArray44);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(floatArray29, floatArray44);
        float[] floatArray56 = new float[] { (-1L), (byte) 10 };
        float[] floatArray60 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray56, floatArray60);
        float[] floatArray64 = new float[] { (short) 1, (-1L) };
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray60, floatArray64);
        float[] floatArray68 = new float[] { (-1L), (byte) 10 };
        float[] floatArray72 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray68, floatArray72);
        float[] floatArray76 = new float[] { (short) 1, (-1L) };
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray72, floatArray76);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equals(floatArray64, floatArray76);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray44, floatArray64);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(floatArray17, floatArray44);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(12.0d, (-2.665302576915262E10d), (-1.2170120134952047E22d), 1101.0d, 1020.0d, (double) 1);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.3399302268582524E25d) + "'", double6 == (-1.3399302268582524E25d));
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray45);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray28, doubleArray47);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection49, true);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray4, orderDirection49, false, false);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray55, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection49 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection49.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-101.0, -101.0, -1010.0]");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray40, doubleArray52);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray19, doubleArray52);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2111.0d + "'", double54 == 2111.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray42);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray42);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale(1360.1470508735442d, doubleArray42);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, 0);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, 1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-12241.323457861898, 2720.2941017470885, 13601.470508735441]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0]");
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) 100L);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray31);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray84);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(doubleArray73, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray73);
        double double88 = org.apache.commons.math3.util.MathArrays.distance(doubleArray56, doubleArray73);
        double double89 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray0, doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1353.329967155091d + "'", double88 == 1353.329967155091d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(2010.0d, (double) (byte) 10, (-2.6653694205676815E15d), 100.00499987500625d, (-2.6653694205680016E13d), (-1.21097221436007E21d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.2276883093128493E34d + "'", double6 == 3.2276883093128493E34d);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray42);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray42);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale(1360.1470508735442d, doubleArray42);
        double double70 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-12241.323457861898, 2720.2941017470885, 13601.470508735441]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 13.601470508735444d + "'", double70 == 13.601470508735444d);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray27, orderDirection28, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray27, orderDirection31, false);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray15, orderDirection31, true);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray15);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray41);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray41);
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray11, doubleArray41);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale(1.7246705822717612E15d, doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray51);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -17,246,705,822,717,612 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.7246705822717612E16, 1.7246705822717612E15, -0.0]");
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray9, (double) 100L);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray9);
        double double36 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 13.601470508735444d + "'", double36 == 13.601470508735444d);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray10 = new float[] { (short) 1, (-1L) };
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray10);
        float[] floatArray14 = new float[] { (-1L), (byte) 10 };
        float[] floatArray18 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray14, floatArray18);
        float[] floatArray20 = null;
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(floatArray14, floatArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(floatArray6, floatArray14);
        float[] floatArray25 = new float[] { (-1L), (byte) 10 };
        float[] floatArray29 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray25, floatArray29);
        float[] floatArray31 = null;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray25, floatArray31);
        float[] floatArray35 = new float[] { (-1L), (byte) 10 };
        float[] floatArray39 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray35, floatArray39);
        float[] floatArray43 = new float[] { (short) 1, (-1L) };
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray39, floatArray43);
        float[] floatArray47 = new float[] { (-1L), (byte) 10 };
        float[] floatArray51 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray47, floatArray51);
        float[] floatArray53 = null;
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(floatArray47, floatArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray47);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(floatArray25, floatArray39);
        float[] floatArray59 = new float[] { (-1L), (byte) 10 };
        float[] floatArray63 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray59, floatArray63);
        float[] floatArray67 = new float[] { (short) 1, (-1L) };
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray63, floatArray67);
        float[] floatArray71 = new float[] { (-1L), (byte) 10 };
        float[] floatArray75 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray71, floatArray75);
        float[] floatArray77 = null;
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equals(floatArray71, floatArray77);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(floatArray63, floatArray71);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray63);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(floatArray14, floatArray39);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray17, doubleArray48);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray48, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.scale((-2165.0d), doubleArray75);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray80);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray75, doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray80);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (1 >= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-890.0, 199.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1926850.0, -430835.0, -2165000.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double double35 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray29);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray29, 1363.329967155091d);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray29);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray29, (-19.0d));
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray59);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray71);
        double double73 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray59, doubleArray71);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection74 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray71, orderDirection74, true);
        double double77 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray71);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray71, 1363.329967155091d);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray71);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.scale(Double.NaN, doubleArray80);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray82);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -36,000,000 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1360.1470508735442d + "'", double35 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[57.0, -12.666666666666666, -63.333333333333336]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2111.0d + "'", double73 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection74 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection74.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1360.1470508735442d + "'", double77 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[8.1E7, -3.6E7, -1.76E8, 4.0E7, 1.0E8]");
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(9319.084308623767d, 8.038986369571635E23d, (-183792.33961872238d), (double) (short) 100, (-1.708270408017212E47d), (-7.887202131357053E44d), (-1.552472386491933E14d), (double) 10L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.347347400304754E92d + "'", double8 == 1.347347400304754E92d);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray50);
        double double53 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray41, doubleArray50);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, 1.2459825039216539E7d);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41, orderDirection56, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.3844250043573933E7, -1384425.0043573931, 0.0]");
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        double double53 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.04987562112089d + "'", double53 == 10.04987562112089d);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray10 = new float[] { (short) 1, (-1L) };
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray10);
        float[] floatArray14 = new float[] { (-1L), (byte) 10 };
        float[] floatArray18 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray14, floatArray18);
        float[] floatArray20 = null;
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(floatArray14, floatArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(floatArray6, floatArray14);
        float[] floatArray25 = new float[] { (-1L), (byte) 10 };
        float[] floatArray29 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray25, floatArray29);
        float[] floatArray31 = null;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray25, floatArray31);
        float[] floatArray35 = new float[] { (-1L), (byte) 10 };
        float[] floatArray39 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray35, floatArray39);
        float[] floatArray43 = new float[] { (short) 1, (-1L) };
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray39, floatArray43);
        float[] floatArray47 = new float[] { (-1L), (byte) 10 };
        float[] floatArray51 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray47, floatArray51);
        float[] floatArray53 = null;
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(floatArray47, floatArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray47);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(floatArray25, floatArray39);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equals(floatArray6, floatArray25);
        float[] floatArray60 = new float[] { (-1L), (byte) 10 };
        float[] floatArray64 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray60, floatArray64);
        float[] floatArray68 = new float[] { (short) 1, (-1L) };
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray64, floatArray68);
        float[] floatArray72 = new float[] { (-1.0f), 100.0f };
        float[] floatArray75 = new float[] { (-1L), (byte) 10 };
        float[] floatArray79 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray75, floatArray79);
        float[] floatArray83 = new float[] { (short) 1, (-1L) };
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray79, floatArray83);
        float[] floatArray87 = new float[] { (-1L), (byte) 10 };
        float[] floatArray91 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray87, floatArray91);
        float[] floatArray93 = null;
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equals(floatArray87, floatArray93);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equals(floatArray79, floatArray87);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.equals(floatArray72, floatArray87);
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.equals(floatArray68, floatArray87);
        boolean boolean98 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray87);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray83), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(floatArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray87), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray91), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray18, doubleArray49);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray49, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((-2165.0d), doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray81);
        double double88 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray77, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (byte) 10, doubleArray87);
        java.lang.Class<?> wildcardClass90 = doubleArray87.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-890.0, 199.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1926850.0, -430835.0, -2165000.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-2.0153985E7d) + "'", double88 == (-2.0153985E7d));
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray66);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(doubleArray55, doubleArray66);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray55);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (double) 100L);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray37, doubleArray47);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray78);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray78);
        double double87 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray73, doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(4.149720547924001E12d, (double) 1.0f, (-7.887202131357053E44d), (-5.644230165222219E15d), (-1.2157512288535557E51d), (-9200.0d), 1.5183756289549949E7d, (double) 0.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 4.451729603812351E60d + "'", double8 == 4.451729603812351E60d);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection7, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection10, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection13, false);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean28 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray25, orderDirection26, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection29 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray25, orderDirection29, false);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray18, orderDirection29, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection34 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray18, orderDirection34, false);
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection34, true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection7.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection29.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + orderDirection34 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection34.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray37);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equals(doubleArray26, doubleArray37);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray56);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray76);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray88);
        double double90 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray76, doubleArray88);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection91 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray88, orderDirection91, true);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray59, orderDirection91, false);
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray18, orderDirection91, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2111.0d + "'", double90 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection91 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection91.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray47);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(doubleArray36, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray36);
        double double51 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray28);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale(4.149720547924001E12d, doubleArray19);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection69 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray68, orderDirection69, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray68, orderDirection72, false);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray56, orderDirection72, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19, orderDirection72, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (0 <= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 21.0d + "'", double51 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + orderDirection69 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection69.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (double) 100L);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray41);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray9, doubleArray41);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray69);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 2 and 3 are not strictly increasing (1,000 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray88);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray77, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray77);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray69, (double) 100L);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray69);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray27, doubleArray57);
        double double96 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray8, doubleArray27);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.scale((double) 'a', doubleArray8);
        double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray8, 1363.329967155091d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[970.0, -97.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[1514.8110746167679, -151.48110746167677, 0.0]");
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(8.038986369571635E23d, 1346.545580364809d, 7.746270471371837E7d, (-2.639260241354281E12d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0824859522117259E27d + "'", double4 == 1.0824859522117259E27d);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        int[] intArray0 = null;
        int[] intArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray65);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray67, doubleArray86);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray67, orderDirection88, true);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray43, orderDirection88, false, false);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray43);
        double double95 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray37, doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection88 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection88.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 12.0d + "'", double95 == 12.0d);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1.4951800047059846E8d, (-218665.0d), 61.66666666666667d, (-1.2109722143828504E23d), 1366.9312345542478d, 2.667039156913762E7d, 12.0d, (double) (byte) 100);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-7.467661988726902E24d) + "'", double8 == (-7.467661988726902E24d));
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray69);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray81);
        double double83 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray69, doubleArray81);
        java.lang.String[] strArray90 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection91 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray90, orderDirection91, false);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray69, orderDirection91, true, false);
        boolean boolean98 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray16, orderDirection91, false);
        double double99 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2111.0d + "'", double83 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + orderDirection91 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection91.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 10.04987562112089d + "'", double99 == 10.04987562112089d);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-7.887202131357053E44d), (double) 100L, (-2.554111747075503E77d), 2.0652291407971942E8d, 2.3726213090057078E14d, 100.00499987500625d, 1.2921065983350832E7d, (double) (short) 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-5.274826008912762E85d) + "'", double8 == (-5.274826008912762E85d));
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray30, doubleArray49);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray30, orderDirection51, true);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray6, orderDirection51, false, false);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray6);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray64);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray57, doubleArray64);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(10.04987562112089d, doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.2584423289608705E9, -1.2584423289608705E9, -1.2584423289608704E10]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-Infinity, -Infinity, -Infinity]");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) 100L);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray31);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray56, (double) 'a');
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-291.0, 64.66666666666667, 323.3333333333333]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) 100L);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray31);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray19, doubleArray64);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(doubleArray0, doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) 100L);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray31);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray19, doubleArray64);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(doubleArray0, doubleArray64);
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection75 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray74, orderDirection75, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection78 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray74, orderDirection78, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection78, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + orderDirection75 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection75.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + orderDirection78 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection78.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        float[] floatArray2 = new float[] { (-1.0f), 100.0f };
        float[] floatArray5 = new float[] { (-1L), (byte) 10 };
        float[] floatArray9 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray5, floatArray9);
        float[] floatArray13 = new float[] { (short) 1, (-1L) };
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray9, floatArray13);
        float[] floatArray17 = new float[] { (-1L), (byte) 10 };
        float[] floatArray21 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray17, floatArray21);
        float[] floatArray23 = null;
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(floatArray17, floatArray23);
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equals(floatArray9, floatArray17);
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray17);
        float[] floatArray29 = new float[] { (-1L), (byte) 10 };
        float[] floatArray33 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray29, floatArray33);
        float[] floatArray35 = null;
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equals(floatArray29, floatArray35);
        float[] floatArray39 = new float[] { (-1L), (byte) 10 };
        float[] floatArray43 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray39, floatArray43);
        float[] floatArray47 = new float[] { (short) 1, (-1L) };
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray43, floatArray47);
        float[] floatArray51 = new float[] { (-1L), (byte) 10 };
        float[] floatArray55 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray51, floatArray55);
        float[] floatArray57 = null;
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equals(floatArray51, floatArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(floatArray43, floatArray51);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(floatArray29, floatArray43);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray17, floatArray43);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) '4', 2.2267871488170685E30d, 0.0d, (double) 0L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.1579293173848756E32d + "'", double4 == 1.1579293173848756E32d);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray66);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(doubleArray55, doubleArray66);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray55);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (double) 100L);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray37, doubleArray47);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        double[] doubleArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray37, doubleArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, 0);
        int[] intArray17 = null;
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray16, intArray17);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray10 = new float[] { (short) 1, (-1L) };
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray10);
        float[] floatArray14 = new float[] { (-1.0f), 100.0f };
        float[] floatArray17 = new float[] { (-1L), (byte) 10 };
        float[] floatArray21 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray17, floatArray21);
        float[] floatArray25 = new float[] { (short) 1, (-1L) };
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray21, floatArray25);
        float[] floatArray29 = new float[] { (-1L), (byte) 10 };
        float[] floatArray33 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray29, floatArray33);
        float[] floatArray35 = null;
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equals(floatArray29, floatArray35);
        boolean boolean37 = org.apache.commons.math3.util.MathArrays.equals(floatArray21, floatArray29);
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equals(floatArray14, floatArray29);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equals(floatArray10, floatArray29);
        float[] floatArray42 = new float[] { (-1L), (byte) 10 };
        float[] floatArray46 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray42, floatArray46);
        float[] floatArray50 = new float[] { (short) 1, (-1L) };
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray46, floatArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(floatArray29, floatArray50);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray48);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection50, true);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray5, orderDirection50, false, false);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray5);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray56);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray63);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray56, doubleArray63);
        double double71 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.2584423289608705E9, -1.2584423289608705E9, -1.2584423289608704E10]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-Infinity, -Infinity, -Infinity]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.2709644515984184E10d + "'", double71 == 1.2709644515984184E10d);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.scaleInPlace((-2.639260241354281E12d), doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(79.0d, (-5.479592817681999E9d), 2.303752319195026E28d, 13.601470508735444d, (-2165.0d), (-7.467661988726902E24d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.295116804952141E29d + "'", double6 == 3.295116804952141E29d);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1366.9312345542478d, 0.0d, 1.5460450237574003E9d, (double) (byte) 10);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.5460450237574003E10d + "'", double4 == 1.5460450237574003E10d);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray69);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray69);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray9, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.scale(1353.329967155091d, doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray73);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-0.9, -2.0, Infinity]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[13533.29967155091, -1353.329967155091, 0.0]");
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-19.0d), (-5.055478783810143E21d), 2.1940812183982476E20d, 7.746270471371837E7d, (double) (short) 100, (-7.467661988726902E24d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.624927640909409E28d + "'", double6 == 1.624927640909409E28d);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38, (int) (byte) 100);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray87);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(doubleArray76, doubleArray87);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray76);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray68, (double) 100L);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray68);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray68);
        double double95 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray68);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray68);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 5 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 13.601470508735444d + "'", double95 == 13.601470508735444d);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray61);
        double double65 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray20, doubleArray42);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.scale(1.4678500047059846E9d, doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray0, doubleArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.3210650042353862E12, 2.935700009411969E11, 1.4678500047059846E12]");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray42, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray81);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray81);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray61, doubleArray81);
        double[] doubleArray88 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[] doubleArray92 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[][] doubleArray93 = new double[][] { doubleArray88, doubleArray92 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray61, doubleArray93);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray61);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection96 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray23, orderDirection96, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-Infinity, Infinity, Infinity]");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        long[] longArray4 = new long[] { (byte) -1, (short) 0, 10, (byte) 10 };
        long[] longArray9 = new long[] { (byte) -1, (short) 0, 10, (byte) 10 };
        long[] longArray14 = new long[] { (byte) -1, (short) 0, 10, (byte) 10 };
        long[][] longArray15 = new long[][] { longArray4, longArray9, longArray14 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: -1 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[-1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1, 0, 10, 10]");
        org.junit.Assert.assertNotNull(longArray15);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 1, 100.00499987500625d, (-1.9875501E7d), 6.525883142260517E35d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.2970519691988204E43d) + "'", double4 == (-1.2970519691988204E43d));
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray8 = null;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray8);
        float[] floatArray12 = new float[] { (-1L), (byte) 10 };
        float[] floatArray16 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray12, floatArray16);
        float[] floatArray20 = new float[] { (short) 1, (-1L) };
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray16, floatArray20);
        float[] floatArray24 = new float[] { (-1L), (byte) 10 };
        float[] floatArray28 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray24, floatArray28);
        float[] floatArray30 = null;
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray24);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray16);
        float[] floatArray36 = new float[] { (-1L), (byte) 10 };
        float[] floatArray40 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray36, floatArray40);
        float[] floatArray44 = new float[] { (short) 1, (-1L) };
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray40, floatArray44);
        float[] floatArray48 = new float[] { (-1L), (byte) 10 };
        float[] floatArray52 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray48, floatArray52);
        float[] floatArray54 = null;
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(floatArray48, floatArray54);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(floatArray40, floatArray48);
        float[] floatArray59 = new float[] { (-1L), (byte) 10 };
        float[] floatArray63 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray59, floatArray63);
        float[] floatArray65 = null;
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(floatArray59, floatArray65);
        float[] floatArray69 = new float[] { (-1L), (byte) 10 };
        float[] floatArray73 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray69, floatArray73);
        float[] floatArray77 = new float[] { (short) 1, (-1L) };
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray73, floatArray77);
        float[] floatArray81 = new float[] { (-1L), (byte) 10 };
        float[] floatArray85 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray81, floatArray85);
        float[] floatArray87 = null;
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(floatArray81, floatArray87);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(floatArray73, floatArray81);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(floatArray59, floatArray73);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(floatArray40, floatArray59);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray40);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(floatArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray81), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray85), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray44);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44);
        int[] intArray50 = new int[] {};
        int[] intArray55 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray55);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray55, (int) (short) 1);
        int[] intArray59 = new int[] {};
        int[] intArray64 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray59, intArray64);
        int[] intArray67 = org.apache.commons.math3.util.MathArrays.copyOf(intArray64, (int) (short) 1);
        int int68 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray67);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (short) 100);
        int[] intArray71 = new int[] {};
        int[] intArray76 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray71, intArray76);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76, (int) (short) 1);
        int[] intArray80 = new int[] {};
        int[] intArray85 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int86 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray80, intArray85);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray85, (int) (short) 1);
        int int89 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray79, intArray88);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray79, (int) (short) 100);
        double double92 = org.apache.commons.math3.util.MathArrays.distance(intArray58, intArray79);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray17, doubleArray48);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray48, 144652.08102413287d);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray74);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray76, (int) (byte) 0);
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray76);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray76);
        double double81 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray76);
        java.lang.Class<?> wildcardClass82 = doubleArray76.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 20.09975124224178d + "'", double79 == 20.09975124224178d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.04987562112089d + "'", double81 == 10.04987562112089d);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(4.0529758683460013E17d, (-2.7326318893828427E20d), 616666.6666666666d, 75611.0d, (-2.1064966936837643E10d), 14.866068747318506d, (double) '4', (-2.6131166153754868E10d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.1075291104741401E38d) + "'", double8 == (-1.1075291104741401E38d));
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray6);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale(111.0d, doubleArray6);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.552472386491933E14d), doubleArray13);
        java.lang.Class<?> wildcardClass15 = doubleArray13.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28, (int) ' ');
        int[] intArray32 = new int[] {};
        int[] intArray37 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray32, intArray37);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (short) 1);
        int[] intArray41 = new int[] {};
        int[] intArray46 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray41, intArray46);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (short) 1);
        int int50 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray49);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (short) 1);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray59, intArray68);
        int int70 = org.apache.commons.math3.util.MathArrays.distance1(intArray49, intArray68);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = org.apache.commons.math3.util.MathArrays.distance1(intArray31, intArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (byte) 0);
        int[] intArray29 = null;
        int int30 = org.apache.commons.math3.util.MathArrays.distance1(intArray28, intArray29);
        int[] intArray31 = new int[] {};
        int[] intArray36 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray31, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (short) 1);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray48);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (short) 1);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray59, intArray68);
        int[] intArray70 = new int[] {};
        int[] intArray75 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int76 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray70, intArray75);
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray75, (int) (short) 1);
        int[] intArray79 = new int[] {};
        int[] intArray84 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int85 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray79, intArray84);
        int[] intArray87 = org.apache.commons.math3.util.MathArrays.copyOf(intArray84, (int) (short) 1);
        int int88 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray78, intArray87);
        int int89 = org.apache.commons.math3.util.MathArrays.distance1(intArray68, intArray87);
        int[] intArray90 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87);
        int int91 = org.apache.commons.math3.util.MathArrays.distance1(intArray50, intArray87);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray38);
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.equals(doubleArray27, doubleArray38);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equals(doubleArray58, doubleArray69);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray58);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray50, (double) 100L);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray50);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray8, doubleArray38);
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection84 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray83, orderDirection84, false);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray8, orderDirection84, false);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(0.0d, doubleArray8);
        java.lang.Class<?> wildcardClass90 = doubleArray8.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + orderDirection84 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection84.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(18500.0d, (double) 98, (-2165.0d), (-1.2114525348282044E23d), 8.038986369571635E23d, (-9200.0d), 2.6817058196121406E33d, (-2.6653694205676815E15d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-7.147736686552591E48d) + "'", double8 == (-7.147736686552591E48d));
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.0554510251207795E22d), 1360.1470508735442d, 79.0d, (-2.7191506728564754E13d), (-7.147736686552591E48d), 1427.5857242211412d, 1.5183756289549949E7d, 22457.292802116644d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.02040068542142E52d) + "'", double8 == (-1.02040068542142E52d));
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.2114525348282044E23d), 101.0d, (double) 1, (-1.211513105940706E25d), 1.347347400304754E92d, 0.0d, 1.4678500047059846E9d, 4.451729603812351E60d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 6.534471319905731E69d + "'", double8 == 6.534471319905731E69d);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection72, true);
        double double75 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray37, doubleArray69);
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection83 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray82, orderDirection83, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection86 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray82, orderDirection86, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray37, orderDirection86, true, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly decreasing (-1 <= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2111.0d + "'", double71 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-9200.0d) + "'", double75 == (-9200.0d));
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + orderDirection83 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection83.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + orderDirection86 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection86.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 10, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray48);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection50, true);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray5, orderDirection50, false, false);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray5);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray56);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray63);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray56, doubleArray63);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray70);
        double double72 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray71);
        double double73 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.2584423289608705E9, -1.2584423289608705E9, -1.2584423289608704E10]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-Infinity, -Infinity, -Infinity]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-Infinity, -Infinity, -Infinity]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (double) 100L);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray41);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray9, doubleArray41);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9, (int) '4');
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, (int) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray37);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equals(doubleArray26, doubleArray37);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray57);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray49, (double) 100L);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray49);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray37, doubleArray82);
        double double85 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray7, doubleArray84);
        double double86 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray7, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 9209.0d + "'", double85 == 9209.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 10.04987562112089d + "'", double86 == 10.04987562112089d);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray44);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) 'a');
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1]");
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray40, (double) 100L);
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray64);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray64, orderDirection66, false, false);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.scale(21009.0d, doubleArray64);
        double[] doubleArray77 = new double[] { (short) 1, (-1.2109722143828504E23d), 1.5460450237574003E9d, 1010.0d, 2.5284455777199858E19d };
        double[] doubleArray83 = new double[] { (short) 1, (-1.2109722143828504E23d), 1.5460450237574003E9d, 1010.0d, 2.5284455777199858E19d };
        double[] doubleArray89 = new double[] { (short) 1, (-1.2109722143828504E23d), 1.5460450237574003E9d, 1010.0d, 2.5284455777199858E19d };
        double[][] doubleArray90 = new double[][] { doubleArray77, doubleArray83, doubleArray89 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray64, doubleArray90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 5 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 439.780879782446d + "'", double65 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-6302700.0, 1400600.0, 7003000.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, -1.2109722143828504E23, 1.5460450237574003E9, 1010.0, 2.5284455777199858E19]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, -1.2109722143828504E23, 1.5460450237574003E9, 1010.0, 2.5284455777199858E19]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, -1.2109722143828504E23, 1.5460450237574003E9, 1010.0, 2.5284455777199858E19]");
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        double double61 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray47, doubleArray59);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection69 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray68, orderDirection69, false);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray47, orderDirection69, true, false);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47, (int) (short) 10);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray28, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray76, 10.0d);
        java.lang.String[] strArray86 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection87 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray86, orderDirection87, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection90 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray86, orderDirection90, false);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray76, orderDirection90, false, false);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2111.0d + "'", double61 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + orderDirection69 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection69.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[11.11111111111111, -1.1111111111111112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + orderDirection87 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection87.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + orderDirection90 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection90.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray61);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray64);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray67);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -200 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray44);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray56 = new int[] {};
        int[] intArray61 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray56, intArray61);
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray61, (int) (short) 1);
        int[] intArray65 = new int[] {};
        int[] intArray70 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int71 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray65, intArray70);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70, (int) (short) 1);
        int int74 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray73);
        int[] intArray75 = new int[] {};
        int[] intArray80 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int81 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray75, intArray80);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(intArray73, intArray80);
        double double83 = org.apache.commons.math3.util.MathArrays.distance(intArray49, intArray73);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = org.apache.commons.math3.util.MathArrays.distance1(intArray44, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection7, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection10, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection13, false);
        double[] doubleArray19 = new double[] { 1, 1, 10 };
        double[] doubleArray23 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray23);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(doubleArray32, doubleArray43);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray32);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray74);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equals(doubleArray63, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray63);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray55, (double) 100L);
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray79);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection81 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray79, orderDirection81, false, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray79, orderDirection85, true, false);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection85, false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection7.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 439.780879782446d + "'", double80 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + orderDirection81 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection81.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 1353.403487508437d, (-1.708270408017212E47d), 1363.329967155091d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-2.3289362392541196E50d) + "'", double4 == (-2.3289362392541196E50d));
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.0554510251207795E22d), (-1.708270408017212E47d), 2.5284455777199858E19d, (double) 10);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 8.636077385394107E69d + "'", double4 == 8.636077385394107E69d);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray47);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(doubleArray36, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray36);
        double double51 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray28);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray68);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray70, (int) ' ');
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray70);
        double[] doubleArray74 = null;
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) (byte) 0);
        double double78 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray0, doubleArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 21.0d + "'", double51 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray47, doubleArray72);
        double[] doubleArray75 = null;
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray47, doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-890.0, 199.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray8 = null;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray8);
        float[] floatArray12 = new float[] { (-1L), (byte) 10 };
        float[] floatArray16 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray12, floatArray16);
        float[] floatArray20 = new float[] { (short) 1, (-1L) };
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray16, floatArray20);
        float[] floatArray24 = new float[] { (-1L), (byte) 10 };
        float[] floatArray28 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray24, floatArray28);
        float[] floatArray30 = null;
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray24);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray16);
        float[] floatArray36 = new float[] { (-1L), (byte) 10 };
        float[] floatArray40 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray36, floatArray40);
        float[] floatArray44 = new float[] { (short) 1, (-1L) };
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray40, floatArray44);
        float[] floatArray48 = new float[] { (-1L), (byte) 10 };
        float[] floatArray52 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray48, floatArray52);
        float[] floatArray54 = null;
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(floatArray48, floatArray54);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(floatArray40, floatArray48);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray40);
        java.lang.Class<?> wildcardClass58 = floatArray16.getClass();
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.2170120134952047E22d), (double) (short) 0, 75611.0d, (double) (short) 0, 6181.097447311743d, 616666.6666666666d, (double) (byte) 1, 1353.403487508437d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.811678112579062E9d + "'", double8 == 3.811678112579062E9d);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) '4');
        int[] intArray17 = new int[] {};
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray22);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 1);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22);
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray12, intArray27);
        int[] intArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int30 = org.apache.commons.math3.util.MathArrays.distance1(intArray12, intArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray56);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equals(doubleArray45, doubleArray56);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray56);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray87);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(doubleArray76, doubleArray87);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray76);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray68, (double) 100L);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray68);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray26, doubleArray56);
        double double95 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray7, doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        double double32 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray30);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray30, orderDirection33, true);
        double double36 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray30);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, 1363.329967155091d);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray30);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (-19.0d));
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray60);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray72);
        double double74 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray60, doubleArray72);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection75 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray72, orderDirection75, true);
        double double78 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray72);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray72, 1363.329967155091d);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray72);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.scale(Double.NaN, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray30, doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray0, doubleArray83);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2111.0d + "'", double32 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1360.1470508735442d + "'", double36 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[57.0, -12.666666666666666, -63.333333333333336]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2111.0d + "'", double74 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection75 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection75.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1360.1470508735442d + "'", double78 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[8.1E7, -3.6E7, -1.76E8, 4.0E7, 1.0E8]");
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-183792.33961872238d), 13.601470508735444d, 21.0d, (double) (byte) -1, (double) 100.0f, (-1.2109722143828504E23d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.2109722143828504E25d) + "'", double6 == (-1.2109722143828504E25d));
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1.4102824113935717E10d, (-12.601470508735444d), 2.1940812183982476E20d, (double) ' ', (-1.3755656043295059E12d), 13.601470508735444d, (-1.2170120134952047E22d), 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 7.021059879986961E21d + "'", double8 == 7.021059879986961E21d);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.3341985624134572E32d, 2165.0d, 116405.9998500075d, 1101.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.8885398876251348E35d + "'", double4 == 2.8885398876251348E35d);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray38, doubleArray58);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.scale(13.601470508735444d, doubleArray58);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray66);
        double[] doubleArray77 = new double[] { 1, 1, 10 };
        double[] doubleArray81 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray81);
        double double84 = org.apache.commons.math3.util.MathArrays.distance(doubleArray66, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray83, (int) (short) 100);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray86, 9319.084308623767d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray58, doubleArray86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 3 != 100");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-12241.3234578619, 2720.294101747089, 13601.470508735443]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 14.866068747318506d + "'", double84 == 14.866068747318506d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-10.0, 1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10354.538120693074, -1035.4538120693076, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(4.533823502911814d, 1.7246705822717612E15d, 2.1940812183982476E20d, 0.0d, 1020.0d, 8.636077385394107E69d, (double) (byte) 100, 1.0282061941137209E34d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 8.80879893310199E72d + "'", double8 == 8.80879893310199E72d);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, 0);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (short) 1);
        int int60 = org.apache.commons.math3.util.MathArrays.distance1(intArray50, intArray59);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = org.apache.commons.math3.util.MathArrays.distance(intArray29, intArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(820404.8465375019d, 1427.5857242211412d, (-2.613107296291178E10d), (double) 98);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-2.559673952118356E12d) + "'", double4 == (-2.559673952118356E12d));
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection72, true);
        double double75 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray37, doubleArray69);
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection83 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray82, orderDirection83, false);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray37, orderDirection83, false);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37, 10);
        java.lang.Class<?> wildcardClass90 = doubleArray89.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2111.0d + "'", double71 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-9200.0d) + "'", double75 == (-9200.0d));
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + orderDirection83 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection83.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection7, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection10, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection13, false);
        java.lang.Class<?> wildcardClass16 = strArray6.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection7.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(2.8772624126635964E38d, (double) 1L, (-12.601470508735444d), (double) (short) 10);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.8772624126635964E38d + "'", double4 == 2.8772624126635964E38d);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray77);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(doubleArray66, doubleArray77);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray66);
        double double81 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray49, doubleArray58);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray28, doubleArray58);
        double[] doubleArray84 = new double[] { ' ' };
        double[] doubleArray86 = new double[] { ' ' };
        double[] doubleArray88 = new double[] { ' ' };
        double[] doubleArray90 = new double[] { ' ' };
        double[] doubleArray92 = new double[] { ' ' };
        double[] doubleArray94 = new double[] { ' ' };
        double[][] doubleArray95 = new double[][] { doubleArray84, doubleArray86, doubleArray88, doubleArray90, doubleArray92, doubleArray94 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray28, doubleArray95);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 21.0d + "'", double81 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-909.0, 202.0, 1010.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray38, doubleArray58);
        double[] doubleArray65 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[] doubleArray69 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[][] doubleArray70 = new double[][] { doubleArray65, doubleArray69 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray38, doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray0, doubleArray38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray70);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray9, orderDirection10, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray9, orderDirection13, false);
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection13, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection18 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection18, false);
        java.lang.Class<?> wildcardClass21 = orderDirection18.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + orderDirection18 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection18.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(22457.292802116644d, 4.533823502911814d, 61.66666666666667d, (double) (-1L));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 101755.73525134209d + "'", double4 == 101755.73525134209d);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) ' ');
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray67);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(doubleArray56, doubleArray67);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray56);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray39, doubleArray48);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray88);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray90, (int) ' ');
        double double93 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray90);
        double[] doubleArray94 = null;
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray94);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray20, doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 21.0d + "'", double71 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[]");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray37);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equals(doubleArray26, doubleArray37);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray57);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray49, (double) 100L);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray49);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray37, doubleArray82);
        double double85 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray7, doubleArray84);
        java.lang.Class<?> wildcardClass86 = doubleArray84.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 9209.0d + "'", double85 == 9209.0d);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray45 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray45);
        double double48 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray45);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray55, orderDirection56, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray55, orderDirection59, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray45, orderDirection59, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly decreasing (0 <= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10000.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.00499987500625d + "'", double48 == 100.00499987500625d);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + orderDirection56 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection56.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + orderDirection59 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection59.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int[] intArray37 = new int[] {};
        int[] intArray42 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int43 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray37, intArray42);
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray42, (int) (short) 1);
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray36, intArray45);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        double double54 = org.apache.commons.math3.util.MathArrays.distance(intArray45, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray24, intArray56);
        int[] intArray59 = new int[] {};
        int[] intArray64 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray59, intArray64);
        int[] intArray67 = org.apache.commons.math3.util.MathArrays.copyOf(intArray64, (int) (short) 1);
        int[] intArray68 = new int[] {};
        int[] intArray73 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int74 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray68, intArray73);
        int[] intArray76 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (short) 1);
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray67, intArray76);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray24, intArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        double double34 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray28, 1363.329967155091d);
        double double37 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray36);
        java.lang.Class<?> wildcardClass38 = doubleArray36.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1360.1470508735442d + "'", double34 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 6181.097447311743d + "'", double37 == 6181.097447311743d);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 1);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 1);
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray46, intArray55);
        int int57 = org.apache.commons.math3.util.MathArrays.distance1(intArray36, intArray55);
        int[] intArray58 = new int[] {};
        int[] intArray63 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int64 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray63);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (short) 1);
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray36, intArray63);
        double double68 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray63);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray40);
        double double55 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray20, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale(929377.4372207435d, doubleArray54);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.scale((double) (short) 0, doubleArray56);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray74);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray86);
        double double88 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray74, doubleArray86);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray86, orderDirection89, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray57, orderDirection89, true, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (-0 <= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2068.0d + "'", double55 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.7658171307194125E7, 2788132.3116622306, 9293774.372207435]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2111.0d + "'", double88 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10L, 9.207239720523508E39d, (-7.147736686552591E48d), (-1.2157512288535557E51d), 0.0d, 104715.43798342906d, (double) (short) 10, (-2.7191506728564754E13d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 8.689869660197955E99d + "'", double8 == 8.689869660197955E99d);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-7.887202131357053E44d), (-101.0d), 61.66666666666667d, (-6.469188686213299E42d), (-5.644230165222219E15d), (double) 235, 111.0d, 1.0282061941137209E34d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 7.926180822553106E46d + "'", double8 == 7.926180822553106E46d);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray57);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray65);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray65);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray42);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray42);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale(1360.1470508735442d, doubleArray42);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-12241.323457861898, 2720.2941017470885, 13601.470508735441]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-12241.323457861898, 2720.2941017470885, 13601.470508735441]");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray37);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equals(doubleArray26, doubleArray37);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray57);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray49, (double) 100L);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray49);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray37, doubleArray82);
        double double85 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray7, doubleArray84);
        java.lang.Class<?> wildcardClass86 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 9209.0d + "'", double85 == 9209.0d);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1200.0d, (-1058.0d), 0.0d, 3.780478449848133E29d, 75611.0d, (-7.887202131357053E44d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5.963592403540382E49d) + "'", double6 == (-5.963592403540382E49d));
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.5460450237574002E8d, (-2.615914305086962E12d), (-1.211513105940706E25d), 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-4.0443212939554954E20d) + "'", double4 == (-4.0443212939554954E20d));
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int[] intArray18 = new int[] {};
        int[] intArray23 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray23);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (short) 1);
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (short) 100);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, (int) (short) 100);
        double double51 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray38);
        int int52 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray17);
        int[] intArray53 = new int[] {};
        int[] intArray58 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray58);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (short) 1);
        int[] intArray68 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int69 = org.apache.commons.math3.util.MathArrays.distance1(intArray61, intArray68);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray68);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 98 + "'", int69 == 98);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 98 + "'", int70 == 98);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.552472386491933E14d), 2010.0d, (-2.6131166153754868E10d), 820404.8465375019d, 1.5183756289549949E7d, 2.819888708394894E13d, (-6.469188686213148E43d), (-1.21097221436007E21d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 7.834007748456647E64d + "'", double8 == 7.834007748456647E64d);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray9, (double) 100L);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(3600.0d, doubleArray9);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double double36 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-32400.0, 7200.0, 36000.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-32400.0, 7200.0, 36000.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 48965.2938314476d + "'", double36 == 48965.2938314476d);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray65);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray67, doubleArray86);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray67, orderDirection88, true);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray43, orderDirection88, false, false);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray43);
        double double95 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray37, doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray43);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (1 >= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection88 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection88.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 12.0d + "'", double95 == 12.0d);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(doubleArray29, doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray40);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray52, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray82);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray82);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray40, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray85);
        double double88 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray7);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray7, 9319.084308623767d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 10.04987562112089d + "'", double88 == 10.04987562112089d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10354.538120693074, -1035.4538120693076, 0.0]");
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.274826008912762E85d), (-2.665302576915262E10d), (-2.559673952118356E12d), 3.295116804952141E29d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.405900735433483E96d + "'", double4 == 1.405900735433483E96d);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 6.534471319905731E69d, 10.0d, (-2.639260241354281E12d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-2.639260241354281E13d) + "'", double4 == (-2.639260241354281E13d));
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray68, doubleArray87);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray68, orderDirection89, true);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray44, orderDirection89, false, false);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray44);
        double double96 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray38, doubleArray44);
        double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38, (int) (short) 1);
        double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.scale(3.0341344585090943E22d, doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 12.0d + "'", double96 == 12.0d);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[0.0]");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray42, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray72);
        double[] doubleArray79 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray75, doubleArray79);
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray79);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (byte) 10, doubleArray79);
        double double83 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray79);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray79, 2.014842271203998E7d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1000.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1427.5857242211412d + "'", double81 == 1427.5857242211412d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1000.0499987500625d + "'", double83 == 1000.0499987500625d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.994893337825741E7, 0.0, 199489.33378257407]");
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double double50 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray27);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray67);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, (int) ' ');
        double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray69);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, 0);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, (int) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 21.0d + "'", double50 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0]");
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray53);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray53, (int) (short) 10);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.scale(48965.2938314476d, doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2068.0d + "'", double54 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-19.0, 3.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-930340.5827975044, 146895.8814943428, 489652.938314476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-2.6131166153754868E10d), (-1.1075291104741401E38d), 616666.6666666666d, (-2.613107296291178E10d), 22457.292802116644d, (-7.467661988726902E24d), 1346.545580364809d, 1.405900735433483E96d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.8931094217295912E99d + "'", double8 == 1.8931094217295912E99d);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray42, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray85 = new double[] { 1, 1, 10 };
        double[] doubleArray89 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray85, doubleArray89);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray90);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(doubleArray79, doubleArray90);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray79);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray71, (double) 100L);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray61, doubleArray71);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray23, doubleArray71);
        java.lang.Class<?> wildcardClass98 = doubleArray97.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-12.0, 2.6666666666666665, 13.333333333333334]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.0d), (-1.2170120134952047E22d), 2.3726213090057078E14d, (-2.7191506728564754E13d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-6.451502658696347E27d) + "'", double4 == (-6.451502658696347E27d));
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        float[] floatArray0 = null;
        float[] floatArray3 = new float[] { (-1L), (byte) 10 };
        float[] floatArray7 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean8 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray7);
        float[] floatArray11 = new float[] { (short) 1, (-1L) };
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray7, floatArray11);
        boolean boolean13 = org.apache.commons.math3.util.MathArrays.equals(floatArray0, floatArray7);
        float[] floatArray16 = new float[] { (-1L), (byte) 10 };
        float[] floatArray20 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray16, floatArray20);
        float[] floatArray24 = new float[] { (short) 1, (-1L) };
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray20, floatArray24);
        float[] floatArray28 = new float[] { (-1.0f), 100.0f };
        float[] floatArray31 = new float[] { (-1L), (byte) 10 };
        float[] floatArray35 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray31, floatArray35);
        float[] floatArray39 = new float[] { (short) 1, (-1L) };
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray35, floatArray39);
        float[] floatArray43 = new float[] { (-1L), (byte) 10 };
        float[] floatArray47 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray43, floatArray47);
        float[] floatArray49 = null;
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.equals(floatArray43, floatArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(floatArray35, floatArray43);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(floatArray28, floatArray43);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray43);
        float[] floatArray56 = new float[] { (-1L), (byte) 10 };
        float[] floatArray60 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray56, floatArray60);
        float[] floatArray64 = new float[] { (short) 1, (-1L) };
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray60, floatArray64);
        float[] floatArray68 = new float[] { (-1.0f), 100.0f };
        float[] floatArray71 = new float[] { (-1L), (byte) 10 };
        float[] floatArray75 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray71, floatArray75);
        float[] floatArray79 = new float[] { (short) 1, (-1L) };
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray75, floatArray79);
        float[] floatArray83 = new float[] { (-1L), (byte) 10 };
        float[] floatArray87 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray83, floatArray87);
        float[] floatArray89 = null;
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(floatArray83, floatArray89);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(floatArray75, floatArray83);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(floatArray68, floatArray83);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equals(floatArray64, floatArray83);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray43, floatArray64);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equals(floatArray0, floatArray43);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray83), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray87), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(4.149720547924001E12d, 8.80879893310199E72d, (-1.2114525348282044E23d), (-2.665302576915262E10d), (-7.217129340870217E24d), 13.601470508735444d, 75611.0d, 1.5460450237574003E9d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.655405393522434E85d + "'", double8 == 3.655405393522434E85d);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray83);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(doubleArray72, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray72);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray64, (double) 100L);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, 100.00499987500625d);
        double double93 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray30);
        double double94 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-300.01499962501873, 66.66999991667083, 333.3499995833542]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 13.601470508735444d + "'", double93 == 13.601470508735444d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 13.601470508735444d + "'", double94 == 13.601470508735444d);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray47);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(doubleArray36, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray36);
        double double51 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray28);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray68);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray70, (int) ' ');
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray70);
        double[] doubleArray74 = null;
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray88 = new double[] { 1, 1, 10 };
        double[] doubleArray92 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray88, doubleArray92);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray92);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray94, (int) ' ');
        double double97 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray94);
        double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray94);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2111.0d, doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 21.0d + "'", double51 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double double50 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray27);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray67);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, (int) ' ');
        double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray69);
        double[] doubleArray73 = null;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 21.0d + "'", double50 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.2157512288535557E51d), Double.NaN, 0.0d, 6.534471319905731E69d, (-2.5043938381010786E8d), 3.0855098392300684E13d, 1.624927640909409E28d, (-273300.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(3.0341344585090943E22d, 8.636077385394107E69d, 18500.0d, (-218665.0d), 1.4678500047059846E9d, 8.636077385394107E69d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.620301998137665E92d + "'", double6 == 2.620301998137665E92d);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int int30 = org.apache.commons.math3.util.MathArrays.distance1(intArray20, intArray29);
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        float[] floatArray0 = null;
        float[] floatArray3 = new float[] { (-1L), (byte) 10 };
        float[] floatArray7 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean8 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray7);
        float[] floatArray11 = new float[] { (short) 1, (-1L) };
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray7, floatArray11);
        float[] floatArray15 = new float[] { (-1L), (byte) 10 };
        float[] floatArray19 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray15, floatArray19);
        float[] floatArray23 = new float[] { (short) 1, (-1L) };
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray19, floatArray23);
        float[] floatArray27 = new float[] { (-1L), (byte) 10 };
        float[] floatArray31 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray27, floatArray31);
        float[] floatArray33 = null;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(floatArray27, floatArray33);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray27);
        float[] floatArray38 = new float[] { (-1L), (byte) 10 };
        float[] floatArray42 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray38, floatArray42);
        float[] floatArray44 = null;
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(floatArray38, floatArray44);
        float[] floatArray48 = new float[] { (-1L), (byte) 10 };
        float[] floatArray52 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray48, floatArray52);
        float[] floatArray56 = new float[] { (short) 1, (-1L) };
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray52, floatArray56);
        float[] floatArray60 = new float[] { (-1L), (byte) 10 };
        float[] floatArray64 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray60, floatArray64);
        float[] floatArray66 = null;
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(floatArray60, floatArray66);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(floatArray52, floatArray60);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(floatArray38, floatArray52);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray38);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray7, floatArray19);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray0, floatArray7);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1.3341985624134572E32d, 104715.43798342906d, (double) (byte) 0, 3.811678112579062E9d, (double) 0L, 212170.0d, 1366.9312345542478d, 102098.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.3971118681998659E37d + "'", double8 == 1.3971118681998659E37d);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1.5185608816622775E7d, (-2.3726249250325616E14d), 9319.084308623767d, (-1.0d), 61.66666666666667d, 1.624927640909409E28d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0020387082911603E30d + "'", double6 == 1.0020387082911603E30d);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int[] intArray37 = new int[] {};
        int[] intArray42 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int43 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray37, intArray42);
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray42, (int) (short) 1);
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray36, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (short) 100);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48);
        int int50 = org.apache.commons.math3.util.MathArrays.distance1(intArray24, intArray49);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (short) 1);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray59, intArray68);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray68);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray68);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray68, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 235 + "'", int50 == 235);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1]");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(6.525883142260517E35d, (-1.2170120134952047E22d), (-101.0d), (-2.1056418422573112E15d), (-5.963592403540382E49d), 75611.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-7.946587314649125E57d) + "'", double6 == (-7.946587314649125E57d));
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray60);
        double double64 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray41);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.scale(1.4678500047059846E9d, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double double67 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.3210650042353862E12, 2.935700009411969E11, 1.4678500047059846E12]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1360.1470508735442d + "'", double67 == 1360.1470508735442d);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 10, (-5.691405330860345E15d), (-2.639260241354281E13d), 75611.0d, 1.0282061941137209E34d, 3.1411498696267944E34d, 4.533823502911814d, 3.0341344585090943E22d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.229749752589777E68d + "'", double8 == 3.229749752589777E68d);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20);
        int[] intArray22 = new int[] {};
        int[] intArray27 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray22, intArray27);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (short) 1);
        int[] intArray37 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray30, intArray37);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = org.apache.commons.math3.util.MathArrays.distance1(intArray21, intArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 98 + "'", int38 == 98);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 1, 52, 1, 32, -1]");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, 0);
        int[] intArray17 = new int[] {};
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray22);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 1);
        int[] intArray26 = new int[] {};
        int[] intArray31 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int32 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray26, intArray31);
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (short) 1);
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray25, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, 0);
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 1);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 1);
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray46, intArray55);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (short) 100);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58);
        double double60 = org.apache.commons.math3.util.MathArrays.distance(intArray37, intArray58);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37);
        int int62 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray61);
        int[] intArray63 = null;
        int int64 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray63);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(10.04987562112089d, (-4.2035421686351696E21d), 1427.5857242211412d, (-273300.0d), (-218665.0d), 4.149720547924001E12d, (-1.3399302268582524E25d), (-9200.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.2327353862497586E29d + "'", double8 == 1.2327353862497586E29d);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray37, orderDirection38, false);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16, orderDirection38, true, false);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, (int) (short) 10);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16);
        double[] doubleArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray46, doubleArray47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray27);
        int[] intArray29 = new int[] {};
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 1);
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 1);
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray37, intArray46);
        int int48 = org.apache.commons.math3.util.MathArrays.distance1(intArray27, intArray46);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        double double56 = org.apache.commons.math3.util.MathArrays.distance(intArray27, intArray54);
        int int57 = org.apache.commons.math3.util.MathArrays.distance1(intArray9, intArray27);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 100);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int[] intArray70 = new int[] {};
        int[] intArray75 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int76 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray70, intArray75);
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray75, (int) (short) 1);
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray69, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 100);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(intArray48, intArray69);
        double double83 = org.apache.commons.math3.util.MathArrays.distance(intArray36, intArray69);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (byte) 1);
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1.0824859522117259E27d, 474492.3840484359d, 8.038986369571635E23d, (-19.0d), 7.579073332736437E12d, 1.3971118681998659E37d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0588813303123186E50d + "'", double6 == 1.0588813303123186E50d);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double double41 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.04987562112089d + "'", double41 == 10.04987562112089d);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray0, 7.55404E7d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        float[] floatArray2 = new float[] { (-1.0f), 100.0f };
        float[] floatArray5 = new float[] { (-1L), (byte) 10 };
        float[] floatArray9 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray5, floatArray9);
        float[] floatArray13 = new float[] { (short) 1, (-1L) };
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray9, floatArray13);
        float[] floatArray17 = new float[] { (-1L), (byte) 10 };
        float[] floatArray21 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray17, floatArray21);
        float[] floatArray23 = null;
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(floatArray17, floatArray23);
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equals(floatArray9, floatArray17);
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray17);
        float[] floatArray29 = new float[] { (-1L), (byte) 10 };
        float[] floatArray33 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray29, floatArray33);
        float[] floatArray37 = new float[] { (short) 1, (-1L) };
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray33, floatArray37);
        float[] floatArray41 = new float[] { (-1L), (byte) 10 };
        float[] floatArray45 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray41, floatArray45);
        float[] floatArray49 = new float[] { (short) 1, (-1L) };
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray45, floatArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(floatArray37, floatArray49);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray49);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray10 = new float[] { (short) 1, (-1L) };
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray10);
        float[] floatArray14 = new float[] { (-1L), (byte) 10 };
        float[] floatArray18 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray14, floatArray18);
        float[] floatArray22 = new float[] { (short) 1, (-1L) };
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray18, floatArray22);
        float[] floatArray26 = new float[] { (-1L), (byte) 10 };
        float[] floatArray30 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray26, floatArray30);
        float[] floatArray34 = new float[] { (short) 1, (-1L) };
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray30, floatArray34);
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equals(floatArray22, floatArray34);
        float[] floatArray39 = new float[] { (-1L), (byte) 10 };
        float[] floatArray43 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray39, floatArray43);
        float[] floatArray47 = new float[] { (short) 1, (-1L) };
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray43, floatArray47);
        float[] floatArray51 = new float[] { (-1L), (byte) 10 };
        float[] floatArray55 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray51, floatArray55);
        float[] floatArray57 = null;
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equals(floatArray51, floatArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(floatArray43, floatArray51);
        float[] floatArray62 = new float[] { (-1L), (byte) 10 };
        float[] floatArray66 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray62, floatArray66);
        float[] floatArray70 = new float[] { (short) 1, (-1L) };
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray66, floatArray70);
        float[] floatArray74 = new float[] { (-1L), (byte) 10 };
        float[] floatArray78 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray74, floatArray78);
        float[] floatArray80 = null;
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(floatArray74, floatArray80);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equals(floatArray66, floatArray74);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray51, floatArray74);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray34, floatArray74);
        float[] floatArray87 = new float[] { (-1L), (byte) 10 };
        float[] floatArray91 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray87, floatArray91);
        float[] floatArray95 = new float[] { (short) 1, (-1L) };
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray91, floatArray95);
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.equals(floatArray34, floatArray95);
        boolean boolean98 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray10, floatArray34);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(floatArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray87), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray91), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(floatArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray95), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-12.601470508735444d), 0.0d, 1353.329967155091d, (double) 'a', 101755.73525134209d, 212170.0d, 13.601470508735444d, 111.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.158964713104729E10d + "'", double8 == 2.158964713104729E10d);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        long[] longArray4 = new long[] { (short) 100, 98, (-1), 10 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: -1 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[100, 98, -1, 10]");
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-2.6653694205676815E15d), 2.3726213090057078E14d, 3.0341344585090943E22d, (-5.479592817681999E9d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.6689060509564007E32d) + "'", double4 == (-1.6689060509564007E32d));
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.5183866289549949E7d), 1.2709644515984184E10d, 18500.0d, (-1.3399302268582524E25d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-2.4788709196896968E29d) + "'", double4 == (-2.4788709196896968E29d));
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray44);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 100);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int[] intArray58 = new int[] {};
        int[] intArray63 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int64 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray63);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (short) 1);
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray57, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, 0);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = org.apache.commons.math3.util.MathArrays.distance(intArray44, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray48);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection50, true);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray5, orderDirection50, false, false);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray5);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray56);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray63);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray56, doubleArray63);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray70);
        double double72 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray71);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        double[] doubleArray86 = new double[] { 1, 1, 10 };
        double[] doubleArray90 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray86, doubleArray90);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray91);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equals(doubleArray80, doubleArray91);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray91);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray91, (double) (byte) 1);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.2584423289608705E9, -1.2584423289608705E9, -1.2584423289608704E10]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-Infinity, -Infinity, -Infinity]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-Infinity, -Infinity, -Infinity]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-Infinity, -Infinity, -Infinity]");
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray10 = new float[] { (-1L), (byte) 10 };
        float[] floatArray14 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray10, floatArray14);
        float[] floatArray16 = null;
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.equals(floatArray10, floatArray16);
        float[] floatArray20 = new float[] { (-1L), (byte) 10 };
        float[] floatArray24 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray20, floatArray24);
        float[] floatArray28 = new float[] { (short) 1, (-1L) };
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray24, floatArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray10, floatArray24);
        float[] floatArray33 = new float[] { (-1L), (byte) 10 };
        float[] floatArray37 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray33, floatArray37);
        float[] floatArray41 = new float[] { (short) 1, (-1L) };
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray37, floatArray41);
        float[] floatArray45 = new float[] { (-1L), (byte) 10 };
        float[] floatArray49 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray45, floatArray49);
        float[] floatArray53 = new float[] { (short) 1, (-1L) };
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray49, floatArray53);
        float[] floatArray57 = new float[] { (-1L), (byte) 10 };
        float[] floatArray61 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray57, floatArray61);
        float[] floatArray65 = new float[] { (short) 1, (-1L) };
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray61, floatArray65);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(floatArray53, floatArray65);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(floatArray37, floatArray65);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray24, floatArray37);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray24);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 1, 1.5460450237574002E8d, 3.229749752589777E68d, 1363.329967155091d, 7.746270471371837E7d, 1010.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 4.403214624117384E71d + "'", double6 == 4.403214624117384E71d);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 100);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int[] intArray70 = new int[] {};
        int[] intArray75 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int76 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray70, intArray75);
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray75, (int) (short) 1);
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray69, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 100);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(intArray48, intArray69);
        double double83 = org.apache.commons.math3.util.MathArrays.distance(intArray36, intArray69);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1]");
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        double double32 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray30);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray30, orderDirection33, true);
        double double36 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray30);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, 1363.329967155091d);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray30);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.scale(Double.NaN, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray44);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray59);
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray39, doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2111.0d + "'", double32 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1360.1470508735442d + "'", double36 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 14.866068747318506d + "'", double62 == 14.866068747318506d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (-1L), 104609.92739486144d, 10.099504938362077d, (double) 100, (-2.559673952118356E12d), (-1058.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.7081350412376205E15d + "'", double6 == 2.7081350412376205E15d);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray20 = new int[] {};
        int[] intArray25 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray25);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, (int) (short) 1);
        int[] intArray29 = new int[] {};
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 1);
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray37);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int[] intArray48 = new int[] {};
        int[] intArray53 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int54 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray53);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (short) 1);
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray56);
        int int58 = org.apache.commons.math3.util.MathArrays.distance1(intArray37, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56);
        int int60 = org.apache.commons.math3.util.MathArrays.distance1(intArray19, intArray56);
        java.lang.Class<?> wildcardClass61 = intArray19.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10, (-7.217129340870217E24d), (double) (short) 100, 104609.92739486144d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-7.217129340870217E25d) + "'", double4 == (-7.217129340870217E25d));
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double double50 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 21.0d + "'", double50 == 21.0d);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection72, true);
        double double75 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray37, doubleArray69);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray80);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray37, doubleArray80);
        double double88 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2111.0d + "'", double71 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-9200.0d) + "'", double75 == (-9200.0d));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 10.04987562112089d + "'", double88 == 10.04987562112089d);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray83);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(doubleArray72, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray72);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray64, (double) 100L);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, 100.00499987500625d);
        double double93 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray30, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-300.01499962501873, 66.66999991667083, 333.3499995833542]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 13.601470508735444d + "'", double93 == 13.601470508735444d);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray9, (double) 100L);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (-0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-0.0, 0.0, 0.0]");
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, 144652.08102413287d);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (double) 10L);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray66, 235);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray68, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[11.11111111111111, -1.1111111111111112, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray42, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray72);
        double[] doubleArray79 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray75, doubleArray79);
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray79);
        double[] doubleArray86 = new double[] { 1, 1, 10 };
        double[] doubleArray90 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray86, doubleArray90);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray86);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray86);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-7.946587314649125E57d), doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[7.151928583184213E60, -1.5893174629298249E60, -7.946587314649124E60]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1427.5857242211412d + "'", double81 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-901.0, 199.0, 990.0]");
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray39);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(474492.3840484359d, doubleArray39);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray39);
        java.lang.Class<?> wildcardClass46 = doubleArray39.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[4744923.840484359, -474492.3840484359, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray6);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        double double43 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray29, doubleArray41);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray41, orderDirection44, true);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray65);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(doubleArray54, doubleArray65);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray84);
        double[] doubleArray91 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray87, doubleArray91);
        double double93 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray91);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray6, doubleArray41);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray41, 10);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.scale((-1.2114525348282043E21d), doubleArray96);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.1075291104741401E38d), doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2111.0d + "'", double43 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1427.5857242211412d + "'", double93 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-1.2075470534519308E62, 2.6834378965598466E61, 1.3417189482799235E62, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray10 = new float[] { (short) 1, (-1L) };
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray10);
        float[] floatArray14 = new float[] { (-1L), (byte) 10 };
        float[] floatArray18 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray14, floatArray18);
        float[] floatArray22 = new float[] { (short) 1, (-1L) };
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray18, floatArray22);
        float[] floatArray26 = new float[] { (-1L), (byte) 10 };
        float[] floatArray30 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray26, floatArray30);
        float[] floatArray32 = null;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(floatArray26, floatArray32);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(floatArray18, floatArray26);
        float[] floatArray37 = new float[] { (-1L), (byte) 10 };
        float[] floatArray41 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray37, floatArray41);
        float[] floatArray43 = null;
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(floatArray37, floatArray43);
        float[] floatArray47 = new float[] { (-1L), (byte) 10 };
        float[] floatArray51 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray47, floatArray51);
        float[] floatArray55 = new float[] { (short) 1, (-1L) };
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray51, floatArray55);
        float[] floatArray59 = new float[] { (-1L), (byte) 10 };
        float[] floatArray63 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray59, floatArray63);
        float[] floatArray65 = null;
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(floatArray59, floatArray65);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(floatArray51, floatArray59);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(floatArray37, floatArray51);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(floatArray18, floatArray37);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray18);
        float[] floatArray73 = new float[] { (-1L), (byte) 10 };
        float[] floatArray77 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray73, floatArray77);
        float[] floatArray81 = new float[] { (short) 1, (-1L) };
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray77, floatArray81);
        float[] floatArray85 = new float[] { (-1L), (byte) 10 };
        float[] floatArray89 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray85, floatArray89);
        float[] floatArray91 = null;
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(floatArray85, floatArray91);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equals(floatArray77, floatArray85);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray77);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(floatArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray81), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(floatArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray85), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray89), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        double[] doubleArray0 = null;
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray21);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(doubleArray10, doubleArray21);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray40);
        double[] doubleArray47 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.scale(2068.0d, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equals(doubleArray58, doubleArray69);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray69);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray69, (double) (byte) 1);
        double double75 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray74);
        double[][] doubleArray76 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray74, doubleArray76);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray50, doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, doubleArray76);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10000.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 206800.0, 2.068E7]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 4.533823502911814d + "'", double75 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray76);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray39);
        double[] doubleArray46 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.scale(2068.0d, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray68);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray68);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray68, (double) (byte) 1);
        double double74 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray73);
        double[][] doubleArray75 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray73, doubleArray75);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray48, doubleArray75);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray48, 3.229749752589777E68d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[2.068E7, 0.0, 206800.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4.533823502911814d + "'", double74 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 3.1977720322671057E66, 3.197772032267106E68]");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.691405330860345E15d), 0.0d, 2.2267871488170685E30d, (-2.6131166153754868E10d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-5.818854497478488E40d) + "'", double4 == (-5.818854497478488E40d));
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 98, (-1.2109722143828504E23d), (-1058.0d), 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.1867527700951934E25d) + "'", double4 == (-1.1867527700951934E25d));
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, 100);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray26);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray33);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray33);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray50, orderDirection51, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection54 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray50, orderDirection54, false);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray43, orderDirection54, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray43, orderDirection59, false);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray40, orderDirection59, false, false);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection75 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray74, orderDirection75, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection78 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray74, orderDirection78, false);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray67, orderDirection78, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection83 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray67, orderDirection83, false);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray40, orderDirection83, false);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray28, doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + orderDirection54 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection54.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + orderDirection59 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection59.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + orderDirection75 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection75.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + orderDirection78 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection78.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + orderDirection83 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection83.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-8.13113621789387E42d), 4.0529758683460013E17d, (-2.6131166153754868E10d), (-1.3399302268582524E25d), 12.0d, 8.80879893310199E72d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0570558719722057E74d + "'", double6 == 1.0570558719722057E74d);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        java.lang.Class<?> wildcardClass23 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray11 = new int[] {};
        int[] intArray16 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int17 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray11, intArray16);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16, (int) (short) 1);
        int[] intArray20 = new int[] {};
        int[] intArray25 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray25);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, (int) (short) 1);
        int int29 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray28);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, 0);
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19);
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32, 1);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1]");
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray4);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray39);
        double double41 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray27, doubleArray39);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray39, orderDirection42, true);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray52, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray82);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray82);
        double[] doubleArray89 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray85, doubleArray89);
        double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray4, doubleArray39);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, 1849908.0027625682d);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray95);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2111.0d + "'", double41 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1427.5857242211412d + "'", double91 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-5549724.008287705, 1233272.0018417123, 6166360.009208561]");
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.2459825039216539E7d), (double) 98, (-2.554111747075503E77d), 9209.0d, (double) 235, 0.0d, 2.158964713104729E10d, (double) (-1.0f));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-2.3520815078818308E81d) + "'", double8 == (-2.3520815078818308E81d));
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        float[] floatArray0 = null;
        float[] floatArray3 = new float[] { (-1L), (byte) 10 };
        float[] floatArray7 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean8 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray7);
        float[] floatArray9 = null;
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray9);
        float[] floatArray13 = new float[] { (-1L), (byte) 10 };
        float[] floatArray17 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray13, floatArray17);
        float[] floatArray21 = new float[] { (short) 1, (-1L) };
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray17, floatArray21);
        float[] floatArray25 = new float[] { (-1L), (byte) 10 };
        float[] floatArray29 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray25, floatArray29);
        float[] floatArray31 = null;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray25, floatArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(floatArray17, floatArray25);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray17);
        float[] floatArray37 = new float[] { (-1L), (byte) 10 };
        float[] floatArray41 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray37, floatArray41);
        float[] floatArray45 = new float[] { (short) 1, (-1L) };
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray41, floatArray45);
        float[] floatArray49 = new float[] { (-1L), (byte) 10 };
        float[] floatArray53 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray49, floatArray53);
        float[] floatArray55 = null;
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(floatArray49, floatArray55);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equals(floatArray41, floatArray49);
        float[] floatArray60 = new float[] { (-1L), (byte) 10 };
        float[] floatArray64 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray60, floatArray64);
        float[] floatArray68 = new float[] { (short) 1, (-1L) };
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray64, floatArray68);
        float[] floatArray72 = new float[] { (-1L), (byte) 10 };
        float[] floatArray76 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray72, floatArray76);
        float[] floatArray78 = null;
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(floatArray72, floatArray78);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(floatArray64, floatArray72);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray49, floatArray72);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray49);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray0, floatArray49);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray53);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale(929377.4372207435d, doubleArray53);
        double double56 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray55);
        java.lang.Class<?> wildcardClass57 = doubleArray55.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2068.0d + "'", double54 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.7658171307194125E7, 2788132.3116622306, 9293774.372207435]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2.014842271203998E7d + "'", double56 == 2.014842271203998E7d);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double double53 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray17, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2165.0d, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[21650.0, -2165.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[21650.0, -2165.0, 0.0]");
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        float[] floatArray2 = new float[] { (-1.0f), 100.0f };
        float[] floatArray5 = new float[] { (-1L), (byte) 10 };
        float[] floatArray9 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray5, floatArray9);
        float[] floatArray13 = new float[] { (short) 1, (-1L) };
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray9, floatArray13);
        float[] floatArray17 = new float[] { (-1L), (byte) 10 };
        float[] floatArray21 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray17, floatArray21);
        float[] floatArray23 = null;
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(floatArray17, floatArray23);
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equals(floatArray9, floatArray17);
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray17);
        float[] floatArray29 = new float[] { (-1L), (byte) 10 };
        float[] floatArray33 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray29, floatArray33);
        float[] floatArray37 = new float[] { (short) 1, (-1L) };
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray33, floatArray37);
        float[] floatArray41 = new float[] { (-1.0f), 100.0f };
        float[] floatArray44 = new float[] { (-1L), (byte) 10 };
        float[] floatArray48 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray44, floatArray48);
        float[] floatArray52 = new float[] { (short) 1, (-1L) };
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray48, floatArray52);
        float[] floatArray56 = new float[] { (-1L), (byte) 10 };
        float[] floatArray60 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray56, floatArray60);
        float[] floatArray62 = null;
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(floatArray56, floatArray62);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equals(floatArray48, floatArray56);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(floatArray41, floatArray56);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(floatArray37, floatArray56);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray37);
        java.lang.Class<?> wildcardClass68 = floatArray37.getClass();
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray44);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) 'a');
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray60, (int) (short) 100);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72);
        int[] intArray75 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1360.1470508735442d, (-1.3399302268582524E25d), (-1.2157512288535557E51d), (-1.3399302268582524E25d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.629021819880944E76d + "'", double4 == 1.629021819880944E76d);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-2.3520815078818308E81d), (double) 0.0f, (-1.2170120134952047E22d), 1366.9312345542478d, 1.4678500047059846E9d, (-1.3755656043295059E12d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.6637736464722298E25d) + "'", double6 == (-1.6637736464722298E25d));
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) ' ');
        int[] intArray23 = new int[] {};
        int[] intArray28 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int29 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray23, intArray28);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28, (int) (short) 1);
        int[] intArray32 = new int[] {};
        int[] intArray37 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray32, intArray37);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (short) 1);
        int int41 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray31, intArray40);
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (short) 100);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, 1);
        double double47 = org.apache.commons.math3.util.MathArrays.distance(intArray22, intArray43);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        float[] floatArray0 = null;
        float[] floatArray1 = null;
        float[] floatArray4 = new float[] { (-1L), (byte) 10 };
        float[] floatArray8 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray4, floatArray8);
        float[] floatArray12 = new float[] { (short) 1, (-1L) };
        boolean boolean13 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray8, floatArray12);
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equals(floatArray1, floatArray8);
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        double[] doubleArray1 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray40);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray32, (double) 100L);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray32);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray20, doubleArray65);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(doubleArray1, doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.scaleInPlace((-4.2035421686351696E21d), doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (byte) 10);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, (int) (short) 100);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (short) 1);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray59, intArray68);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray59, (int) (short) 100);
        double double72 = org.apache.commons.math3.util.MathArrays.distance(intArray38, intArray59);
        int int73 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray38);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.818854497478488E40d), (-1.2109722143828504E23d), (-1.1867527700951934E25d), 22457.292802116644d, 3.780478449848133E29d, (double) (short) 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 7.046471115983133E63d + "'", double6 == 7.046471115983133E63d);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1010.0d, (double) 235, (-4.2035421686351696E21d), (-2.554111747075503E77d), 3.0341344585090943E22d, 14.866068747318506d, (double) (short) -1, 1200.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0736316432238322E99d + "'", double8 == 1.0736316432238322E99d);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.7246705822717612E15d, 3.811678112579062E9d, 474492.3840484359d, 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 6.573889109854259E24d + "'", double4 == 6.573889109854259E24d);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(6.534471319905731E69d, (-1.9875501E7d), (-2.7165288519332715E20d), 4.149720547924001E12d, (-12.601470508735444d), 1427.5857242211412d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.2987589125325767E77d) + "'", double6 == (-1.2987589125325767E77d));
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int int30 = org.apache.commons.math3.util.MathArrays.distance1(intArray20, intArray29);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) '#');
        int[] intArray34 = new int[] {};
        int[] intArray39 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray34, intArray39);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39, (int) (short) 1);
        int[] intArray43 = new int[] {};
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray43, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 1);
        int int52 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray42, intArray51);
        int[] intArray53 = new int[] {};
        int[] intArray58 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray58);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (short) 1);
        int[] intArray62 = new int[] {};
        int[] intArray67 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int68 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray62, intArray67);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray67, (int) (short) 1);
        int int71 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray70);
        int int72 = org.apache.commons.math3.util.MathArrays.distance1(intArray51, intArray70);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        double double80 = org.apache.commons.math3.util.MathArrays.distance(intArray51, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(intArray29, intArray81);
        int[] intArray83 = new int[] {};
        int[] intArray88 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int89 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray83, intArray88);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray81, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1]");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        double double61 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray47, doubleArray59);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection69 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray68, orderDirection69, false);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray47, orderDirection69, true, false);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47, (int) (short) 10);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray28, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray76, 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray79);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2111.0d + "'", double61 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + orderDirection69 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection69.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray4);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray39);
        double double41 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray27, doubleArray39);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray39, orderDirection42, true);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray52, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray82);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray82);
        double[] doubleArray89 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray85, doubleArray89);
        double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray4, doubleArray39);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, 1849908.0027625682d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray95);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -5,549,724.008 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2111.0d + "'", double41 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1427.5857242211412d + "'", double91 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-5549724.008287705, 1233272.0018417123, 6166360.009208561]");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray40, doubleArray52);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray19, doubleArray52);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray52);
        double[] doubleArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray52, doubleArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2111.0d + "'", double54 == 2111.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.5183756289549949E7d, doubleArray9);
        double[] doubleArray17 = new double[] { 1, 1, 10 };
        double[] doubleArray21 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray21);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray32);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(doubleArray21, doubleArray32);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray32);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray32);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray55);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equals(doubleArray44, doubleArray55);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray74);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray32, doubleArray77);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) ' ', doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray9, doubleArray78);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 3 != 5");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.3665380660594955E8, 3.0367512579099897E7, 1.518375628954995E8]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-2.6208E7, 1.16128E7, 5.66336E7, -1.2832E7, -3.2E7]");
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray10 = new float[] { (short) 1, (-1L) };
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray10);
        float[] floatArray14 = new float[] { (-1L), (byte) 10 };
        float[] floatArray18 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray14, floatArray18);
        float[] floatArray22 = new float[] { (short) 1, (-1L) };
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray18, floatArray22);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(floatArray10, floatArray22);
        float[] floatArray27 = new float[] { (-1L), (byte) 10 };
        float[] floatArray31 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray27, floatArray31);
        float[] floatArray35 = new float[] { (short) 1, (-1L) };
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray31, floatArray35);
        float[] floatArray39 = new float[] { (-1L), (byte) 10 };
        float[] floatArray43 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray39, floatArray43);
        float[] floatArray45 = null;
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray45);
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equals(floatArray31, floatArray39);
        float[] floatArray50 = new float[] { (-1L), (byte) 10 };
        float[] floatArray54 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray50, floatArray54);
        float[] floatArray58 = new float[] { (short) 1, (-1L) };
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray54, floatArray58);
        float[] floatArray62 = new float[] { (-1L), (byte) 10 };
        float[] floatArray66 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray62, floatArray66);
        float[] floatArray68 = null;
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(floatArray62, floatArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(floatArray54, floatArray62);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray39, floatArray62);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray22, floatArray62);
        float[] floatArray75 = new float[] { (-1L), (byte) 10 };
        float[] floatArray79 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray75, floatArray79);
        float[] floatArray83 = new float[] { (short) 1, (-1L) };
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray79, floatArray83);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(floatArray22, floatArray83);
        float[] floatArray88 = new float[] { (-1L), (byte) 10 };
        float[] floatArray92 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray88, floatArray92);
        float[] floatArray94 = null;
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equals(floatArray88, floatArray94);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.equals(floatArray22, floatArray88);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray83), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(floatArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray88), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray92), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.7246705822717612E15d, doubleArray11);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(doubleArray20, doubleArray31);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray31);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray62);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equals(doubleArray51, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray51);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray43, (double) 100L);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray43);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray31, doubleArray76);
        double[] doubleArray79 = null;
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray79);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(doubleArray11, doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.7246705822717612E15, 1.7246705822717612E15, 1.7246705822717612E16]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection7, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection10, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection13, false);
        double[] doubleArray19 = new double[] { 1, 1, 10 };
        double[] doubleArray23 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray23);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray32);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray51);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray34, doubleArray53);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection55 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray34, orderDirection55, true);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection55, false);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection70 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray69, orderDirection70, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection73 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray69, orderDirection73, false);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray62, orderDirection73, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection78 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray62, orderDirection78, false);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection78, true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection7.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection55 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection55.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + orderDirection70 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection70.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + orderDirection73 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection73.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + orderDirection78 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection78.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray56 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray55, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        long[] longArray4 = new long[] { (short) -1, (short) 10, 0, (short) 10 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: -1 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[-1, 10, 0, 10]");
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) 100L);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray31);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray84);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(doubleArray73, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray73);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray65, (double) 100L);
        double double90 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray19, doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray0, doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 616666.6666666666d + "'", double90 == 616666.6666666666d);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(doubleArray29, doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray40);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray52, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray82);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray82);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray40, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray85);
        double double88 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 10.04987562112089d + "'", double88 == 10.04987562112089d);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 1.0d, 0.0d, 1.4102824113935717E10d, (-5.963592403540382E49d), (-4.2035421686351696E21d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.506821214483436E71d + "'", double6 == 2.506821214483436E71d);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray9, (double) 100L);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(3600.0d, doubleArray9);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        java.lang.Class<?> wildcardClass36 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-32400.0, 7200.0, 36000.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-32400.0, 7200.0, 36000.0]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.2459825039216539E7d, 1.405900735433483E96d, (-1.21097221436007E21d), 1.0020387082911603E30d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.7517277186007059E103d + "'", double4 == 1.7517277186007059E103d);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38, (int) (byte) 100);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection68 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray67, orderDirection68, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection71 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray67, orderDirection71, false);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray55, orderDirection71, true);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray81);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray81);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray81);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray51, doubleArray81);
        double double91 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray51);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray40, 2068.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + orderDirection68 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection68.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + orderDirection71 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection71.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.04987562112089d + "'", double91 == 10.04987562112089d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, 0);
        int[] intArray42 = new int[] {};
        int[] intArray47 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray42, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (short) 1);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (short) 1);
        int int60 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray59);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray50, (int) (short) 100);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62);
        double double64 = org.apache.commons.math3.util.MathArrays.distance(intArray41, intArray62);
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray62);
        int[] intArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double67 = org.apache.commons.math3.util.MathArrays.distance(intArray62, intArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray38, 9319.084308623767d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10354.538120693074, -1035.4538120693076, 0.0]");
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(2.6817058196121406E33d, (-1.8381134056869864E7d), 1.3116862779537551E37d, 1849908.0027625682d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.4215696632833603E43d + "'", double4 == 2.4215696632833603E43d);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1.405900735433483E96d, 18500.0d, (-2.665302576915262E10d), 439.780879782446d, 8.689869660197955E99d, (-820.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-7.099683957756804E102d) + "'", double6 == (-7.099683957756804E102d));
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray39);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(474492.3840484359d, doubleArray39);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray39);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39, 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (4,744,923.84 >= -474,492.384)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[4744923.840484359, -474492.3840484359, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[4744923.840484359, -474492.3840484359, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double double35 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray29);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray29, 1363.329967155091d);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray29);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray29, (-19.0d));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -900 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1360.1470508735442d + "'", double35 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[57.0, -12.666666666666666, -63.333333333333336]");
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (short) 10, (-2.615914305086962E12d), 6.525883142260517E35d, 1363.329967155091d, (-1.21097221436007E21d), 8.636077385394107E69d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0458049754775623E91d) + "'", double6 == (-1.0458049754775623E91d));
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-92.0d), (-1.2970519691988204E43d), (-1.8381134056869864E7d), (-5.718703196015772E45d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0511625127070385E53d + "'", double4 == 1.0511625127070385E53d);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, 100);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray32);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray32);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray49, orderDirection50, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray49, orderDirection53, false);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray42, orderDirection53, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection58 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray42, orderDirection58, false);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray39, orderDirection58, false, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray26, orderDirection58, false, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not increasing (900 > -200)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection53.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + orderDirection58 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection58.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray9, (double) 100L);
        double[][] doubleArray34 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray33, doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, doubleArray34);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray34);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.7517277186007059E103d, (-79.0d), 8.80879893310199E72d, (-7.6769830141116774E18d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.3838648976946252E105d) + "'", double4 == (-1.3838648976946252E105d));
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-820.0d), (double) (short) 100, 1.5460450237574002E8d, 1.0020387082911603E30d, (double) (-1), 1.405900735433483E96d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.405900735433483E96d) + "'", double6 == (-1.405900735433483E96d));
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray48);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        double double62 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray48, doubleArray60);
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection70 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray69, orderDirection70, false);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray48, orderDirection70, true, false);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray48, (int) (short) 10);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray29, doubleArray77);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray77, 10.0d);
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray87, orderDirection88, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection91 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray87, orderDirection91, false);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray77, orderDirection91, false, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection91, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2111.0d + "'", double62 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + orderDirection70 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection70.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[11.11111111111111, -1.1111111111111112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + orderDirection88 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection88.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + orderDirection91 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection91.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray17, doubleArray48);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray48, 144652.08102413287d);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray74);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray76, (int) (byte) 0);
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray76);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray76);
        double double81 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray80);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 20.09975124224178d + "'", double79 == 20.09975124224178d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.04987562112089d + "'", double81 == 10.04987562112089d);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray69);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray81);
        double double83 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray69, doubleArray81);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection84 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray81, orderDirection84, true);
        double double87 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray81);
        double double88 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2111.0d + "'", double83 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection84 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection84.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1360.1470508735442d + "'", double87 == 1360.1470508735442d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1000.0d + "'", double88 == 1000.0d);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(doubleArray32, doubleArray43);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray62);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray65);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, (int) 'a');
        double[] doubleArray69 = null;
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(doubleArray20, doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.scaleInPlace(2010.0d, doubleArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.691405330860345E15d), (double) 10.0f, (double) 1, 104609.92739486144d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-5.691405330849884E16d) + "'", double4 == (-5.691405330849884E16d));
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 1);
        int[] intArray10 = new int[] {};
        int[] intArray15 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray15);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (short) 1);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray18);
        int[] intArray20 = new int[] {};
        int[] intArray25 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray25);
        double double27 = org.apache.commons.math3.util.MathArrays.distance(intArray18, intArray25);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25);
        int[] intArray29 = new int[] {};
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 1);
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 1);
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray37, intArray46);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (short) 100);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49);
        int int51 = org.apache.commons.math3.util.MathArrays.distance1(intArray25, intArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 235 + "'", int51 == 235);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        double[] doubleArray0 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection8 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray7, orderDirection8, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection8, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + orderDirection8 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection8.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray38, 9319.084308623767d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray0, doubleArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10354.538120693074, -1035.4538120693076, 0.0]");
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21);
        int[] intArray23 = new int[] {};
        int[] intArray28 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int29 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray23, intArray28);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray47);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        double double56 = org.apache.commons.math3.util.MathArrays.distance(intArray47, intArray54);
        double double57 = org.apache.commons.math3.util.MathArrays.distance(intArray23, intArray47);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (short) 0);
        double double60 = org.apache.commons.math3.util.MathArrays.distance(intArray21, intArray47);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        long[] longArray2 = new long[] { (-1L), '4' };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: -1 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1, 52]");
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray69);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray81);
        double double83 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray69, doubleArray81);
        java.lang.String[] strArray90 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection91 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray90, orderDirection91, false);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray69, orderDirection91, true, false);
        boolean boolean98 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray16, orderDirection91, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2111.0d + "'", double83 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + orderDirection91 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection91.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray38, (-19.0d));
        java.lang.Class<?> wildcardClass55 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-21.11111111111111, 2.111111111111111, -0.0]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) ' ');
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray29);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray31, (int) (byte) 0);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray33, 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 32 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray41, 10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.708270408017212E47d), doubleArray41);
        double[] doubleArray45 = null;
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray41);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -34,336,235,201,145,966,000,000,000,000,000,000,000,000,000,000,000 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.554526071295663E50, -3.4336235201145966E49, -1.708270408017212E50]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-910.0, 201.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1.7246705822717612E15d, 3.780478449848133E29d, 7.021059879986961E21d, 22457.292802116644d, (-2.613107296291178E10d), 10000.499987500625d, 7.926180822553106E46d, 2.4215696632833603E43d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.9193799025592952E90d + "'", double8 == 1.9193799025592952E90d);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) 100L);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray31);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray84);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(doubleArray73, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray73);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray65, (double) 100L);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray65);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray90);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.scale(6.525883142260517E35d, doubleArray31);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray92, 1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-5.873294828034465E36, 1.3051766284521033E36, 6.525883142260517E36]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-5.873294828034465E36]");
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray61);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray64);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) 'a');
        double[] doubleArray68 = null;
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray68);
        java.lang.Class<?> wildcardClass70 = doubleArray19.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray39);
        double[] doubleArray46 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.scale(2068.0d, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray68);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray68);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray68, (double) (byte) 1);
        double double74 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray73);
        double[][] doubleArray75 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray73, doubleArray75);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray48, doubleArray75);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray48, (int) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[2.068E7, 0.0, 206800.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4.533823502911814d + "'", double74 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0]");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, 100);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20);
        int[] intArray22 = new int[] {};
        int[] intArray27 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray22, intArray27);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (short) 1);
        int[] intArray31 = new int[] {};
        int[] intArray36 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray31, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (short) 1);
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray39);
        int[] intArray41 = new int[] {};
        int[] intArray46 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray41, intArray46);
        double double48 = org.apache.commons.math3.util.MathArrays.distance(intArray39, intArray46);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46);
        int[] intArray50 = new int[] {};
        int[] intArray55 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray55);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray55, (int) (short) 1);
        int[] intArray59 = new int[] {};
        int[] intArray64 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray59, intArray64);
        int[] intArray67 = org.apache.commons.math3.util.MathArrays.copyOf(intArray64, (int) (short) 1);
        int int68 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray67);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (short) 100);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70);
        int int72 = org.apache.commons.math3.util.MathArrays.distance1(intArray46, intArray71);
        double double73 = org.apache.commons.math3.util.MathArrays.distance(intArray21, intArray71);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 235 + "'", int72 == 235);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.21097221436007E21d), (double) 1L, 1.2459825039216539E7d, 104609.92739486144d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.2109722130566485E21d) + "'", double4 == (-1.2109722130566485E21d));
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection72, true);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray40, orderDirection72, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray40);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -910 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2111.0d + "'", double71 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, 100);
        int[] intArray22 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int23 = org.apache.commons.math3.util.MathArrays.distance1(intArray21, intArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray71);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray71);
        double double75 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray30, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(13.601470508735444d, doubleArray30);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray10, doubleArray30);
        double double78 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray30);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (-2.667039156913762E7d));
        java.lang.Class<?> wildcardClass81 = doubleArray30.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-12241.3234578619, 2720.294101747089, 13601.470508735443]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-12241.3234578619, 2720.294101747089, 136014.70508735444]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 18500.0d + "'", double78 == 18500.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[8.001117470741287E7, -1.778026104609175E7, -8.890130523045874E7]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        long[] longArray0 = new long[] {};
        long[] longArray1 = new long[] {};
        long[] longArray2 = new long[] {};
        long[][] longArray3 = new long[][] { longArray0, longArray1, longArray2 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        java.lang.Class<?> wildcardClass6 = longArray3.getClass();
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray42);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray42);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray10, doubleArray72);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.scale((-2.1064966936837643E10d), doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.895847024315388E13, -4.2129933873675283E12, -2.1064966936837645E13]");
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, (double) 1, (-1.3755656043295059E12d), 4.533823502911814d, 1.8931094217295912E99d, 1.1155051E7d, 212170.0d, (-7.887202131357053E44d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.1117732147974097E106d + "'", double8 == 2.1117732147974097E106d);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray42, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray72);
        double[] doubleArray79 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray75, doubleArray79);
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray79);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (byte) 10, doubleArray79);
        double double83 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray79);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1000.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1427.5857242211412d + "'", double81 == 1427.5857242211412d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1000.0499987500625d + "'", double83 == 1000.0499987500625d);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray38, doubleArray57);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray77);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(doubleArray66, doubleArray77);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray57, doubleArray77);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray19, doubleArray77);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(6.573889109854259E24d, doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-5.916500198868833E27, 1.3147778219708518E27, 6.573889109854259E27]");
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection7, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection10, false);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        double double43 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray29, doubleArray41);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray41, orderDirection44, true);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection44, true);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray55, orderDirection56, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray55, orderDirection59, false);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection59, false);
        java.lang.Class<?> wildcardClass64 = strArray6.getClass();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection7.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2111.0d + "'", double43 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + orderDirection56 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection56.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + orderDirection59 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection59.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(doubleArray29, doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray40);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray71);
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equals(doubleArray60, doubleArray71);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray60);
        double double75 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray40, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray19, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale(1.8931094217295912E99d, doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2068.0d + "'", double75 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-919.0, 203.0, 1010.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.7397675585694944E102, 3.84301212611107E101, 1.912040515946887E102]");
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray44);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int[] intArray58 = new int[] {};
        int[] intArray63 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int64 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray63);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (short) 1);
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray57, intArray66);
        int[] intArray68 = new int[] {};
        int[] intArray73 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int74 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray68, intArray73);
        int[] intArray76 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (short) 1);
        int[] intArray77 = new int[] {};
        int[] intArray82 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int83 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray77, intArray82);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray82, (int) (short) 1);
        int int86 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray76, intArray85);
        int int87 = org.apache.commons.math3.util.MathArrays.distance1(intArray66, intArray85);
        int[] intArray88 = new int[] {};
        int[] intArray93 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int94 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray88, intArray93);
        double double95 = org.apache.commons.math3.util.MathArrays.distance(intArray66, intArray93);
        int[] intArray96 = org.apache.commons.math3.util.MathArrays.copyOf(intArray93);
        double double97 = org.apache.commons.math3.util.MathArrays.distance(intArray44, intArray93);
        int[] intArray98 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 100, 100, 35]");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 100);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int[] intArray70 = new int[] {};
        int[] intArray75 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int76 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray70, intArray75);
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray75, (int) (short) 1);
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray69, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 100);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(intArray48, intArray69);
        double double83 = org.apache.commons.math3.util.MathArrays.distance(intArray36, intArray69);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (byte) 1);
        int[] intArray87 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (short) 100);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1]");
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-92.0d), 0.0d, 1.3341985624134572E32d, 100.00499987500625d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.3342652706739132E34d + "'", double4 == 1.3342652706739132E34d);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray57);
        int[] intArray60 = new int[] {};
        int[] intArray65 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (short) 1);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray65);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray65);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray45 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray45);
        double double48 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray45);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray49);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (100 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10000.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.00499987500625d + "'", double48 == 100.00499987500625d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, 1.0]");
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double double50 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray27);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray67);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, (int) ' ');
        double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray69);
        double[] doubleArray75 = new double[] { (-1.21097221436007E21d), 1.0f };
        double[] doubleArray78 = new double[] { (-1.21097221436007E21d), 1.0f };
        double[] doubleArray81 = new double[] { (-1.21097221436007E21d), 1.0f };
        double[] doubleArray84 = new double[] { (-1.21097221436007E21d), 1.0f };
        double[] doubleArray87 = new double[] { (-1.21097221436007E21d), 1.0f };
        double[] doubleArray90 = new double[] { (-1.21097221436007E21d), 1.0f };
        double[][] doubleArray91 = new double[][] { doubleArray75, doubleArray78, doubleArray81, doubleArray84, doubleArray87, doubleArray90 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray69, doubleArray91);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 2 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 21.0d + "'", double50 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.21097221436007E21, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.21097221436007E21, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.21097221436007E21, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.21097221436007E21, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.21097221436007E21, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.21097221436007E21, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, 0);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48);
        int int62 = org.apache.commons.math3.util.MathArrays.distance1(intArray39, intArray61);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray61);
        int[] intArray64 = new int[] {};
        int[] intArray69 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 1);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78, (int) (short) 1);
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray81);
        int[] intArray83 = new int[] {};
        int[] intArray88 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int89 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray83, intArray88);
        double double90 = org.apache.commons.math3.util.MathArrays.distance(intArray81, intArray88);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88);
        int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88);
        int[] intArray93 = org.apache.commons.math3.util.MathArrays.copyOf(intArray92);
        int[] intArray95 = org.apache.commons.math3.util.MathArrays.copyOf(intArray92, (int) ' ');
        double double96 = org.apache.commons.math3.util.MathArrays.distance(intArray63, intArray95);
        int[] intArray97 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1]");
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray23, 10.0d);
        java.lang.Class<?> wildcardClass26 = doubleArray25.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-30.0, 6.666666666666666, 33.333333333333336]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray15 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int16 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray15);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 98 + "'", int16 == 98);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[97, 1, 52, 1, 32, -1]");
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 4.533823502911814d, 100.0d, 1.1579293173848756E32d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.1579293173848756E34d + "'", double4 == 1.1579293173848756E34d);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (short) 10, 18500.0d, 2165.0d, 1.4574354727153006E8d, 10.099504938362077d, 13.601470508735444d, 929377.4372207435d, 2.8772624126635964E38d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.6740627672928667E44d + "'", double8 == 2.6740627672928667E44d);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(7.834007748456647E64d, 9209.0d, (-1.2459825039216539E7d), (-5.2221633920904585E36d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 7.214337735553726E68d + "'", double4 == 7.214337735553726E68d);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray45);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray28, doubleArray47);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray67);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(doubleArray56, doubleArray67);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray47, doubleArray67);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray67, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(88.21557489650559d, doubleArray67);
        double double74 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray3, doubleArray67);
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection82 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray81, orderDirection82, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray81, orderDirection85, false);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray67, orderDirection85, true);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray67, (-12.601470508735444d));
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-79394.01740685503, 17643.114979301117, 88215.57489650558]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 820404.8465375019d + "'", double74 == 820404.8465375019d);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + orderDirection82 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection82.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[37.80441152620634, -8.400980339156964, -42.004901695784824]");
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection27, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection30, false);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray14, orderDirection30, true);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray14);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray40);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray40);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray10, doubleArray40);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray58);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray76, orderDirection77, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection80 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray76, orderDirection80, false);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray64, orderDirection80, true);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray85);
        java.lang.Class<?> wildcardClass87 = doubleArray86.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + orderDirection77 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection77.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + orderDirection80 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection80.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[110.0, -11.0, 100.0, -10.0, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.3755656043295059E12d), 9.226011509507019E11d, (double) (short) -1, 1.0570558719722057E74d, 1.4102824113935717E10d, (-5.691405330849884E16d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0570558719722057E74d) + "'", double6 == (-1.0570558719722057E74d));
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray40);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray32, (double) 100L);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray32);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray74, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray74);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray20, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.scale((double) 1L, doubleArray20);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.scale(2165.0d, doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-919.0, 203.0, 1010.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-1948500.0, 433000.0, 2165000.0]");
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray21);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(doubleArray10, doubleArray21);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray21);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray21, 100);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray28);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray36, orderDirection37, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection40 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray36, orderDirection40, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray36, orderDirection43, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray28, orderDirection43, false, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 2 and 3 are not increasing (1,000 > -0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + orderDirection40 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection40.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double double53 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray17, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, 100.0d);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale(9319.084308623767d, doubleArray39);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray61);
        double double68 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray56, doubleArray61);
        double[][] doubleArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray61, doubleArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[111.11111111111111, -11.11111111111111, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[93190.84308623767, -9319.084308623767, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray4);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray39);
        double double41 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray27, doubleArray39);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray39, orderDirection42, true);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray52, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray82);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray82);
        double[] doubleArray89 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray85, doubleArray89);
        double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray4, doubleArray39);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39, 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray94);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 2 and 3 are not strictly increasing (1,000 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2111.0d + "'", double41 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1427.5857242211412d + "'", double91 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(2.6817058196121406E33d, 145.68802284333466d, 0.0d, 0.0d, 1000.0499987500625d, 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.9069241870675704E35d + "'", double6 == 3.9069241870675704E35d);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray4);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray39);
        double double41 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray27, doubleArray39);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray39, orderDirection42, true);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray52, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray82);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray82);
        double[] doubleArray89 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray85, doubleArray89);
        double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray4, doubleArray39);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39, 10);
        double[] doubleArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double96 = org.apache.commons.math3.util.MathArrays.distance(doubleArray94, doubleArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2111.0d + "'", double41 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1427.5857242211412d + "'", double91 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray19);
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray21);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray72);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(doubleArray61, doubleArray72);
        double double75 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray39, doubleArray61);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray61, (-19.0d));
        double double78 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-5.2221633920904585E36d), doubleArray21);
        java.lang.Class<?> wildcardClass80 = doubleArray21.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[5.222163392090458E37, -5.2221633920904585E36, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 14.866068747318506d + "'", double22 == 14.866068747318506d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-21.11111111111111, 2.111111111111111, -0.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 20.09975124224178d + "'", double78 == 20.09975124224178d);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray9, (double) 100L);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(3600.0d, doubleArray9);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray51);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray70);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray53, doubleArray72);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray9, doubleArray53);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double[] doubleArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double77 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray9, doubleArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-32400.0, 7200.0, 36000.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-32400.0, 7200.0, 36000.0]");
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (double) 100L);
        double double66 = org.apache.commons.math3.util.MathArrays.distance(doubleArray10, doubleArray65);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.scale(1.2423244926866538E15d, doubleArray65);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.scale(1000.0499987500625d, doubleArray67);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray67, (-1.1867527700951934E25d));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray70);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -7,911,685,133,967,955,000,000,000 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 439.780879782446d + "'", double66 == 439.780879782446d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-3.726973478059961E17, 8.2821632845776928E16, 4.1410816422888454E17]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-3.7271598220753804E20, 8.282577382389735E19, 4.1412886911948666E20]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[3.560258310285579E25, -7.911685133967955E24, -3.955842566983977E25]");
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray70);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray70);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray70);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray10, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.scale(1353.329967155091d, doubleArray74);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(7.55404E7d, doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray74);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (755,404,000 >= -75,540,400)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[7.55404E8, -7.55404E7, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-0.9, -2.0, Infinity]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[13533.29967155091, -1353.329967155091, 0.0]");
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray39);
        double[] doubleArray46 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.scale(2068.0d, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray68);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray68);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray68, (double) (byte) 1);
        double double74 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray73);
        double[][] doubleArray75 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray73, doubleArray75);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray48, doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[2.068E7, 0.0, 206800.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4.533823502911814d + "'", double74 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray75);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(10000.499987500625d, 144652.08102413287d, 3.229749752589777E68d, 7.55404E7d, (-101.0d), 2.2267871488170685E30d, (-1.2109722143828504E23d), 1200.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.4397658821053278E76d + "'", double8 == 2.4397658821053278E76d);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-2.6653694205680016E13d), 1.5185608816622775E7d, 1.2327353862497586E29d, 12.0d, (-4.2035421686351696E21d), 4.533823502911814d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4792824440368394E30d + "'", double6 == 1.4792824440368394E30d);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray39);
        double[] doubleArray46 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.scale(2068.0d, doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray49);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (20,680,000 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10000.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[2.068E7, 0.0, 206800.0]");
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray5);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale(111.0d, doubleArray5);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        double double43 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray29, doubleArray41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray50, orderDirection51, false);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray29, orderDirection51, true, false);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray29, (int) (short) 10);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray29);
        double double60 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray5, doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2111.0d + "'", double43 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.04987562112089d + "'", double60 == 10.04987562112089d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 0.0f, 18500.0d, 1.2423244926866538E15d, (-2.7191506728564754E13d), 1.1155051E7d, 8.80879893310199E72d, 2.5284455777199858E19d, (double) 100L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 9.826260134749828E79d + "'", double8 == 9.826260134749828E79d);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, 144652.08102413287d);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[11.11111111111111, -1.1111111111111112, 0.0]");
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray10, (double) 100L);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(3600.0d, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) '4', doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1684800.0, 374400.0, 1872000.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-300.0, 66.66666666666667, 333.3333333333333]");
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray51, doubleArray70);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray51, orderDirection72, true);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray27, orderDirection72, false, false);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray27);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.2459825039216539E7d, doubleArray78);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection81 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray78, orderDirection81, false);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18, orderDirection81, true);
        double[] doubleArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double87 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.2584423289608705E9, -1.2584423289608705E9, -1.2584423289608704E10]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertTrue("'" + orderDirection81 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection81.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 1);
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6);
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) 'a');
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 100, 100, 35]");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, (double) 100L);
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray63);
        double double65 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray8);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray75, doubleArray86);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray86);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray86, 100);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray92);
        double double94 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray93);
        double double95 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray93);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray93, 10.04987562112089d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 439.780879782446d + "'", double64 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 13.601470508735444d + "'", double65 == 13.601470508735444d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1360.1470508735442d + "'", double94 == 1360.1470508735442d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1346.545580364809d + "'", double95 == 1346.545580364809d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-30.14962686336267, 6.69991708074726, 33.4995854037363, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        double double42 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray29);
        int[] intArray43 = new int[] {};
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray43, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 1);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int int61 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray60);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray51, (int) (short) 100);
        int[] intArray64 = new int[] {};
        int[] intArray69 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray64, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 1);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78, (int) (short) 1);
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray81);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) 100);
        double double85 = org.apache.commons.math3.util.MathArrays.distance(intArray51, intArray72);
        int int86 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray51);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (byte) 100);
        int[] intArray90 = org.apache.commons.math3.util.MathArrays.copyOf(intArray88, (int) (byte) 100);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray90);
        int[] intArray93 = org.apache.commons.math3.util.MathArrays.copyOf(intArray91, 0);
        int[] intArray95 = org.apache.commons.math3.util.MathArrays.copyOf(intArray91, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1]");
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray55, (double) 'a');
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray74);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray76, (int) ' ');
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(doubleArray55, doubleArray78);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray83);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray89);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray89);
        double double92 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-291.0, 64.66666666666667, 323.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1339.7287038800057d + "'", double92 == 1339.7287038800057d);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(7.55404E7d, (-4.149720547934001E12d), 929377.4372207435d, (-2.615914305086962E12d), 0.0d, 1.5185608816622775E7d, (double) 'a', 11.1665284679121d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-3.159027218120044E20d) + "'", double8 == (-3.159027218120044E20d));
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray61);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.7246705822717612E15d, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.scale((-1.2170120134952047E22d), doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray68);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.7246705822717612E15, 1.7246705822717612E15, 1.7246705822717612E16]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-2.098944817946503E37, -2.098944817946503E37, -2.098944817946503E38]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.7246705822708612E15, 1.7246705822719612E15, 1.7246705822718612E16]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.7246705822717612E15, 1.7246705822717612E15, 1.7246705822717612E16]");
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        double double32 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray30);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray30, orderDirection33, true);
        double double36 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray30);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, 1363.329967155091d);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray30);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.scale(Double.NaN, doubleArray39);
        double[] doubleArray41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray39, doubleArray41);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2111.0d + "'", double32 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1360.1470508735442d + "'", double36 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN]");
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray21);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(doubleArray10, doubleArray21);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray21);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray21, 100);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray28);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray50);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray81);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray70);
        double double85 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray50, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.scale(929377.4372207435d, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.scale((double) (short) 0, doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double double88 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray29, doubleArray86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 100 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2068.0d + "'", double85 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.7658171307194125E7, 2788132.3116622306, 9293774.372207435]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-0.0, 0.0, 0.0]");
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray37);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equals(doubleArray26, doubleArray37);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray57);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray49, (double) 100L);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray49);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray37, doubleArray82);
        double double85 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray7, doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray84);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -9,000 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9000.0, -200.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 9209.0d + "'", double85 == 9209.0d);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray50);
        double double53 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray41, doubleArray50);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray81);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray70);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray62, (double) 100L);
        double[][] doubleArray87 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray86, doubleArray87);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray41, doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray36 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int37 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray36);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 100);
        int[] intArray41 = new int[] {};
        int[] intArray46 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray41, intArray46);
        int[] intArray48 = new int[] {};
        int[] intArray53 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int54 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray53);
        int int55 = org.apache.commons.math3.util.MathArrays.distance1(intArray41, intArray53);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 98 + "'", int37 == 98);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 98 + "'", int38 == 98);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(990.0d, 6.534471319905731E69d, 10.04987562112089d, 1353.329967155091d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 6.469126606706673E72d + "'", double4 == 6.469126606706673E72d);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.405900735433483E96d, (double) (short) 0, 0.0d, 1346.545580364809d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int[] intArray37 = new int[] {};
        int[] intArray42 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int43 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray37, intArray42);
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray42, (int) (short) 1);
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray36, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (short) 100);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int[] intArray58 = new int[] {};
        int[] intArray63 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int64 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray63);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (short) 1);
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray57, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 100);
        double double70 = org.apache.commons.math3.util.MathArrays.distance(intArray36, intArray57);
        int int71 = org.apache.commons.math3.util.MathArrays.distance1(intArray27, intArray36);
        double double72 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray36);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray19);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double double65 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray50);
        double double66 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray11, doubleArray50);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.5183866289549949E7d), doubleArray11);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale((-1.8381134056869864E7d), doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2.6740627672928667E44d, doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[3.654235035759493E52, -8.120522301687762E51, -4.060261150843881E52]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.04987562112089d + "'", double65 == 10.04987562112089d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-92.0d) + "'", double66 == (-92.0d));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-2.5118701359282435E15, 5.581933635396096E14, 2.7909668176980485E15]");
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 100);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int[] intArray70 = new int[] {};
        int[] intArray75 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int76 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray70, intArray75);
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray75, (int) (short) 1);
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray69, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (short) 100);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(intArray48, intArray69);
        double double83 = org.apache.commons.math3.util.MathArrays.distance(intArray36, intArray69);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (byte) 1);
        int[] intArray87 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (short) 100);
        int[] intArray89 = org.apache.commons.math3.util.MathArrays.copyOf(intArray87, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1]");
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57, 0);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray77 = new double[] { 1, 1, 10 };
        double[] doubleArray81 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray81);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray82);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equals(doubleArray71, doubleArray82);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray82);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray82);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray82, 100);
        double double89 = org.apache.commons.math3.util.MathArrays.distance(doubleArray57, doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2720.2941017470885d + "'", double89 == 2720.2941017470885d);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray67);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(doubleArray56, doubleArray67);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray56);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray48, (double) 100L);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray38, doubleArray48);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.scale((-1.8381134056869864E7d), doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray74, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-0.0, -0.0, -0.0]");
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray52);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray40, doubleArray52);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray19, doubleArray52);
        double double56 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (900 >= -200)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2111.0d + "'", double54 == 2111.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1360.1470508735442d + "'", double56 == 1360.1470508735442d);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray27, orderDirection28, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray27, orderDirection31, false);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray15, orderDirection31, true);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray15);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray41);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray41);
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray11, doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray18, doubleArray49);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray49, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((-2165.0d), doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale(1.347347400304754E92d, doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray77);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (1,926,850 >= -430,835)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-890.0, 199.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1926850.0, -430835.0, -2165000.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[2.596136338277215E98, -5.804844172102986E97, -2.917007121659792E98]");
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (short) 10, 9.226011509507019E11d, 4.0529758683460013E17d, 1000.0499987500625d, 7.214337735553726E68d, 1363.329967155091d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 9.835522828058196E71d + "'", double6 == 9.835522828058196E71d);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1.5185608816622775E7d, 1353.403487508437d, (-1.21097221436007E21d), 75611.0d, (-3.159027218120044E20d), 144652.08102413287d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.372588062112734E26d) + "'", double6 == (-1.372588062112734E26d));
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray45);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray28, doubleArray47);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection49, true);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray4, orderDirection49, false, false);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale((-101.0d), doubleArray4);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray56);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -101 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection49 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection49.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-101.0, -101.0, -1010.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-101.0, -101.0, -1010.0]");
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray64 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[] doubleArray68 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[][] doubleArray69 = new double[][] { doubleArray64, doubleArray68 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray37, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        double[] doubleArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection27, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray26, orderDirection30, false);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray14, orderDirection30, true);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray14);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray56);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equals(doubleArray45, doubleArray56);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray56);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray87);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(doubleArray76, doubleArray87);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray76);
        double double91 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray56, doubleArray90);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.scale(929377.4372207435d, doubleArray90);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale((double) (short) 0, doubleArray92);
        double double94 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray10, doubleArray92);
        double double95 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2068.0d + "'", double91 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-1.7658171307194125E7, 2788132.3116622306, 9293774.372207435]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.7658161307194125E7d + "'", double94 == 1.7658161307194125E7d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2.014842271203998E7d + "'", double95 == 2.014842271203998E7d);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(2068.0d, 474492.3840484359d, 1363.329967155091d, (-2.559673952118356E12d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-3.48967922381901E15d) + "'", double4 == (-3.48967922381901E15d));
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.3399302268582524E25d), 100.00499987500625d, (-218665.0d), 1.4792824440368394E30d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-3.2346729696531273E35d) + "'", double4 == (-3.2346729696531273E35d));
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, (-5.2221633920904585E36d), 88.21557489650559d, (-2.613107296291178E10d), 18500.0d, 3.295116804952141E29d, (-4.149720547934001E12d), (double) 10.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 6.095966089161461E33d + "'", double8 == 6.095966089161461E33d);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(2.8772624126635964E38d, 3.1411498696267944E34d, 2.158964713104729E10d, 1.1461596173157833E27d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 9.037912452420332E72d + "'", double4 == 9.037912452420332E72d);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(990.0d, (-273300.0d), 1427.5857242211412d, 1.7658161307194125E7d, (-2.666466636913762E8d), 1339.7287038800057d, (-1058.0d), (-5.2221633920904585E36d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.525048868831705E39d + "'", double8 == 5.525048868831705E39d);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double double50 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray27);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray67);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, (int) ' ');
        double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray69);
        double double73 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray69);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray82);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray84, (int) (byte) 0);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray86, 0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray86);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray69, doubleArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 21.0d + "'", double50 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray12, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.963592403540382E49d), (-1.2114525348282044E23d), 0.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 7.22460913395122E72d + "'", double4 == 7.22460913395122E72d);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int[] intArray18 = new int[] {};
        int[] intArray23 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray23);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (short) 1);
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (short) 100);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, (int) (short) 100);
        double double51 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray38);
        int int52 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray17);
        int[] intArray53 = new int[] {};
        int[] intArray58 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray58);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (short) 1);
        int[] intArray68 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int69 = org.apache.commons.math3.util.MathArrays.distance1(intArray61, intArray68);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray68);
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 98 + "'", int69 == 98);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 98 + "'", int70 == 98);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.7246705822717612E15d, doubleArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "hi!" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray15, orderDirection16, false);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray37);
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection79 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray78, orderDirection79, false);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray57, orderDirection79, true, false);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray39, orderDirection79, true);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray15, orderDirection79, false);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray11, orderDirection79, false, false);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.7246705822717612E15, 1.7246705822717612E15, 1.7246705822717612E16]");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 14.866068747318506d + "'", double40 == 14.866068747318506d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2111.0d + "'", double71 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + orderDirection79 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection79.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray5);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray28);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        double double42 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray28, doubleArray40);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray40, orderDirection43, true);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray83);
        double[] doubleArray90 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray86, doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray90);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray5, doubleArray40);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray40, 10);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.scale((-1.2114525348282043E21d), doubleArray95);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray96);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (1,090,307,281,345,383,800,000,000 >= -242,290,506,965,640,870,000,000)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2111.0d + "'", double42 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1427.5857242211412d + "'", double92 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[1.0903072813453838E24, -2.4229050696564087E23, -1.2114525348282044E24, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray60);
        double double64 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray41);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.scale(1.4678500047059846E9d, doubleArray19);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray74, doubleArray85);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray85);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray85, (int) (short) 0);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray65, doubleArray85);
        double[] doubleArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double94 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray92, doubleArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.3210650042353862E12, 2.935700009411969E11, 1.4678500047059846E12]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-1.1889585038118475E15, 5.284260016941545E14, 2.583416008282533E15, -5.871400018823938E14, -1.4678500047059845E15]");
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray77);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(doubleArray66, doubleArray77);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray66);
        double double81 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray49, doubleArray58);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray28, doubleArray58);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 21.0d + "'", double81 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-909.0, 202.0, 1010.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-909.0, 202.0, 1010.0]");
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 0);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray67);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray50, doubleArray69);
        double[] doubleArray74 = new double[] { 1, 1, 10 };
        double[] doubleArray78 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray78);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray89);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(doubleArray78, doubleArray89);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray69, doubleArray89);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray31, doubleArray89);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equals(doubleArray10, doubleArray89);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (1 >= -0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-10.0, 1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int int30 = org.apache.commons.math3.util.MathArrays.distance1(intArray20, intArray29);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) '#');
        int[] intArray34 = new int[] {};
        int[] intArray39 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray34, intArray39);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39, (int) (short) 1);
        int[] intArray43 = new int[] {};
        int[] intArray48 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray43, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (short) 1);
        int int52 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray42, intArray51);
        int[] intArray53 = new int[] {};
        int[] intArray58 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray58);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (short) 1);
        int[] intArray62 = new int[] {};
        int[] intArray67 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int68 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray62, intArray67);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray67, (int) (short) 1);
        int int71 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray70);
        int int72 = org.apache.commons.math3.util.MathArrays.distance1(intArray51, intArray70);
        int[] intArray73 = new int[] {};
        int[] intArray78 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int79 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray73, intArray78);
        double double80 = org.apache.commons.math3.util.MathArrays.distance(intArray51, intArray78);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray78);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(intArray29, intArray81);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray81);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 100, 100, 35]");
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-7.217129340870217E25d), 1.4102824113935717E10d, 3.9069241870675704E35d, 1.629021819880944E76d, 2.8772624126635964E38d, 1.3971118681998659E37d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 6.364464749353691E111d + "'", double6 == 6.364464749353691E111d);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-218665.0d), 0.0d, (-2.1064966936837643E10d), 0.0d, 0.0d, 2.667039156913762E7d, 7.579073332736437E12d, (-7.887202131357053E44d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-5.9777683343670226E57d) + "'", double8 == (-5.9777683343670226E57d));
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray41, 10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.708270408017212E47d), doubleArray41);
        double[] doubleArray45 = null;
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equals(doubleArray41, doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.554526071295663E50, -3.4336235201145966E49, -1.708270408017212E50]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-910.0, 201.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(2.1117732147974097E106d, 5.525048868831705E39d, (double) (-1L), (-2.1056418422573112E15d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.166765021164552E146d + "'", double4 == 1.166765021164552E146d);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray60);
        double double64 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray41);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.scale(1.4678500047059846E9d, doubleArray19);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray74, doubleArray85);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray85);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray85, (int) (short) 0);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray65, doubleArray85);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection93 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray92, orderDirection93, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.3210650042353862E12, 2.935700009411969E11, 1.4678500047059846E12]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-1.1889585038118475E15, 5.284260016941545E14, 2.583416008282533E15, -5.871400018823938E14, -1.4678500047059845E15]");
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray21);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(doubleArray10, doubleArray21);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray21);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray21, 100);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray28);
        double[] doubleArray30 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double31 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray28, doubleArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(3.295116804952141E29d, 10000.499987500625d, (-5.055478783810143E21d), (-2.1064966936837643E10d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.401775050104543E33d + "'", double4 == 3.401775050104543E33d);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray24);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (byte) 0);
        int[] intArray29 = new int[] {};
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 1);
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 1);
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray37, intArray46);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (short) 100);
        int[] intArray50 = new int[] {};
        int[] intArray55 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray55);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray55, (int) (short) 1);
        int[] intArray65 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int66 = org.apache.commons.math3.util.MathArrays.distance1(intArray58, intArray65);
        int int67 = org.apache.commons.math3.util.MathArrays.distance1(intArray37, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37);
        int[] intArray69 = new int[] {};
        int[] intArray74 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int75 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray69, intArray74);
        int[] intArray77 = org.apache.commons.math3.util.MathArrays.copyOf(intArray74, (int) (short) 1);
        int[] intArray78 = new int[] {};
        int[] intArray83 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int84 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray78, intArray83);
        int[] intArray86 = org.apache.commons.math3.util.MathArrays.copyOf(intArray83, (int) (short) 1);
        int int87 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray77, intArray86);
        int[] intArray89 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77, 0);
        int[] intArray90 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77);
        int int92 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray68, intArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = org.apache.commons.math3.util.MathArrays.distance(intArray24, intArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 98 + "'", int66 == 98);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 98 + "'", int67 == 98);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection72, true);
        double double75 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray37, doubleArray69);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray89 = new double[] { 1, 1, 10 };
        double[] doubleArray93 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray89, doubleArray93);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray94);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.equals(doubleArray83, doubleArray94);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray69, doubleArray94);
        double[] doubleArray98 = null;
        boolean boolean99 = org.apache.commons.math3.util.MathArrays.equals(doubleArray94, doubleArray98);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2111.0d + "'", double71 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-9200.0d) + "'", double75 == (-9200.0d));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[810000.0, 40000.0, 1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        double double34 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray28, 1363.329967155091d);
        double double37 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray36);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray54);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray84);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(doubleArray73, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray73);
        double double88 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray56, doubleArray65);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray36, doubleArray56);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1360.1470508735442d + "'", double34 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 6181.097447311743d + "'", double37 == 6181.097447311743d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 21.0d + "'", double88 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) '4');
        int[] intArray17 = new int[] {};
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray22);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 1);
        int[] intArray26 = new int[] {};
        int[] intArray31 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int32 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray26, intArray31);
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (short) 1);
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray25, intArray34);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, 100);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = org.apache.commons.math3.util.MathArrays.distance(intArray16, intArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1]");
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray19);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray61);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray64);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (900 >= -200)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, 144652.08102413287d);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (double) 10L);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray66, 235);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray68);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (11.111 >= -1.111)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[11.11111111111111, -1.1111111111111112, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray47);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(doubleArray36, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray36);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray28, (double) 100L);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray28);
        double double55 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray28);
        double double57 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.0570558719722057E74d), doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[9.51350284774985E74, -2.1141117439444114E74, -1.0570558719722058E75]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 13.601470508735444d + "'", double55 == 13.601470508735444d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 13.601470508735444d + "'", double57 == 13.601470508735444d);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 1.5460450237574003E9d, 2.7081350412376205E15d, 2.158964713104729E10d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 5.846767992354443E25d + "'", double4 == 5.846767992354443E25d);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(doubleArray32, doubleArray43);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray62);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray65);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, (int) 'a');
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray87);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(doubleArray76, doubleArray87);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray20, doubleArray87);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray20, 2.303752319195026E28d);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.5183866289549949E7d), doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-810000.0, -40000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0493960153669362E36, -2.331991145259858E35, -1.165995572629929E36]");
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-2.1064966936837643E10d), 0.0d, (-2.0153985E7d), 1.7658161307194125E7d, 820404.8465375019d, (-820.0d), (double) 10.0f, (double) 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-3.5588299084474494E14d) + "'", double8 == (-3.5588299084474494E14d));
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, (double) 100L);
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray63);
        double double65 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray8);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray75, doubleArray86);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray86);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray86, 100);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray92);
        double double94 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray93);
        double double95 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray93);
        double[] doubleArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray8, doubleArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 439.780879782446d + "'", double64 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 13.601470508735444d + "'", double65 == 13.601470508735444d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1360.1470508735442d + "'", double94 == 1360.1470508735442d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1346.545580364809d + "'", double95 == 1346.545580364809d);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-1101.0d), 3.401775050104543E33d, 0.0d, (-2.554111747075503E77d), (-4.2035421686351696E21d), (-2.5043938381010786E8d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-3.745353277432591E36d) + "'", double6 == (-3.745353277432591E36d));
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.552472386491933E14d), (-5.963592403540382E49d), (-5.691405330860345E15d), 3.401775050104543E33d, (-2.3520815078818308E81d), (double) 98);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2.3050398777241942E83d) + "'", double6 == (-2.3050398777241942E83d));
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray42, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray81);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(doubleArray70, doubleArray81);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray61, doubleArray81);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray81, 0);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray81);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, 116405.9998500075d);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray89, (-1.372588062112734E26d));
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-349217.9995500225, 77603.999900005, 388019.999500025]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[4.1177641863382006E26, -9.150587080751558E25, -4.575293540375779E26]");
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray45 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray41, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray45);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10000.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10000.0, 0.0, 100.0]");
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        double[] doubleArray7 = new double[] { 1, 1, 10 };
        double[] doubleArray11 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray11);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray7);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray7);
        double[] doubleArray18 = new double[] { 1, 1, 10 };
        double[] doubleArray22 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray22);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray33, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray72);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(doubleArray61, doubleArray72);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray52, doubleArray72);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray72, 0);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray81);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray87);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(doubleArray72, doubleArray87);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray87);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.scale(1366.9312345542478d, doubleArray90);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray90);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-218665.0d), doubleArray90);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-2.3726249250325616E14d), doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[4.669290263090206E20, 4.669290263090206E20, 4.6692902630902056E21]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[12302.38111098823, 12302.38111098823, 123023.8111098823]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[9.0, 9.0, 90.0]");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        double double42 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray29);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) ' ');
        int[] intArray45 = new int[] {};
        int[] intArray50 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int51 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray45, intArray50);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray45, intArray57);
        int int60 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray57);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray8, (double) 100L);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray51, doubleArray70);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray85 = new double[] { 1, 1, 10 };
        double[] doubleArray89 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray85, doubleArray89);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray90);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equals(doubleArray79, doubleArray90);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray70, doubleArray90);
        double double94 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray8, doubleArray90);
        double double95 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray90);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray90, 9319.084308623767d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 990.0d + "'", double94 == 990.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1360.1470508735442d + "'", double95 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-27957.252925871304, 6212.722872415845, 31063.61436207922]");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray27, (double) 100L);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray27);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray27);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray7, (double) 10);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[11.11111111111111, -1.1111111111111112, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[11.11111111111111, -1.1111111111111112, 0.0]");
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        double[] doubleArray7 = new double[] { 1, 1, 10 };
        double[] doubleArray11 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray11);
        double[] doubleArray17 = new double[] { 1, 1, 10 };
        double[] doubleArray21 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray22);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(doubleArray11, doubleArray22);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray22);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22, 100);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.scale(2.4215696632833603E43d, doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray36 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int37 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 98 + "'", int37 == 98);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 98 + "'", int38 == 98);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 1, 52, 1, 32, -1]");
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.3399302268582524E25d), 104715.43798342906d, 1.2921065983350832E7d, 0.0d, 2.014842271203998E7d, (-1.02040068542142E52d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2.0559464345526106E59d) + "'", double6 == (-2.0559464345526106E59d));
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection65 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray64, orderDirection65, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray61, orderDirection65, true, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (-900 <= 200)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + orderDirection65 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection65.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray66);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(doubleArray55, doubleArray66);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray55);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (double) 100L);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray37, doubleArray47);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray73);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.9777683343670226E57d), 100.00499987500625d, 6181.097447311743d, 6.364464749353691E111d, 4.0273832394686912E16d, 8.689869660197955E99d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.8931373104222305E116d + "'", double6 == 3.8931373104222305E116d);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10.0f, 104609.92739486144d, 3.229749752589777E68d, (double) 1.0f, 2.7081350412376205E15d, (-1.2114525348282044E23d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.229749752589777E68d + "'", double6 == 3.229749752589777E68d);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray22 = new int[] {};
        int[] intArray27 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray22, intArray27);
        int[] intArray29 = new int[] {};
        int[] intArray34 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray34);
        int int36 = org.apache.commons.math3.util.MathArrays.distance1(intArray22, intArray34);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        double double61 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray47, doubleArray59);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection69 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray68, orderDirection69, false);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray47, orderDirection69, true, false);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47, (int) (short) 10);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray28, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray76, 10.0d);
        java.lang.String[] strArray86 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection87 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray86, orderDirection87, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection90 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray86, orderDirection90, false);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray76, orderDirection90, false, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection96 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray76, orderDirection96, true, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2111.0d + "'", double61 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + orderDirection69 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection69.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[11.11111111111111, -1.1111111111111112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + orderDirection87 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection87.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + orderDirection90 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection90.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + orderDirection96 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection96.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-5.0554510251207795E22d), (-2.3726249250325616E14d), (double) (byte) 100, 1.5460450237574003E10d, 4.403214624117384E71d, (double) 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.1994689109482976E37d + "'", double6 == 1.1994689109482976E37d);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (byte) 10);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int int35 = org.apache.commons.math3.util.MathArrays.distance1(intArray21, intArray33);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, 0);
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 1);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 1);
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray46, intArray55);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, 0);
        int[] intArray59 = new int[] {};
        int[] intArray64 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray59, intArray64);
        int[] intArray67 = org.apache.commons.math3.util.MathArrays.copyOf(intArray64, (int) (short) 1);
        int[] intArray68 = new int[] {};
        int[] intArray73 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int74 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray68, intArray73);
        int[] intArray76 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (short) 1);
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray67, intArray76);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray67, (int) (short) 100);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray79);
        double double81 = org.apache.commons.math3.util.MathArrays.distance(intArray58, intArray79);
        int[] intArray82 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58);
        int int83 = org.apache.commons.math3.util.MathArrays.distance1(intArray21, intArray82);
        int[] intArray85 = new int[] { 10 };
        double double86 = org.apache.commons.math3.util.MathArrays.distance(intArray21, intArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray69);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray69);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray9, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.scale(1.9193799025592952E90d, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-0.9, -2.0, Infinity]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.7274419123033655E91, 3.8387598051185904E90, 1.9193799025592953E91]");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, 0);
        int[] intArray17 = new int[] {};
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray22);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 1);
        int[] intArray26 = new int[] {};
        int[] intArray31 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int32 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray26, intArray31);
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (short) 1);
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray25, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, 0);
        int[] intArray38 = new int[] {};
        int[] intArray43 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray38, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 1);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 1);
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray46, intArray55);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (short) 100);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58);
        double double60 = org.apache.commons.math3.util.MathArrays.distance(intArray37, intArray58);
        double double61 = org.apache.commons.math3.util.MathArrays.distance(intArray16, intArray58);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, 0);
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1]");
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8, (int) (byte) 100);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray12, 1.1155051E7d);
        double[] doubleArray20 = new double[] { 1, 1, 10 };
        double[] doubleArray24 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray24);
        double[] doubleArray29 = new double[] { 1, 1, 10 };
        double[] doubleArray33 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray33);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray45);
        double double47 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray33, doubleArray45);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection48 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray45, orderDirection48, true);
        double double51 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray45);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray45, 1363.329967155091d);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray45);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale(Double.NaN, doubleArray54);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray76, orderDirection77, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection80 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray76, orderDirection80, false);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray64, orderDirection80, true);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray60, orderDirection80, false);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray55, orderDirection80, true);
        double[][] doubleArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray12, orderDirection80, doubleArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.2394501111111112E7, -1239450.111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2111.0d + "'", double47 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection48 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection48.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1360.1470508735442d + "'", double51 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + orderDirection77 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection77.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + orderDirection80 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection80.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(5.525048868831705E39d, 6.534471319905731E69d, 2.6817058196121406E33d, 4.0529758683460013E17d, 104609.92739486144d, 4.403214624117384E71d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.6103273374458373E109d + "'", double6 == 3.6103273374458373E109d);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, (double) 100L);
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray63);
        double double65 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray8);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray75, doubleArray86);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray86);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray86, 100);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray92);
        double double94 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray93);
        double double95 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray93);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 439.780879782446d + "'", double64 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 13.601470508735444d + "'", double65 == 13.601470508735444d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1360.1470508735442d + "'", double94 == 1360.1470508735442d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1346.545580364809d + "'", double95 == 1346.545580364809d);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1.1579293173848756E32d, 7.834007748456647E64d, 2.4397658821053278E76d, (double) '4', 1.1579293173848756E32d, 1363.329967155091d, 3.295116804952141E29d, (-1.0458049754775623E91d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-3.446049549398677E120d) + "'", double8 == (-3.446049549398677E120d));
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.scale((double) 1.0f, doubleArray20);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray40 = new double[] { 1, 1, 10 };
        double[] doubleArray44 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray44);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray56);
        double double58 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray44, doubleArray56);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray56, orderDirection59, true);
        double double62 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray56);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray56, 1363.329967155091d);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray56);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.scale(Double.NaN, doubleArray65);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray74, doubleArray85);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray85);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray85, (double) (byte) 1);
        double double91 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray90);
        double[][] doubleArray92 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray90, doubleArray92);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray65, doubleArray92);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray20, doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1000.0, -200.0, 900.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2111.0d + "'", double58 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection59 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection59.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1360.1470508735442d + "'", double62 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4.533823502911814d + "'", double91 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        double[] doubleArray0 = null;
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray6);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        double double43 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray29, doubleArray41);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray41, orderDirection44, true);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray65);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(doubleArray54, doubleArray65);
        double[] doubleArray71 = new double[] { 1, 1, 10 };
        double[] doubleArray75 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray71, doubleArray75);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray84);
        double[] doubleArray91 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray87, doubleArray91);
        double double93 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray91);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray6, doubleArray41);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray41);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, 1849908.0027625682d);
        double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2111.0d + "'", double43 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1427.5857242211412d + "'", double93 == 1427.5857242211412d);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-5549724.008287705, 1233272.0018417123, 6166360.009208561]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[-9000.0, 2000.0, 10000.0]");
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(5.525048868831705E39d, 0.0d, (-3.159027218120044E20d), (-2.7165288519332715E20d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 8.5815885820656E40d + "'", double4 == 8.5815885820656E40d);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        long[] longArray3 = new long[] { (byte) 10, (byte) -1, 1 };
        long[] longArray7 = new long[] { (byte) 10, (byte) -1, 1 };
        long[] longArray11 = new long[] { (byte) 10, (byte) -1, 1 };
        long[][] longArray12 = new long[][] { longArray3, longArray7, longArray11 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray12);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray23);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray23);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray49);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray49, (double) (byte) 1);
        double double55 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray54);
        double[][] doubleArray56 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray54, doubleArray56);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray30, doubleArray56);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray7, doubleArray56);
        double double60 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 4.533823502911814d + "'", double55 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.04987562112089d + "'", double60 == 10.04987562112089d);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(2720.2941017470885d, (-2.0559464345526106E59d), 3.2276883093128493E34d, (-1.3838648976946252E105d), 4.0529758683460013E17d, 100.00499987500625d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-4.466684551957364E139d) + "'", double6 == (-4.466684551957364E139d));
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection72, true);
        double double75 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray37, doubleArray69);
        java.lang.Class<?> wildcardClass76 = doubleArray37.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2111.0d + "'", double71 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-9200.0d) + "'", double75 == (-9200.0d));
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray12 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray12);
        int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray12);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) '4');
        int[] intArray17 = new int[] {};
        int[] intArray22 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray22);
        int[] intArray24 = new int[] {};
        int[] intArray29 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int30 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray24, intArray29);
        int int31 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray29);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) '4');
        int[] intArray34 = new int[] {};
        int[] intArray39 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray34, intArray39);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39, (int) (short) 1);
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39);
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (byte) 100);
        int int48 = org.apache.commons.math3.util.MathArrays.distance1(intArray16, intArray47);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100, 100, 35]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100, 100, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray50);
        double double53 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray41, doubleArray50);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        double[] doubleArray62 = new double[] { 1, 1, 10 };
        double[] doubleArray66 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray62, doubleArray66);
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection75 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray74, orderDirection75, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection78 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray74, orderDirection78, false);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray62, orderDirection78, true);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray58, orderDirection78, false);
        java.lang.String[] strArray87 = new java.lang.String[] { "", "hi!" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray87, orderDirection88, false);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray58, orderDirection88, false);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray50, orderDirection88, false);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + orderDirection75 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection75.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + orderDirection78 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection78.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + orderDirection88 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection88.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double double50 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray27);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray67);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, (int) ' ');
        double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray69);
        double[] doubleArray73 = null;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) (byte) 0);
        double double77 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 21.0d + "'", double50 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.scale((double) '#', doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray21, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equals(doubleArray58, doubleArray69);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray58);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray50, (double) 100L);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray40, doubleArray50);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.scale((-1.8381134056869864E7d), doubleArray40);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(100.00499987500625d, doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(474492.3840484359d, doubleArray38);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38, 10);
        java.lang.Class<?> wildcardClass46 = doubleArray38.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[4744923.840484359, -474492.3840484359, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[4744923.840484359, -474492.3840484359, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray19);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray19, doubleArray50);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray50, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale((-2165.0d), doubleArray77);
        double[] doubleArray82 = new double[] { 1, 1, 10 };
        double[] doubleArray86 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray86);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray82);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray77, doubleArray82);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77, (int) (byte) 100);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray91);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray91, (int) (byte) 1);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-890.0, 199.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1926850.0, -430835.0, -2165000.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-890.0, 199.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[890.0, -199.0, -1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-890.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-0.0]");
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(4.0273832394686912E16d, (-8.13113621789387E42d), 8.5815885820656E40d, 990.0d, (double) 100.0f, (-6.451502658696347E27d), 2165.0d, (double) 0.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-3.2747201721782604E59d) + "'", double8 == (-3.2747201721782604E59d));
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray27, orderDirection28, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray27, orderDirection31, false);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray15, orderDirection31, true);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray15);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray36, 2111.0d);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray48);
        double[] doubleArray50 = null;
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray48, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray38, doubleArray48);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.scale((-4.2035421686351696E21d), doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-11.0, 0.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1105.7619047619048, -0.0, 1005.2380952380952]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1106.7619047619048, 1.0, 1015.2380952380952]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-4.6481167951370134E24, 0.0, -4.2255607228518297E24]");
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 100);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(doubleArray20, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray50);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray66 = new double[] { 1, 1, 10 };
        double[] doubleArray70 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray70);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray70);
        double[] doubleArray77 = new double[] { 1, 1, 10 };
        double[] doubleArray81 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray81);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray82);
        double double84 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray70, doubleArray82);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray82, orderDirection85, true);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray53, orderDirection85, false);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray12, orderDirection85, false, false);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2111.0d + "'", double84 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray19);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray66);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.scale(1.2423244926866538E15d, doubleArray66);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale(1000.0499987500625d, doubleArray68);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(Double.NaN, doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 439.780879782446d + "'", double67 == 439.780879782446d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-3.726973478059961E17, 8.2821632845776928E16, 4.1410816422888454E17]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[NaN, NaN, NaN]");
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(9209.0d, (-3.5588299084474494E14d), 1.0020387082911603E30d, (-5.2221633920904585E36d), (double) 100.0f, 2.6740627672928667E44d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5.232809859895707E66d) + "'", double6 == (-5.232809859895707E66d));
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, 0);
        int[] intArray42 = new int[] {};
        int[] intArray47 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray42, intArray47);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (short) 1);
        int[] intArray51 = new int[] {};
        int[] intArray56 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int57 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray51, intArray56);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (short) 1);
        int int60 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray59);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray50, (int) (short) 100);
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62);
        double double64 = org.apache.commons.math3.util.MathArrays.distance(intArray41, intArray62);
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray62);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        java.lang.Class<?> wildcardClass67 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8, (int) (byte) 100);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray12, 1.1155051E7d);
        double[] doubleArray18 = new double[] { 1, 1, 10 };
        double[] doubleArray22 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray22);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray31, doubleArray42);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray31);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray73);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.equals(doubleArray62, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray62);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray31, doubleArray62);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray62, 144652.08102413287d);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray12, doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray62);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.2394501111111112E7, -1239450.111111111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray41);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray83);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray41, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.scale((-2.613107296291178E10d), doubleArray86);
        double double90 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[2.3779276396249723E13, -5.252345665545268E12, -2.613107296291178E13]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1366.9312345542478d + "'", double90 == 1366.9312345542478d);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.629021819880944E76d, (double) (short) -1, 2.3726213090057078E14d, 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.629021819880944E76d) + "'", double4 == (-1.629021819880944E76d));
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray17, doubleArray48);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray48, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.scale((-2165.0d), doubleArray75);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray80);
        double double87 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray76, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray76, 98);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-890.0, 199.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1926850.0, -430835.0, -2165000.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-2.0153985E7d) + "'", double87 == (-2.0153985E7d));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1926850.0, -430835.0, -2165000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(2.3726213090057078E14d, 9209.0d, (double) '4', 3.295116804952141E29d, 1.4678500047059846E9d, (-5.718703196015772E45d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-8.39419851318388E54d) + "'", double6 == (-8.39419851318388E54d));
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        long[] longArray1 = new long[] { 0L };
        long[] longArray3 = new long[] { 0L };
        long[][] longArray4 = new long[][] { longArray1, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        java.lang.Class<?> wildcardClass6 = longArray4.getClass();
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[0]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[0]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (1 >= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray10, (double) 100L);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray10);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray0, doubleArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray12, 0);
        double double15 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double double31 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.04987562112089d + "'", double31 == 10.04987562112089d);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray20 = new int[] {};
        int[] intArray25 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray25);
        int[] intArray27 = new int[] {};
        int[] intArray32 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int33 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray32);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32, (int) (short) 1);
        int[] intArray36 = new int[] {};
        int[] intArray41 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int42 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray36, intArray41);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41, (int) (short) 1);
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray35, intArray44);
        int[] intArray46 = new int[] {};
        int[] intArray51 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int52 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray46, intArray51);
        double double53 = org.apache.commons.math3.util.MathArrays.distance(intArray44, intArray51);
        double double54 = org.apache.commons.math3.util.MathArrays.distance(intArray20, intArray44);
        int int55 = org.apache.commons.math3.util.MathArrays.distance1(intArray19, intArray44);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(4.0529758683460013E17d, (-1.02040068542142E52d), 2.2267871488170685E30d, (-2.5043938381010786E8d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-4.135659354056735E69d) + "'", double4 == (-4.135659354056735E69d));
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray6 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray6);
        int[] intArray8 = new int[] {};
        int[] intArray13 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int14 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray13);
        int int15 = org.apache.commons.math3.util.MathArrays.distance1(intArray1, intArray13);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (double) 100L);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray41);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray9, doubleArray41);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9, (int) '4');
        double double70 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1360.1470508735442d + "'", double70 == 1360.1470508735442d);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray64 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[] doubleArray68 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[][] doubleArray69 = new double[][] { doubleArray64, doubleArray68 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray37, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray88);
        double double91 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray37, doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 0);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41);
        double double43 = org.apache.commons.math3.util.MathArrays.distance(intArray20, intArray41);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20, 10);
        int[] intArray47 = new int[] {};
        int[] intArray52 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray47, intArray52);
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (short) 1);
        int[] intArray56 = new int[] {};
        int[] intArray61 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray56, intArray61);
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray61, (int) (short) 1);
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray55, intArray64);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray55);
        int[] intArray67 = org.apache.commons.math3.util.MathArrays.copyOf(intArray55);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = org.apache.commons.math3.util.MathArrays.distance1(intArray46, intArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1]");
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray4);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray28);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray30, doubleArray49);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equals(doubleArray58, doubleArray69);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray49, doubleArray69);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, 0);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray84);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(doubleArray69, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray84);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray87, (int) '4');
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[9.0, 9.0, 90.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[9.0, 9.0, 90.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        float[] floatArray2 = new float[] { (-1L), (byte) 10 };
        float[] floatArray6 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray6);
        float[] floatArray8 = null;
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray8);
        float[] floatArray12 = new float[] { (-1L), (byte) 10 };
        float[] floatArray16 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray12, floatArray16);
        float[] floatArray20 = new float[] { (short) 1, (-1L) };
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray16, floatArray20);
        float[] floatArray24 = new float[] { (-1L), (byte) 10 };
        float[] floatArray28 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray24, floatArray28);
        float[] floatArray30 = null;
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray24);
        float[] floatArray35 = new float[] { (-1L), (byte) 10 };
        float[] floatArray39 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray35, floatArray39);
        float[] floatArray41 = null;
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(floatArray35, floatArray41);
        float[] floatArray45 = new float[] { (-1L), (byte) 10 };
        float[] floatArray49 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray45, floatArray49);
        float[] floatArray53 = new float[] { (short) 1, (-1L) };
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray49, floatArray53);
        float[] floatArray57 = new float[] { (-1L), (byte) 10 };
        float[] floatArray61 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray57, floatArray61);
        float[] floatArray63 = null;
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equals(floatArray57, floatArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(floatArray49, floatArray57);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(floatArray35, floatArray49);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray35);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray8, floatArray35);
        float[] floatArray71 = new float[] { (-1L), (byte) 10 };
        float[] floatArray75 = new float[] { (byte) 100, 1, (-1.0f) };
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray71, floatArray75);
        float[] floatArray79 = new float[] { (short) 1, (-1L) };
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray75, floatArray79);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray35, floatArray75);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[-1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(4.533823502911814d, 1.8931094217295912E99d, 1.2459825039216539E7d, 9.207239720523508E39d, (-2.615914305086962E12d), 8.636077385394107E69d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 8.583023989821415E99d + "'", double6 == 8.583023989821415E99d);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray40);
        double double55 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray20, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale(929377.4372207435d, doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2068.0d + "'", double55 == 2068.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.7658171307194125E7, 2788132.3116622306, 9293774.372207435]");
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray21);
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(doubleArray10, doubleArray21);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(doubleArray32, doubleArray43);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray43);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray43);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray66);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(doubleArray55, doubleArray66);
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray85);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray43, doubleArray88);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray10, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.scale((-2.613107296291178E10d), doubleArray88);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.2114525348282044E23d), doubleArray88);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.1867527700951934E25d), doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.3083021329070559E51, 2.8897662496078927E50, 1.4376946515462153E51]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[2.3779276396249723E13, -5.252345665545268E12, -2.613107296291178E13]");
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (short) 100);
        double double42 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray29);
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray44 = new int[] {};
        int[] intArray49 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int50 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray44, intArray49);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) (short) 1);
        int[] intArray53 = new int[] {};
        int[] intArray58 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray58);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (short) 1);
        int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray61);
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, 0);
        int[] intArray65 = new int[] {};
        int[] intArray70 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int71 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray65, intArray70);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70, (int) (short) 1);
        int int74 = org.apache.commons.math3.util.MathArrays.distance1(intArray64, intArray73);
        int[] intArray76 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (short) 100);
        int int77 = org.apache.commons.math3.util.MathArrays.distance1(intArray43, intArray73);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray64 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[] doubleArray68 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[][] doubleArray69 = new double[][] { doubleArray64, doubleArray68 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray37, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        double double72 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(22457.292802116644d, 4.451729603812351E60d, (-5.963592403540382E49d), 5.525048868831705E39d, (-2.613107296291178E10d), (-1058.0d), 2720.2941017470885d, (-9200.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-3.2949139463354136E89d) + "'", double8 == (-3.2949139463354136E89d));
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray37);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equals(doubleArray26, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray26);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray57);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray26, doubleArray57);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray57, 144652.08102413287d);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray57, (double) 10L);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equals(doubleArray4, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale(6.095966089161461E33d, doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[11.11111111111111, -1.1111111111111112, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[6.095966089161461E33, 6.095966089161461E33, 6.095966089161461E34]");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.624927640909409E28d, 1363.329967155091d, 2.6740627672928667E44d, (-1.552472386491933E14d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-4.15140860596838E58d) + "'", double4 == (-4.15140860596838E58d));
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray18);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (double) 100L);
        double double66 = org.apache.commons.math3.util.MathArrays.distance(doubleArray10, doubleArray65);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection67 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray65, orderDirection67, false, false);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray65);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.scale(21009.0d, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100L, doubleArray72);
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection81 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray80, orderDirection81, false);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray72, orderDirection81, true);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 439.780879782446d + "'", double66 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + orderDirection67 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection67.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-6.3027E8, 1.4006E8, 7.003E8]");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + orderDirection81 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection81.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray41);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray64);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(doubleArray53, doubleArray64);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray83);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray41, doubleArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.scale(6181.097447311743d, doubleArray86);
        double[] doubleArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray86, doubleArray90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-5624798.677053686, 1242400.5869096604, 6181097.447311743]");
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection72, true);
        double double75 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray37, doubleArray69);
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection83 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray82, orderDirection83, false);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray37, orderDirection83, false);
        double[] doubleArray91 = new double[] { 1, 1, 10 };
        double[] doubleArray95 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray91, doubleArray95);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray91);
        double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray37, doubleArray97);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2111.0d + "'", double71 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-9200.0d) + "'", double75 == (-9200.0d));
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + orderDirection83 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection83.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[10.0, 9.0, 99.0, -10.0, 0.0]");
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray11);
        double[] doubleArray17 = new double[] { 1, 1, 10 };
        double[] doubleArray21 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray17, doubleArray21);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray30);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray72);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(doubleArray61, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray61);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray53, (double) 100L);
        double double78 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray77);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection79 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray77, orderDirection79, false, false);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.scale(21009.0d, doubleArray77);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray84, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray11, doubleArray86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 3 != 100");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 439.780879782446d + "'", double78 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + orderDirection79 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection79.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-6302700.0, 1400600.0, 7003000.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-6302700.0, 1400600.0, 7003000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        double double63 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray48);
        double double64 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray9, doubleArray48);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.5183866289549949E7d), doubleArray9);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray74, doubleArray85);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray85);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray85, (double) (byte) 1);
        double double91 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray90);
        double double93 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.3665479660594955E8, -3.0367732579099897E7, -1.518386628954995E8]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.04987562112089d + "'", double63 == 10.04987562112089d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-92.0d) + "'", double64 == (-92.0d));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4.533823502911814d + "'", double91 == 4.533823502911814d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2.0652291407971942E8d + "'", double92 == 2.0652291407971942E8d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4.533823502911814d + "'", double93 == 4.533823502911814d);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray38, doubleArray58);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray58, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(88.21557489650559d, doubleArray58);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray58, (int) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-79394.01740685503, 17643.114979301117, 88215.57489650558]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-79394.01740685503, 17643.114979301117, 88215.57489650558, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        double double30 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray16, doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray28, orderDirection31, true);
        double double34 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray28, 1363.329967155091d);
        double double37 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray36);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        double[] doubleArray50 = new double[] { 1, 1, 10 };
        double[] doubleArray54 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray50, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray54);
        double[] doubleArray60 = new double[] { 1, 1, 10 };
        double[] doubleArray64 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray64);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray84);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(doubleArray73, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray73);
        double double88 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray56, doubleArray65);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray36, doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray36);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -4,089.99 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2111.0d + "'", double30 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1360.1470508735442d + "'", double34 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 6181.097447311743d + "'", double37 == 6181.097447311743d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 21.0d + "'", double88 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray38);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray51);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray42, doubleArray51);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, 1.2459825039216539E7d);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, 235);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.scale((-1.0570558719722057E74d), doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray59, 111.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.3844250043573933E7, -1384425.0043573931, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray69);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray71, doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray91);
        double[] doubleArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray91, doubleArray93);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 10.0d + "'", double92 == 10.0d);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, 144652.08102413287d);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (double) 10L);
        double double67 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray66);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (11.111 >= -1.111)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[11.11111111111111, -1.1111111111111112, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 11.1665284679121d + "'", double67 == 11.1665284679121d);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        double double31 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray29);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection32, true);
        double double35 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray29);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray29, 1363.329967155091d);
        double double38 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray55);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray74, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray74);
        double double89 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray66);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray37, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-4.0443212939554954E20d), doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2111.0d + "'", double31 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1360.1470508735442d + "'", double35 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.6541233250558943E24, -3.67582961123532E23, -1.8379148056176602E24]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 6181.097447311743d + "'", double38 == 6181.097447311743d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 21.0d + "'", double89 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray57);
        double[] doubleArray64 = new double[] { 1, 1, 10 };
        double[] doubleArray68 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray68);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray57, doubleArray69);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray69, orderDirection72, true);
        double double75 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray37, doubleArray69);
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection83 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray82, orderDirection83, false);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray37, orderDirection83, false);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37, 10);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2111.0d + "'", double71 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-9200.0d) + "'", double75 == (-9200.0d));
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + orderDirection83 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection83.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray19, (double) (byte) 1);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray43, doubleArray62);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray77 = new double[] { 1, 1, 10 };
        double[] doubleArray81 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray77, doubleArray81);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray82);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equals(doubleArray71, doubleArray82);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray62, doubleArray82);
        double[] doubleArray89 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[] doubleArray93 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[][] doubleArray94 = new double[][] { doubleArray89, doubleArray93 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray62, doubleArray94);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray24, doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray0, doubleArray96);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-Infinity, Infinity, Infinity]");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-6.469188686213148E43d), 3.295116804952141E29d, 8.636077385394107E69d, (-4.15140860596838E58d), (double) '4', (-5.691405330860345E15d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-3.5851885979534E128d) + "'", double6 == (-3.5851885979534E128d));
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray27);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray68);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray48, doubleArray68);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray68, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(88.21557489650559d, doubleArray68);
        double double75 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray4, doubleArray68);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray4, 48013.29967155091d);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-79394.01740685503, 17643.114979301117, 88215.57489650558]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 820404.8465375019d + "'", double75 == 820404.8465375019d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[4001.1083059625757, 4001.1083059625757, 40011.08305962576]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray20);
        double[] doubleArray28 = new double[] { 1, 1, 10 };
        double[] doubleArray32 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray32);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(doubleArray32, doubleArray43);
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray62);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray65);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, (int) 'a');
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale(1.347347400304754E92d, doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (900 >= -200)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.2126126602742785E95, -2.694694800609508E94, -1.347347400304754E95]");
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray38);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, (double) 100L);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray30);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray83);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(doubleArray72, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray64, doubleArray72);
        double double87 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray72);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1353.329967155091d + "'", double87 == 1353.329967155091d);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-2.1056418422573112E15d), 3600.0d, 6.469126606706673E72d, 1849908.0027625682d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.1967289080630932E79d + "'", double4 == 1.1967289080630932E79d);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, (double) (byte) 1);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray47);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray47);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, 144652.08102413287d);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (double) 10L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47);
        double[] doubleArray74 = new double[] { 1, 1, 10 };
        double[] doubleArray78 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray74, doubleArray78);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray89);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(doubleArray78, doubleArray89);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray89);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray89);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray89, 100);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray95);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray96);
        double double98 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray47, doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[11.11111111111111, -1.1111111111111112, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[900.0, -200.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-900.0, 200.0, 1000.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 10.0d + "'", double98 == 10.0d);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray17, doubleArray48);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray48, 144652.08102413287d);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray74);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray76, (int) (byte) 0);
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray76);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray76);
        double double81 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray76);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[160724.53447125875, -16072.453447125874, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 20.09975124224178d + "'", double79 == 20.09975124224178d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.04987562112089d + "'", double81 == 10.04987562112089d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-10.0, 1.0, -0.0]");
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray16);
        double[] doubleArray34 = new double[] { 1, 1, 10 };
        double[] doubleArray38 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray34, doubleArray38);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(doubleArray38, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray37);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equals(doubleArray26, doubleArray37);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray37);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(doubleArray57, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray57);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray49, (double) 100L);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray49);
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection82 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray81, orderDirection82, false);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray49, orderDirection82, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray7, orderDirection82, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not decreasing (-1 < 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + orderDirection82 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection82.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-3.2949139463354136E89d), 6.364464749353691E111d, 1.5460450237574002E8d, (-2.559673952118356E12d), 1.1461596173157833E27d, 2.6817058196121406E33d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2.09703636636056E201d) + "'", double6 == (-2.09703636636056E201d));
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (1 >= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        double[] doubleArray6 = new double[] { 1, 1, 10 };
        double[] doubleArray10 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray6, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray6);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale(111.0d, doubleArray6);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.552472386491933E14d), doubleArray13);
        double[] doubleArray18 = new double[] { 1, 1, 10 };
        double[] doubleArray22 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray22);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray31);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray43);
        double double45 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray31, doubleArray43);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray52, orderDirection53, false);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray31, orderDirection53, true, false);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray31, (int) (short) 10);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray31);
        double double62 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray61);
        double double63 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray13, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2111.0d + "'", double45 == 2111.0d);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection53.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.04987562112089d + "'", double62 == 10.04987562112089d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 0.0]");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection46 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray45, orderDirection46, false);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18, orderDirection46, false, false);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray57);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.scale(111.0d, doubleArray57);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray64, 1.1967289080630932E79d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + orderDirection46 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection46.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray12, 0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray10);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray30);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray50);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray42, (double) 100L);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray42);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray10, doubleArray42);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale(1360.1470508735442d, doubleArray42);
        double[] doubleArray73 = new double[] { 1, 1, 10 };
        double[] doubleArray77 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray77);
        double[] doubleArray83 = new double[] { 1, 1, 10 };
        double[] doubleArray87 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray83, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray88);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray77, doubleArray88);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray88);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray88, (double) (byte) 1);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray93, 10.0d);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray95);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray42, doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[8100.0, -3600.0, -17600.0, 4000.0, 10000.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-12241.323457861898, 2720.2941017470885, 13601.470508735441]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-30.0, 6.666666666666666, 33.333333333333336]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[270.0, 13.333333333333332, 333.33333333333337]");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray36 = new int[] { 'a', (byte) 1, '4', (byte) 1, ' ', (short) -1 };
        int int37 = org.apache.commons.math3.util.MathArrays.distance1(intArray29, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray8, intArray36);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) ' ');
        int int63 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray62);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 1, 52, 1, 32, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 98 + "'", int37 == 98);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 98 + "'", int38 == 98);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray30);
        double double32 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray30);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray30, orderDirection33, true);
        double double36 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray30);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray30, 1363.329967155091d);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale((double) 100, doubleArray30);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.scale(Double.NaN, doubleArray39);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        double[] doubleArray49 = new double[] { 1, 1, 10 };
        double[] doubleArray53 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray49, doubleArray53);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection62 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray61, orderDirection62, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection65 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray61, orderDirection65, false);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray49, orderDirection65, true);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray45, orderDirection65, false);
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray40, orderDirection65, true);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray40, (-7.887202131357053E44d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2111.0d + "'", double32 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1360.1470508735442d + "'", double36 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-4089.989901465273, 908.8866447700607, 4544.433223850303]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-90000.0, 20000.0, 100000.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + orderDirection62 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection62.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + orderDirection65 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection65.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray29);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray29);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray29);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        double[] doubleArray55 = new double[] { 1, 1, 10 };
        double[] doubleArray59 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray59);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray49, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray49);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (double) 100L);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray41);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray66, (double) 'a');
        double[] doubleArray72 = new double[] { 1, 1, 10 };
        double[] doubleArray76 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray76);
        double[] doubleArray81 = new double[] { 1, 1, 10 };
        double[] doubleArray85 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray81, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray85);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray87, (int) ' ');
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray66, doubleArray89);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(12.0d, doubleArray89);
        double double92 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray9, doubleArray89);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 3 != 32");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-291.0, 64.66666666666667, 323.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-9200.0d), 0.0d, (-1.2170120134952047E22d), 7.834007748456647E64d, (-3.5851885979534E128d), 0.0d, 1366.9312345542478d, (-3.48967922381901E15d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.534081543686259E86d) + "'", double8 == (-9.534081543686259E86d));
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray44);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        java.lang.Class<?> wildcardClass50 = intArray17.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((-6.469188686213299E42d), 9.835522828058196E71d, (-5.0554510251207795E22d), 1.2423244926866538E15d, 1849908.0027625682d, 1.1461596173157833E27d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-6.362785300226671E114d) + "'", double6 == (-6.362785300226671E114d));
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray41);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(doubleArray30, doubleArray41);
        double[] doubleArray47 = new double[] { 1, 1, 10 };
        double[] doubleArray51 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray51);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray60);
        double double64 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray41);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.scale(1.4678500047059846E9d, doubleArray19);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray74, doubleArray85);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray85);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray85);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray85, (int) (short) 0);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray65, doubleArray85);
        double double93 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.3210650042353862E12, 2.935700009411969E11, 1.4678500047059846E12]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-1.1889585038118475E15, 5.284260016941545E14, 2.583416008282533E15, -5.871400018823938E14, -1.4678500047059845E15]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.9964918550255632E12d + "'", double93 == 1.9964918550255632E12d);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray14 = new double[] { 1, 1, 10 };
        double[] doubleArray18 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray18);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray19);
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray45 = new double[] { 1, 1, 10 };
        double[] doubleArray49 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray39);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (double) 100L);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray31);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray56, (double) 'a');
        double double59 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray56);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale(1.5460450237574002E8d, doubleArray56);
        double double61 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray56);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray56);
        double[] doubleArray67 = new double[] { 1, 1, 10 };
        double[] doubleArray71 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray67, doubleArray71);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        double[] doubleArray86 = new double[] { 1, 1, 10 };
        double[] doubleArray90 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray86, doubleArray90);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray91);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equals(doubleArray80, doubleArray91);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray80);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray72, (double) 100L);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(3600.0d, doubleArray72);
        double double98 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-291.0, 64.66666666666667, 323.3333333333333]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1346.545580364809d + "'", double59 == 1346.545580364809d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.3775261161678436E11, 3.0611691470396523E10, 1.5305845735198264E11]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1346.545580364809d + "'", double61 == 1346.545580364809d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-32400.0, 7200.0, 36000.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 47618.74825108279d + "'", double98 == 47618.74825108279d);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray66);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(doubleArray55, doubleArray66);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray55);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray47, (double) 100L);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray37, doubleArray47);
        double[] doubleArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray37, doubleArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-0.0, 0.0, 0.0]");
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray9);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray11, (int) (byte) 0);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 0);
        double[] doubleArray21 = new double[] { 1, 1, 10 };
        double[] doubleArray25 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray25);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray36);
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equals(doubleArray25, doubleArray36);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray51 = new double[] { 1, 1, 10 };
        double[] doubleArray55 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray55);
        double[] doubleArray62 = new double[] { (short) 100, 0.0f, (short) 1 };
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray58, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.scale(100.0d, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.scale(2068.0d, doubleArray64);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray84);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(doubleArray73, doubleArray84);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray84);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray84, (double) (byte) 1);
        double double90 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray89);
        double[][] doubleArray91 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray89, doubleArray91);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray65, doubleArray91);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray13, doubleArray91);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale((-6.451502658696347E27d), doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10000.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 206800.0, 2.068E7]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-3.0, 0.6666666666666666, 3.3333333333333335]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 4.533823502911814d + "'", double90 == 4.533823502911814d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[]");
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray64 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[] doubleArray68 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[][] doubleArray69 = new double[][] { doubleArray64, doubleArray68 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray37, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray88);
        double double91 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray37, doubleArray90);
        java.lang.String[] strArray94 = new java.lang.String[] { "", "hi!" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection95 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray94, orderDirection95, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray37, orderDirection95, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly decreasing (0 <= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertTrue("'" + orderDirection95 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection95.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        double[] doubleArray5 = new double[] { 1, 1, 10 };
        double[] doubleArray9 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray9);
        double[] doubleArray15 = new double[] { 1, 1, 10 };
        double[] doubleArray19 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray15, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(doubleArray9, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20);
        double[] doubleArray27 = new double[] { 1, 1, 10 };
        double[] doubleArray31 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray31);
        double[] doubleArray36 = new double[] { 1, 1, 10 };
        double[] doubleArray40 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray36, doubleArray40);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray51);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray40);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray32, (double) 100L);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray32);
        double[] doubleArray61 = new double[] { 1, 1, 10 };
        double[] doubleArray65 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray61, doubleArray65);
        double[] doubleArray70 = new double[] { 1, 1, 10 };
        double[] doubleArray74 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray74);
        double[] doubleArray80 = new double[] { 1, 1, 10 };
        double[] doubleArray84 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray80, doubleArray84);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray74, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray66, doubleArray74);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray20, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.scale((double) 1L, doubleArray20);
        double double91 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray90);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.3399302268582524E25d), doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-891.0, 198.0, 990.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-919.0, 203.0, 1010.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.205937204172427E28, -2.6798604537165046E27, -1.3399302268582525E28]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1360.1470508735442d + "'", double91 == 1360.1470508735442d);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(7.214337735553726E68d, (-2.7191506728564754E13d), (-1.708270408017212E47d), 1353.403487508437d, 6.573889109854259E24d, (-1.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.9616871307844774E82d) + "'", double6 == (-1.9616871307844774E82d));
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(doubleArray20, doubleArray31);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray31);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray42, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray72);
        double double76 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray31, doubleArray53);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(13.601470508735444d, doubleArray31);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray11, doubleArray31);
        double double79 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray31);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (-2.667039156913762E7d));
        org.apache.commons.math3.util.MathArrays.scaleInPlace(2068.0d, doubleArray81);
        double[] doubleArray83 = null;
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equals(doubleArray81, doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-12241.3234578619, 2720.294101747089, 13601.470508735443]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-12241.3234578619, 2720.294101747089, 136014.70508735444]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 18500.0d + "'", double79 == 18500.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.654631092949298E11, -3.676957984331774E10, -1.8384789921658865E11]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray9, orderDirection10, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray9, orderDirection13, false);
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection13, true);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection18 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection18, false);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        double[] doubleArray29 = new double[] { 1, 1, 10 };
        double[] doubleArray33 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray33);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray41, orderDirection42, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection45 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray41, orderDirection45, false);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray29, orderDirection45, true);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray25, orderDirection45, false);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection45, false);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + orderDirection18 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection18.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + orderDirection45 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection45.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray26 = new double[] { 1, 1, 10 };
        double[] doubleArray30 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray30);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(doubleArray20, doubleArray31);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray31);
        double[] doubleArray38 = new double[] { 1, 1, 10 };
        double[] doubleArray42 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray42);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray42, doubleArray53);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray72);
        double double76 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray31, doubleArray53);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(13.601470508735444d, doubleArray31);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray11, doubleArray31);
        double double79 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray31);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray31, (-2.667039156913762E7d));
        org.apache.commons.math3.util.MathArrays.scaleInPlace(75611.0d, doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -925,578,707.972 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-9.255787079723961E8, 2.0568415732719913E8, 1.0284207866359956E9]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-12241.3234578619, 2720.294101747089, 136014.70508735444]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 18500.0d + "'", double79 == 18500.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[8.001117470741287E7, -1.778026104609175E7, -8.890130523045874E7]");
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-3.2747201721782604E59d), (double) (byte) 1, 3.295116804952141E29d, 2.5284455777199858E19d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-3.2747201720949453E59d) + "'", double4 == (-3.2747201720949453E59d));
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) (byte) 0);
        double[] doubleArray16 = new double[] { 1, 1, 10 };
        double[] doubleArray20 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray20);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(doubleArray29, doubleArray40);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray29);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray21, (double) 100L);
        double[][] doubleArray46 = new double[][] {};
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray45, doubleArray46);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray12, doubleArray46);
        java.lang.Class<?> wildcardClass49 = doubleArray46.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray0, 21.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray41 = new double[] { 1, 1, 10 };
        double[] doubleArray45 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(doubleArray35, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray35);
        double double50 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray27);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        double[] doubleArray63 = new double[] { 1, 1, 10 };
        double[] doubleArray67 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray67);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, (int) ' ');
        double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray69);
        double[] doubleArray73 = null;
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray87 = new double[] { 1, 1, 10 };
        double[] doubleArray91 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray87, doubleArray91);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray82, doubleArray91);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray93, (int) ' ');
        double double96 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray93);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray93);
        java.lang.Class<?> wildcardClass98 = doubleArray93.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 21.0d + "'", double50 == 21.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection46 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray45, orderDirection46, false);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18, orderDirection46, false, false);
        double[] doubleArray57 = new double[] { 1, 1, 10 };
        double[] doubleArray61 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray57, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0, doubleArray57);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.scale(111.0d, doubleArray57);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray64);
        java.lang.Class<?> wildcardClass66 = doubleArray64.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + orderDirection46 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection46.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27);
        int int29 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray28);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1]");
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 100);
        int[] intArray21 = new int[] {};
        int[] intArray26 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray21, intArray26);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 1);
        int[] intArray30 = new int[] {};
        int[] intArray35 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray30, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 1);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray29, intArray38);
        int[] intArray40 = new int[] {};
        int[] intArray45 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int46 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray40, intArray45);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (short) 1);
        int[] intArray49 = new int[] {};
        int[] intArray54 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray54);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (short) 1);
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray57);
        int int59 = org.apache.commons.math3.util.MathArrays.distance1(intArray38, intArray57);
        double double60 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray38);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray62 = new int[] {};
        int[] intArray67 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int68 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray62, intArray67);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray67, (int) (short) 1);
        int[] intArray71 = new int[] {};
        int[] intArray76 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int77 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray71, intArray76);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76, (int) (short) 1);
        int int80 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray70, intArray79);
        int[] intArray82 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70, 0);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray83, 1);
        int[] intArray86 = org.apache.commons.math3.util.MathArrays.copyOf(intArray83);
        int int87 = org.apache.commons.math3.util.MathArrays.distance1(intArray61, intArray86);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double double41 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray40);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!", "hi!", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray49, orderDirection50, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray49, orderDirection53, false);
        double[] doubleArray59 = new double[] { 1, 1, 10 };
        double[] doubleArray63 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray63);
        double[] doubleArray68 = new double[] { 1, 1, 10 };
        double[] doubleArray72 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray72);
        double[] doubleArray79 = new double[] { 1, 1, 10 };
        double[] doubleArray83 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray83);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray84);
        double double86 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray72, doubleArray84);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection87 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray84, orderDirection87, true);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray49, orderDirection87, true);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray40, orderDirection87, true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1366.9312345542478d + "'", double41 == 1366.9312345542478d);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection53.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2111.0d + "'", double86 == 2111.0d);
        org.junit.Assert.assertTrue("'" + orderDirection87 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection87.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.0570558719722057E74d, (double) 0L, (-2.559673952118356E12d), 8.583023989821415E99d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-2.196974293715284E112d) + "'", double4 == (-2.196974293715284E112d));
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        double[] doubleArray44 = new double[] { 1, 1, 10 };
        double[] doubleArray48 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray48);
        double[] doubleArray54 = new double[] { 1, 1, 10 };
        double[] doubleArray58 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray54, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray48, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray40, doubleArray48);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray40, (double) 100L);
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray64);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray64, orderDirection66, false, false);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.405900735433483E96d, doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-4.2177022063004493E98, 9.372671569556554E97, 4.6863357847782764E98]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 439.780879782446d + "'", double65 == 439.780879782446d);
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        long[] longArray1 = new long[] { 0L };
        long[] longArray3 = new long[] { 0L };
        long[][] longArray4 = new long[][] { longArray1, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[0]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[0]");
        org.junit.Assert.assertNotNull(longArray4);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        int[] intArray0 = new int[] {};
        int[] intArray5 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray9 = new int[] {};
        int[] intArray14 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (short) 1);
        int int18 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray17);
        int[] intArray19 = new int[] {};
        int[] intArray24 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray24);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 1);
        int[] intArray28 = new int[] {};
        int[] intArray33 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray33);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (short) 1);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray17, intArray36);
        int[] intArray39 = new int[] {};
        int[] intArray44 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray39, intArray44);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 1);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray44);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) (byte) 1);
        int[] intArray52 = new int[] {};
        int[] intArray57 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int58 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (short) 1);
        int[] intArray61 = new int[] {};
        int[] intArray66 = new int[] { (-1), (byte) 100, (short) 100, '#' };
        int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray66);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (short) 1);
        int int70 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray60, intArray69);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69);
        int int73 = org.apache.commons.math3.util.MathArrays.distance1(intArray51, intArray69);
        int[] intArray74 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100, 100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1]");
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        long[] longArray6 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray13 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray20 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray27 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[] longArray34 = new long[] { ' ', (short) 10, (byte) 100, 1, 10, 100L };
        long[][] longArray35 = new long[][] { longArray6, longArray13, longArray20, longArray27, longArray34 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray35);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 10, 100, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray24 = new double[] { 1, 1, 10 };
        double[] doubleArray28 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray28);
        double[] doubleArray33 = new double[] { 1, 1, 10 };
        double[] doubleArray37 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray33, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray37);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray50);
        double double53 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray41, doubleArray50);
        double double54 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-10.0, 1.0, -0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.04987562112089d + "'", double54 == 10.04987562112089d);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray12 = new double[] { 1, 1, 10 };
        double[] doubleArray16 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray16);
        double[] doubleArray22 = new double[] { 1, 1, 10 };
        double[] doubleArray26 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray26);
        double[] doubleArray31 = new double[] { 1, 1, 10 };
        double[] doubleArray35 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray37);
        double[] doubleArray42 = new double[] { 1, 1, 10 };
        double[] doubleArray46 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray46);
        double[] doubleArray52 = new double[] { 1, 1, 10 };
        double[] doubleArray56 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray52, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray57);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray57);
        double[] doubleArray64 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[] doubleArray68 = new double[] { (byte) 0, (-1.0d), 13.601470508735444d };
        double[][] doubleArray69 = new double[][] { doubleArray64, doubleArray68 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray37, doubleArray69);
        double double71 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        double[] doubleArray75 = new double[] { 1, 1, 10 };
        double[] doubleArray79 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray75, doubleArray79);
        double[] doubleArray84 = new double[] { 1, 1, 10 };
        double[] doubleArray88 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray84, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray79, doubleArray88);
        double double91 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray37, doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, -1.0, 13.601470508735444]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray19 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        double[] doubleArray32 = new double[] { 1, 1, 10 };
        double[] doubleArray36 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray38);
        double[] doubleArray43 = new double[] { 1, 1, 10 };
        double[] doubleArray47 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray47);
        double[] doubleArray53 = new double[] { 1, 1, 10 };
        double[] doubleArray57 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray53, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray47, doubleArray58);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray38, doubleArray58);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.scale(13.601470508735444d, doubleArray58);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-12241.3234578619, 2720.294101747089, 13601.470508735443]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        double[] doubleArray4 = new double[] { 1, 1, 10 };
        double[] doubleArray8 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray9 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray8);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        double[] doubleArray23 = new double[] { 1, 1, 10 };
        double[] doubleArray27 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray17);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray9, (double) 100L);
        double[] doubleArray37 = new double[] { 1, 1, 10 };
        double[] doubleArray41 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray37, doubleArray41);
        double[] doubleArray46 = new double[] { 1, 1, 10 };
        double[] doubleArray50 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray46, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray50);
        double[] doubleArray56 = new double[] { 1, 1, 10 };
        double[] doubleArray60 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray60);
        double[] doubleArray65 = new double[] { 1, 1, 10 };
        double[] doubleArray69 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray60, doubleArray69);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray52, doubleArray71);
        double[] doubleArray76 = new double[] { 1, 1, 10 };
        double[] doubleArray80 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray76, doubleArray80);
        double[] doubleArray86 = new double[] { 1, 1, 10 };
        double[] doubleArray90 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray86, doubleArray90);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray91);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equals(doubleArray80, doubleArray91);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray71, doubleArray91);
        double double95 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray9, doubleArray91);
        double double96 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray91);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray91);
        double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray91, 1.9193799025592952E90d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-19.0, 3.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-300.0, 66.66666666666667, 333.3333333333333]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 990.0d + "'", double95 == 990.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1360.1470508735442d + "'", double96 == 1360.1470508735442d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[-5.758139707677886E90, 1.2795866017061969E90, 6.397933008530984E90]");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        double[] doubleArray3 = new double[] { 1, 1, 10 };
        double[] doubleArray7 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray7);
        double[] doubleArray13 = new double[] { 1, 1, 10 };
        double[] doubleArray17 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray18);
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray18);
        double[] doubleArray25 = new double[] { 1, 1, 10 };
        double[] doubleArray29 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray29);
        double[] doubleArray35 = new double[] { 1, 1, 10 };
        double[] doubleArray39 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray35, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(doubleArray29, doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) -1, doubleArray40);
        double[] doubleArray48 = new double[] { 1, 1, 10 };
        double[] doubleArray52 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray52);
        double[] doubleArray58 = new double[] { 1, 1, 10 };
        double[] doubleArray62 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray58, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 100, doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray52, doubleArray63);
        double[] doubleArray69 = new double[] { 1, 1, 10 };
        double[] doubleArray73 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray73);
        double[] doubleArray78 = new double[] { 1, 1, 10 };
        double[] doubleArray82 = new double[] { 10L, (-1L), 0.0f };
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray78, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray73, doubleArray82);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray63, doubleArray82);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray40, doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray7, doubleArray85);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray7, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray89, (-92.0d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[900.0, -200.0, -1000.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-900.0, 200.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, -1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-9.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-910.0, 201.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-819000.0, 362900.0, 1769800.0, -401000.0, -1000000.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
    }
}

